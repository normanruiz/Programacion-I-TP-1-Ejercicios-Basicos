%!PS-Adobe-2.0
%%Creator: dvips(k) 5.999 Copyright 2019 Radical Eye Software
%%Title: Guia de trabajos practicos - Parte 1.dvi
%%CreationDate: Fri Jan 17 23:48:19 2020
%%Pages: 17
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: LMRoman17-Regular LMRoman12-Regular LMRoman12-Bold
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: /usr/local/bin/dvips -o
%+ "Guia de trabajos practicos - Parte 1.ps"
%+ "Guia de trabajos practicos - Parte 1.dvi"
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2020.01.17:2048
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 872 2018-12-21 20:39:31Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.30, 2018/12/17
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/Power { %  a^b   latest ghostscript don't allow -4^-3.1
  2 dict begin	% hold all local
  /b ED
  /a ED
  a 0 lt % prevent something like (-4)^(-3.1)=> 1/(-4)^3
    { b 0 lt 
      { a b cvi exp }
      { a b exp } ifelse 
    }
    { a 0 eq { 0 }{ a b exp } ifelse
    } ifelse
  end
} def
%
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (origimal)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup xGridOffset add y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup yGridOffset add x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 395 2017-03-21 09:24:38Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: lm-ec.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmec[
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/cwm
/perthousandzero
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls
] def

%%EndProcSet
%%BeginProcSet: lm-ts1.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmts1[
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase.ts1
/.notdef
/.notdef
/.notdef
/.notdef
/quotedblbase.ts1
/.notdef
/.notdef
/twelveudash
/threequartersemdash
/cwmcapital
/arrowleft
/arrowright
/tieaccentlowercase
/tieaccentcapital
/tieaccentlowercase.new
/tieaccentcapital.new
/.notdef
/cwmascender
/blanksymbol
/.notdef
/.notdef
/.notdef
/dollar
/.notdef
/.notdef
/quotesingle.ts1
/.notdef
/.notdef
/asteriskmath
/.notdef
/comma
/hyphendbl
/period
/fraction
/zero.taboldstyle
/one.taboldstyle
/two.taboldstyle
/three.taboldstyle
/four.taboldstyle
/five.taboldstyle
/six.taboldstyle
/seven.taboldstyle
/eight.taboldstyle
/nine.taboldstyle
/.notdef
/.notdef
/angleleft
/minus
/angleright
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/mho
/.notdef
/bigcircle
/.notdef
/Orogate
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/ohm
/.notdef
/.notdef
/.notdef
/dblbracketleft
/.notdef
/dblbracketright
/arrowup
/arrowdown
/grave.ts1
/.notdef
/born
/divorced
/died
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/leaf
/married
/musicalnote
/.notdef
/.notdef
/orogate
/.notdef
/longs
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/tildelow
/hyphendbl.alt
/breve.ts1
/caron.ts1
/hungarumlaut.ts1
/dblgrave.ts1
/dagger
/daggerdbl
/dblverticalbar
/perthousand
/bullet
/centigrade
/dollar.oldstyle
/cent.oldstyle
/florin
/colonmonetary
/won
/naira
/guarani
/peso
/lira
/recipe
/interrobang
/gnaborretni
/dong
/trademark
/permyriad
/paragraph.alt
/baht
/numero
/discount
/estimated
/openbullet
/servicemark
/quillbracketleft
/quillbracketright
/cent
/sterling
/currency
/yen
/brokenbar
/section
/dieresis.ts1
/copyright
/ordfeminine
/copyleft
/logicalnot
/published
/registered
/macron.ts1
/degree
/plusminus
/two.superior
/three.superior
/acute.ts1
/mu
/paragraph
/periodcentered
/referencemark
/one.superior
/ordmasculine
/radical
/onequarter
/onehalf
/threequarters
/Euro
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/multiply
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/divide
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 userdict       begin       /draftcopy-CurrentPage 0 def       /draftcopy-old-BOPhook
{ } def       currentdict /bop-hook  known{             /draftcopy-old-BOPhook
/bop-hook  load def       } if       /bop-hook{         draftcopy-old-BOPhook
        /draftcopy-CurrentPage draftcopy-CurrentPage 1 add def    
    draftcopy-CurrentPage 2 ge         draftcopy-CurrentPage 99999
 le         and         { gsave 200 70 translate 65 rotate        
 /Times-Roman findfont           130 1  mul scalefont setfont     
     0  0  moveto           0.90 setgray          (Norman Ruiz)  show
          grestore         } if       } def       end
 
@fedspecial end
%%BeginFont: LMRoman12-Bold
%!PS-AdobeFont-1.0: LMRoman12-Bold 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Bold known{/LMRoman12-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Bold)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 66 def
end readonly def
/FontName /LMRoman12-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-476 -289 1577 1137}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF10591DF32391231FD9ADF097C47DF0B87CBECE1B
8126447EAE1564C1C1A82FEFB61C5F15ADB2502457074DCEE095549FD9D8BC58
757F3BFADBB5865A9F4C6B4E37AE0A3790E79B4A3CC477140D5BFF652B59E400
223C83D4E08A2406824F883A52C6DA76EFD957D5DAB0EB5CB1111B83A6ED56D8
E02845701BFCB7E954FF5CD309C679025FF0FE24F12514DF0FEF86EC20AF9326
7CF08461753843F4E3AC3C486D6AE78F03909D8DFE1BCD5645596A486C156CF9
D549995066A7AE7B22C519ECE348BF3529C95E2D1ECB832C24FCF54C84718CED
6164AD8035CD1E938B7726CB36CBBF34DEC977D42954E88925EC9033EE14BAC6
F9D6B54E85C0EA39EF3A661EE4B82D6F8D529D44C855B642DEE4AD670824A86F
06287DE387927F86F092989624FF57E382429F14903B387E9AB9787CDAA4EB3B
06F3473A63B31C176C03F8C931A5B7B5C47CDFE2068072EF520D355530600D28
04594D8EA0FF6D130231BB08227B4CAD7657791F89549F92C7C0D07E12044BF3
D9EB41E97D064DC781C5E5D76F5F54BEAEB123C53D41663B0C2594354F39D3D5
A3E1397FD2E40D5E6153592AA3F4EDA899BCA86F2935FBC0EB8D826714DB45A3
932C9138908E429806A32A74C464169625F10438F7087BF286C089EA3C6866AD
F44B147B76D3F2968E9704C8AF9F8223DC14873AD224CE1F669D6DDFABD6A26B
DAE2B315DEA91E452DDAD3066F81EA46582C324C6513964A084802A25E211009
E84E722FFF61C769C50BD329B88A5B58FB2C3972A239A35712A06FF1A5F6C86B
E871E32383E6D196683F2CE295C80E3F95459833AA2D4CA6065C2B584B4CCE8F
DC43D607288635D51D2F3F4DDD3C0ED736EDB545E529CA119E937A4E4F77B509
388EA3FD9FA10797B5A2DDFB174B1E1FDD705AF02638B0318BEA32B0D416B27B
9504C889C1FC30A36AF2B2771B685B4D7EFD996442CF47558EF0E566DA0DEE12
7C9E98DCE9C83BE46CF6D4B1DAA2AEE52EEB4F07F80386C872B556B363517608
42271DC8BCC8A7AED0FFA3EC0839B104B3D3399D3C2172D3C2F4A2A6DD033D6A
0D6B362EF493A53C3C1B37349F51BB5EB83237C7A488381A17E3ADE2F3BBAE34
04AF40A5B687B14670190FBB954E10D29A3F0A68C1C2482A0BCDFFD9613AC0C4
6F3D057FB5F47E2DDDF9B56C3617FEA2E7FD05520E996C0B3F3FEEAE3DC36406
0DB581E30CD562DB316843A053F82CD8E6D7EAD84B4C68E74FCA43C0A00C038B
B32C43288B1149ED209700A649B80FE0359DDB6BDCD292EE0320B1B6AF5E62B3
58333483A2C30F1E6F2D0EEB83478AD15F4FA999E8ED6A11315A7926538D22E4
854A274C747B69C406E4D95578B4C5A9BA10884C31535448C20AD821AE51FFF0
51896FB41AE222DF8A67CD805EC55126E6573B012EA2371452E23091C65D76AA
B3B0B477418CA25C0FF5F0D840032F95D39F257C5FFEFDF1E309A23F52378FE5
CA9D10043E0DDF5406C0316645AA6A33D09507BDF345201376AFE24ED8E855C8
EC0A4F120D08DEF0F19151DEB13BBE9608B43085D30037728FACF47F997C4288
AA1C8CDA5E3C6F89AD4B0309808E09C27EB562B2CFCC6C8E30F658A9095000B8
CFDA02D8996B3C557F2EF9182692255F7A98CE9B93A645D54A017FA30521980A
2F726DE746529049089B6B027057A685598D8408D1190424E34A664631E00C17
D80842A8A15EE28E5772676DF8F2F603F3442EE12E1998ABE5F39E7D95DA9DE8
FE516923D8CC810E306A5D58A08AF74F6FA4FD574F36AA2E64C6E1AD1A4021E7
D1D519B7A344550A1D33ACDBF5636346E0A2A60A0D4F4C8112ED925C55E4B0DF
0E5BEE4B29E5DA8177D46930F2D47D3BA57A060FB9C607C595D09538788D3BF8
87CE3583664AEFE0C59EDA04A147FB51227A5AB0C2E26234BA6E9C949D5095DA
66AB087908D6FB79796CF753C076341D757B09A3E3EC6954EC35AF45D1636C8F
D8C88367330901C5836918C005010956C520A7F1032950F693A42136142D77A1
741E2895CB2CF6F6450FF7F2B693302EB8A34D972A13ABA38387B2D6B7148A11
96B77BF70874462D6D951BC54D61D6DEF2B38B842845C373426BE65CD959E960
C59C49ADDC24B5EE205EE3575F9FD4EA6464FDCD319496C15859CDC7C0DE073D
FA597ACB9868737617F9A60D1F58E74D0936C7EC74AE271326689E007EF544C2
324DD24A7CC42F5BABEDECDD6997E24A67EB7BB02BD78BB5FB7D35D0F3AD04E9
E3B9029AA4C97ABD7C2068666ADC003C56B2594B85C1F204B6509D5201534954
EAF50FBA1228E1F18331E151718268DE4D626FADFD70DE44B561BA11F6914878
72585C17344CC47AC7862F32859E7D2721E02DAF7C12EF47D801DBC67D95FC6E
9D36A82FD72AAFEEEDFAAC035ED733BBDB078952E44D6777D906F8B892905C3F
D4C715E5AB1B0AB52A559569A0122CBC07A27F866C9C0AFF5C36C2EF1EF11F3D
2EE51F9E26DCE9FF9F84EEAD17B366D678E61C6176FEC09C94AE1620868D9032
C34BE24CD59ADCD6CCF4D19716E82C68555C388368F9DBA8FBE0517637534878
9BE20C7F7BCADC8A32BCFEBFDB16A0642E5CC69E5A25A663A7B1EFDF40752BF9
4A98902E608264DED8C3241F0B4BEB65118457D5C4E806B2A97ADB2DD5A9F66C
4F84DB4D2CB53F1FA77EA74787017E92DDE4CA70E9A40E2D263F7BC718B34382
1AD20575B7C1EB18CEE6EB3D2FC1139BAD4D89C39B10EE9B6B273645933425C0
F274E65F7277CA7044515630B40C4F06CB4B0848DA6A3FBB337D4E9D38D33E46
E3F79F2BC92D811CC6DAB2E50B2FC30FF1DCAE9BF86FD2DC770443807638D111
F747F772C8099CDDB5F3D586B9B5A9D9CD9D7AC974D08221883665C31B5361DD
832C513510C5F90752F399186D57B74D8268BEDED04246B2492652DDD3D3E40C
E68E33B5A3213250E4B49D16F7F31113D7BF4D5522D1225488A9B780043DFE11
4D2536479E7D64EEB551A1EF84B8FEEA425E21913CBA31E0267C2BD4636B3180
7713E3898334BD99CFBE66C4FDBDD9B91806235E20A40EF09A72B1959517A063
0A94699E2A1BD96541334921069ED4EB4830E5E1BE4EE7195B46506868DFB009
B3394AF7EE7076395EE79C2D0E1D185BFD79158DCC11C921DE1DA42697FE1B9E
387A290A4FD1B16EE981A524D1748439926534A93FC1B7E85B5574316F2EE824
17F02CAB578352A969A72EDF263DB48C949C8A17B802EF4CAD1ADAB97905C6A9
D5DCB31F5F1605B90AA6EFC31D29FACE05D35D9A380DE07566375C92A211B473
C0606C8925A21829E7622DD2B7FD2679D084716B4647EC18CB1B19ADC5E93D89
8F57080AB4C9E246CE723D75A2E5BAD01337232B4F684D275FEF10E1C8DD91E5
EEC0D7E1B629E2AF299C26DCD463072AF184A4C3FF125A05EE537A7E03BD98EE
97FA23D768F48EA462E9C8ADE503223692EA461238FFF855A95BBDAEF6791773
25A0F9388EFA1344A2C5487F80C128B60FA24296CEC9113107279BF57D4634F9
6E28C1F94FC02C79B3E9EAA545B6C995F898E8C085E663ADFD8D0292BE5E26D1
E9C82AF588CC3B5147FB15E1E8FC722D61478FAB68CC6793DD7163B09607810A
06BA0464A9EF6D1A994024985A7F6572497A6859BB8B46B5B7ADD7CC5E36F020
5B421C2B6EE7B37D178BD49174E5E639B50D8F4EE5466FB4024114DBC1D9BFAD
07695C8F35E5896047E491DED21E55B42B6D4AED6EE2091E33FE3A23E68BE4FB
2670C2F1A54555FFFE67565AB5DF23A717312655DADB369626DB03244237C980
DFECC233D463546CF06D592C606AEDA97EA7194967AF4CF6DF30D6963BF9DE14
33ACD2308168F1841D0C155198B329FB463D86D4F37229EEC652612CE1B974CA
7BE24053096A1DC53BADAE7F802E0D32EF0DF8FE6F2D4E2880EB4A142629B60C
CE7E3882E49DE831CBE33E84ECE1BADC186ECD2026F58D771229C2A3A4914554
26500E410A70704BD95546DB11FA32359BBBA7F8046B52CB4BE2C7A8686D9670
FFD34A14D9AE40C155E53CA7CC6FD63005901B7207286751F44FD73FBE5B089E
1B9A97FEF3E84D3896AFE066E7C1E80836831BA9BBD72A2B159A6059832CE89A
2FA7CAE9AC02990882F3E81B9090CF23C4F43555DC42F2E66AAA8E40FB4F9A57
5B9C83CF9529ABE0C74CCCF75C69FE6A4B6EE265EC51A7451C875873120578A4
47B0584D28F6E8A0197C16F29FAC0342BC6B092DE3D075E348A8169D782F3416
E6E89E8B884C3DA9CAEAF336D4CC1751C2033CEC54AB1D5E60D97B7CA905DEDC
4924F4833B306277C3E08060A81E14EE3230736CE579144A304D61A023EC0FDA
8B73C48DA77CFFA9E3417D1B42DD280C1F8D90E5DDA021B41B0F1FCA93C80553
1B187CC0BDDEC01655EE481BB67E340DD31B820E7D29CFC033D152A632F54408
2BBDC94BD47BD253ECE00BD8D482DEF3B95AB6B967E999E27D331F0559470B40
19782228CDC074B58CE813E386B3054AB682911138DC6D9C099BBBC6AA81F919
DF58B7D8F452CF4A96714FB8C4C3BB7B2887CDE8DB8724D14D4DA223CDD16E65
15EF069361DE84B7B653D90E146B6AAA318E165C8353C9CC1F0927DF49937BDE
200CD5F3148055B1CA561E2BA388DA349650D0AE3798F900A467910D50BB0E97
CCFFE2322734D37962867F79996954F36C5C090B0A18F81586A94C0682E2B465
19EE8B3A333B63D44EF29D334A64C61964CEF49327DCB5AF1919C4F3EE314D0F
09A5DC24D41FDD14AA83B96B159EF695080C2C3A5459F52DF5237EE2205F8175
E0A3B904112140552E1280DD31317A239486A2278CF986ED77B3191FF2B7FC8B
F3AE8B6F5E9C82246C7F9AD5D29234451BB972B559AC50EE733462DC6CDFB7D0
D4A5239220A27CBD23A3057371330B4041566CF5A666F1EC1B38BE310283619D
CD7B2DFDC9DCC814084EDBCA084B28CE46FEB009049940F99D24D7050BB8B6CE
2AC29FCEF3EB2C994C0DB80E2A3617825070AAADF3FC711218F291669BC3DC2C
AB97F476CC7CDCE3DB5DDF931CBD6CA5BDEF2D18742DF7CA2D119CC12A3246B9
B5EA106E3A88622A041FD896A90E8613DFA8EC49288F55CC3673EB6AA04D97F4
17492DAA7D861E3890863A249FCF4E88F70C581E1B78FB92A8A32F408CD9208A
66A14DD2BDC5FB591A23F690945DACCA92EE9061FAC3A8E1B8776C69F8E14297
68372CC0E84BCA86276BDBA191466083845E11D2BA0F68B19CC8756AD1987C4A
8477C26075C8A819E4BCBF2B680A764BAF9085F3C72EFDD42EF25EBCB78700A4
6EBD7AE08722DCE6A5762EDB87EA4AD820C359201546B118C729AAF5B30735CE
380AB814EDC24C3140E4EBE63F42628DF4378C539BAE628054B5C31D23B50C2B
3394243447E533C2B5FCA428E4FC55D4FE71464FB62A837DD07020402FF8E0B3
91AF827DAB714D59E44C0E2851E1E5AADF530E5F627D5E2622D22B75FE01501A
8E7982D6A14F4F90FF43CABCCE04E27E3D9DABF95CE121CA495D6082EA013B35
9983AEF8630E66386F7FE09C53EF76A77DC5C52B2FB301628AAE6F318BA2C364
A97378970F1F9EE51515D2BA0D44855014654D1A999CAD1A5E9DD53C9510B703
29CBC2AC275331FF480589012D7881C8E038B9C0027C40E0F9DE9385F79D5989
98FCADE704A1079275654675219ED8A610A82723E3B50BE086BB23FF7992A3A9
24049F99B840F337BE8B11C5EEFEB6538BBF26D32C1D79BA01F71E56482BE924
C444FEF0F24767A3790119AD65E327533BC1A3EEF5BB2106F16DD0043E90A863
90AC55C518FC964BA4D7C1B2522A37B14D7743D9769D505E958B699A14BC349F
F6B535D1F2F28A9FDBF61B30E9853071B8B14A6550AA382A75AD0CF739EF1B49
B6D648017CEBA3A38EE6BA2063A650CBC87EB9D1C2DBC3558233DC61135BA3E5
397F55DF844F9EFE1E760903FE55352802E09FF8F579B59309F9142F9CEB88DC
7864A8BDD188361E5CBBEC51EA8BAD99149CCC4D1063186031047EAE47CF016E
3B3AD1A5C090108D4964C7FD5E57B2B651954DB42742E34C5E8D96DADA48ED08
87350DBBB1051211F1282E9A80CFE218A4B5FF0264F1EC9818FC830D6DD7472D
DFD8AB58FAA53C19513758125599564D174F7B9F179EF01BFD7E637E171B8F2C
7547249332D8E5920B0F7C555721D258DB8C4DC732ECBBCB771FBEB2856FBEC2
39980A38968FF9B815E5DC93846CCC8A07CED7AB653E1A4D816B85DADE28C0C6
7A74F8126AE35689E820B7A1D5E9BBCF46FA3AE7DDF8E169FA4E0EA83347DD8A
EE66886B8E0315F5236BE48B537F6DDE0C535B229630A435524B5C1B8CFA5229
C6CA9C8BB7B082707B2B06CE21CE40D04D61E2BA36830559BC1E8FF0C3D790FC
1AB70F4BCD2B7969B6F1BDBB70EFF0F6E4AF1A437A205CED9EED727A6719ACE7
D439CCE123247E845A80DD9961A9E37E4285B758500AC9FBEE678FB6BA165191
DD7EF2DD7490ABB168FF8DD6EC74957607DB3ED0285C3F452259FC05FC45D489
6A183FF4E3956BA25D5BAD5C1715CB327698C8177A44A609C56C5F110F1951D1
717F3D33777EDE774B4792EF2C7007DFC29E2647959125B044E3DBAD4D4C0A77
C664A10D5F2188EE8AEFBA5E03EB7DB612716FA0A7ECF7D7A342EF815C6CA4DE
4EF80F2C4ED19942888CA8A3B820DB6BE101296BDF05D292D89D4A9B69AE6255
8ECEE827BF8AE529717082BE36A202923166DB58D373297150A1BDD905D14DBC
2E6D1A5F5E2C0BFF590083A4A9E701851D492BA6AAB1F471885E36FB783A63D4
FB35C215FB81A2A13594E9325ECE542EF690FB81A5A18E98E97BEC211673E85A
09301C445C3D820174F763F4A67732748AE8484CAF3929BB37A86FC778BEB319
30671A59F591EF1DBFEF3FD2E3D8B66473C7BACD3BE61A3AA66849C3A746AD09
85BCDEDB5A5F81BC20AF0B866296B84AC399F6BC4CC2760FF94DC8F8A9AAF25F
3E4CE72053F8E58593C52FA247BC6CF4B18AFBCBAE3ED8B25E37F6193C303919
6238CDC1B7AD2806D68F98AC5D9D9D69D696CCF716853C5C315AC3A9787F1F82
9DCF4DEC15B16CE04D32EC3EB4B6A2A8AF8CD31B8E6C082AE99CC00DBB52249F
2090965A62D06BAAFF5E6D5BD7BDE8E80D6F29B33E9D0C1F3661B2D8DC640B8F
2494EC316A5C574393F75495B8B237D712779C8ACE51DDE1FDD856FAE2C86A1A
03428B1357E7A108FE694A8C7A1FA5C03B6E07436B6560B6472DCEF049A97F43
9393AC4BA9F2B4B8E959E8877C94CFFC0D715B1B4C7A6B386466E51305470160
FFA5A9FE4651225C2920E3BCEE9D09CA5C60F22B07F24A26DD86126BEA052641
0DCD7B27AB23E44EDBD8F129D985A13F3E36698AA060ACD6CBDA8D00D12D8F36
1B497A5239C9616886728821A9E6B675DE900A5A280F7E7B6657CEE0315D1962
DDE4EEEB70A7FDC1BDBA17DD1D2F853285E75AD8BEAB1696E0E2C1186D0798C1
C3A319CBA04421DA0B1B40B35D6A20C60658D61ED95E7BB4ECF7DB3731D6BD43
7B2668523E0FA5EC09BA3FB68C4C05147AFDEB6BCD16A45809360329ACF5B813
6EC07CBC550A59BEF7C8890208BE4C8F5DB698E081FD5E431E713D3FE047C72C
BEC469221759F4F1124070141F4CD01914C01DBBD3B1EE3B50F4D99B48E8F291
69E04E1631C16076ACF45774D676949DC2969A27784051AB9E62CBD50ABE89F5
DA44E4CAF9A5DC0B4586C3992FC53F1ED102E969CCE27E8EA00928C0A71C1499
CEF50F2E8C9742C8432AAAB19E4DC86AF3F7F22A500C53429EF18C3D347430A1
B8925506A2DA205DACF00BCE930F6409136C1793AAD1ECAA2A38848E183198F9
B314A48BBAFF813D641BD081EAC8AC5B3D2D04FEFD6E07300BD1B42AD8D18CDF
614BCF3D8E2746F633A71FFE65DCCA47FBB31392FE4F5F94724C1B48CD066E9D
E3B8FA326BD2EDE7655C691171313E06BE170CC041D17C19DF574028247317FB
22442B6DAAD517BC22E22BF30706C80B42BB37178508EB5EB02F088194A7329F
5DABEE0776B1A98FC2D040C14DD87114A9B084D06F5E219EDD29984942CE3E5A
6990F99FFDF77D85D43333CC75CCEE298E96A59755370E746320CAAA9DCD5DCA
CBED12F1744F0C101D3764B8BED3E225780F2D9BFB5C42F4C24D88653589B431
FB84E4DDB650C2F783594DE56567E280DC5E0CF619E746402D25CB99FE1945FB
DC9BC869EF3D36CC0FD6ECE0EF01BCD9EEC871AFD57FD3DF18928FC0E56BDE22
3615AC1316EA2FAC998F9E08DF914CE466F5383FC4539D3C5601350E11027DBF
E4659DEE1F1194C2F0EB48AC809BE050BA20F8FEB66CB5AD6ACFA9252518FEC1
1B39FBD2E0CD5741D8C57CCF85B7887E6A7F6B6E4F61160966A90FBFD8DB1A15
6E9D24622012A917870AB47B59755CC597B9E16B5CEB1A5EE1716186D33A8F41
4FC06E57BCEA8E8DB982F1E2CBD036EFDDC29AF5BA03CEE08AB4E79EB902EC84
34043A1BF5F4898A4FA7DA25634F0670E0F2E5F4703A1B4BC0D6AB383EF24A3E
4D146DEBD198727FFA2FAF1C3E2C76D4ADB2D5A08ADC1D399DA667468782F734
617D22329EBF716CA77729C6AAEFD8E6ED3CB14689CA96FD2D03A1BA252D76A8
46C1FC2C760C11AF007CA8FCCF420622EB34B4E3DD2D6BD77D42D4F1646CD21C
68C373F12A52FB18A1FBD42B544011323E059BCD0C4D4B02AB431A9D769C699B
9CDEFE939E955AC00C6D0CDD07BDDC6E3BC5D4E6634E80132D2C75EFF9C33A79
BD1A013CDCC5ED98BDF17EACBDB836A8F7E7C2A89DE2B5F25E776623F737A0D0
8EE122DA0A83B36C95376251916902C2CD37D254925C8492A676F6B639809F70
BC4C1B985F03669B546C110680DBC9E1DDE716C4A20965EBA932460DCC5F7C56
5AAA0D56E9AA326C57BC170A929A39746A45D0E0C3C88812D25011C461422D8B
2CE60C595662846464B25687240B575A6CBEEF06521A3BD743B2A2468217BA51
21CC6684D6E05376B2CFEFA9EFD7941D2914EC798D20AF9AE73DA2EBF609506A
CEEC8ECA30D88785FD162F1F35DB90957845544E50B37197F7989036A0602293
0639A12D0216F822CBAED2657A1913E3C0A21FC667174EFFA83DDCD78D676E71
B6C51A64A87FD82AC7FD7828644EFD40B5C0041310556883CEC750C615EDCBCC
DF3FA0BE3DE13EEBA9C102C40045692EE3B52643A0DE3E667CB48C7F755D6783
8B8E8B5A35E6BF9BF3098535D75BE96F77AB3C26FB93A62D5DFEA07A0C80C0A8
28A47BB58D92C55DA515B2D8AC508773330AEB5E669D85B963F120EED0088AAD
263602357ED1BE61FD58DFA0317FA127565CB5D606A31F7EEDF4F0298C9AE254
619CFD825A54EFAA04AB2C81845DE64C387F3AE3EA8386A9CB5709CEC4A16EF9
A534FC4F81CBC9BC691EDC41EC90A5A709064E445911464BA2D6CD239CAA9B28
146CC516ACD809E6B143D1BD888D966E97636661BA71EB2229A1B1EED0B0F124
ECCCD9844213E41BC82D098077B21B33C6C99388D1E970389672933EA7C28B31
822AA9DC74A4F34B67C996915376BE304012384CFCBA0E0C73FF2F9658531A3B
A0410C80EDA4C7B9E7AA036C519879BD2073F6457536F3EC0513F88B6ED044C2
A8E33A6CE95D45E6B54844DFC3D8C9BF12FD6EAD401F43601BCC7F39E89FD7D5
E9EDC773AFB821326C61BF37D232038E01DAC007D632AD6AE626E38CFEAC1174
8F9B23F33426BC4AE3F026AA817833CD4FCE2C16F58B8554679E85DD52F3371D
778B185F32A364285A9A8EA08171D1D742344C2C9B7168C610BE512D136570B4
C3191D8A4E83102B81DC22CDD8965A3B344EC01A924BB9615DBB6786DF6522B4
AFF4D46E8B517DAF65D1837F89EC20754406F916ABA03F291FFC03E8EB48ABD4
D5967C23313AD539AC493305C51E25A0D55888A8DF6D983D1E4A85C06190EF3A
270698F6B9230D2A0944ACCBAE584E51CC1432C5F44E74E3693663C3C166BB56
6E3C9C3193A9DEA9AADCD068449EABAE9C4E28C6F4821319551F503707DE018C
4D20B99F6ECAF512EEABF1F69FA9956BC804E6C0432A3149B7BA168CA488A7CD
FF278E93A8F3342F0347B8EC0280AAF49289DE4F4865F018BFFF1BFD938020D6
F8F873E7A0C607F80A4C94C917AA751C40846188611E976891A2BDFC66EE858D
35E5A9E2A00BC42B92571D1CB29505E041FB5D15E78F084E5920A6D9197FBA48
8EAB0EBFB50FEF925BA6DF2F7EC8B583F777D2C6670B93D2BBA04B489AF91F30
654219A48310961FA82A0C847ADCC5187331D0863A4573BE52098FEFDF24702B
E0D79C81597D49BF022A2D851A47A2D090F326C361BE135F4E101511B9440376
547482A1BB747409F38923A5E9452652D21216EB3326C34D2A0E4E8A082FD811
ADF35B869BB210E44A57178893AF229268DD01E9354074074C255686B775090A
16F6936C9A0AC65F055EE944D47992413B4D7D1EB9E03780803A4FF311D46942
59440CE6FB005A43A0861A9033ED76B763A8DB65C3BB73710D3D92EB644A1E86
3BCEB155914D39D71C5618FE0C1D5E62A860C77CDFC3849E58F278AF879D60E4
E1046B3234484519287C20D811074449DC64461585B906E100942526F12590D8
A239B8AC70E319262AF6A41D93D15507E642327B74B616A8F047600E90E6AC72
43F619469AC8C8299532C59403567379760EF3C4CFBB9A11BC817C08C2A2249F
E4068D529ED392DA8197AA17DABB2C8F883DC5E7C0AE5E255A6390C7316C41F6
95807F3BC851F3B31D4AA2610FB1F3549403BD88E1DAC75E57915483342A3D65
AEAEE8D15DE7E1AE944978C588F159E948D2977DAE76EFB3687808DA0E9B0423
62B27ECF012AB9F3E0A38E42C10A4C41EFBFE4AA5A61C2716FC80290BEC56B10
452C321698CA1B72AFE725CAAE98F627C11199300C455AEEB30CDD6E6108747F
D778A0042C6E3EEC6C150AB8206D97E4C59DD6682ABF66B4DC1611DBED8497CF
5121199EB486424448B45EDB617EDB931969D35EF66A443A7BCFF3C4EADC91E9
061F9EB6F8C21A25860E69289F0C2133C543BCB734F552B860C295991CB992A3
EDB257EC47B8086E763C186AF4D368749FF7C02F4CC174E707ACB07E1F27E9BC
0CB00C1E3165BCE467D48553760B02548F82897948B056A866797292AC7023CC
C86F425199E01A4C7B87E4F5D4EC84E9D21FC68D0D135D344F36FEA1F9734C08
FE0B84109D86437D096DC2576A223C495490F7D4F3C059CECBFBF7F20EC54316
91AB81BBD848A4DEDDCEF664ECFD1D04331C07AE954D0E9CA21718B6D4808E48
F40632F84C34BEA6BD6B76592A8D6424A0EDB91D2A74E12A72DA524B0F3ABBA5
A823129904A5C7C1F75CDEBBD4BD866647D52BA254D2E4B701609E634FE3EC77
9A517C4D6040629FA35ECF5F72BC11EC500043B5BA14B6722F4521E7C552BCB2
882C53BDE88CC55BEDC6BB5C98826F55898CADE887047A1128E0AB55B6949735
26FF8967B38478FD9A143A1D7010531EC3868FF4ED604CC50026FD0FA59A0D93
F91021E7A2A4339CE7B7AB32220AEE7C75A5BAC24E9E43AD56BA6B5B915CA309
5ADA5883534D7B8680D0D3062AF0E81ABC55AD1245505B5ABA5B3216B772316E
03AFA5A27E6F5EE3F77F4ACD5A82D36C0950531D1AFFC94017D741EB32F0C45B
2728039435C6A7ED4B69E23BE70408309B77FDA513DFABB841F34FF074D3C279
0A24CAC71A4186F17220066A6A80C1E667998E506C7E1609FF9F7EE618A55BB3
3E087612C1FCB37968B8AE1BCADE6BD8A3BA1009B34137B90F0D54F0FBC15FEE
AFBDA650DE094645F2CDD7998FBCF28ECC4DF72001C1F094DECCDD9F43AAB886
40D0E9347EBE5F0E09C79F2AE5A178E37F4FFE0300932030C47C0921C4BEA9DF
0505C07E64B2D4509D1270CDBEFF01A02F7232487E4A6B30A7396CE6843E57FF
9B354CCBEAA565010F181C883DF60990A47DA285D767E651964E43988E61019E
9B2EE00D5D6DCDDE1AE858AB0BD573C2E4B68106A32CE1E3192849C4397A469C
12B20727A4CA38A6CAC70FB674EEB14A276935114F1DA253C4E2C6915C9304AC
280355E991C525AE6E8CCDE226F4902BF46D68C5D1AC634D0FB01918E8BA87EB
21AAB2C494C6F6FF275D1503A1490D2E6AA28DCBF3BAE8C7A5ADEB1CEBA885B2
2A6A42A99AEC79FBBA92A27965AF40A71E05E4BA8D7FC7611EB82F8F3CD66B6B
62484DD819A044F3E3153D1BB4D2425914BD17456E8AEED7CF4C31FDA73EF6DC
3734B4B599703F542EEF57BB334A8B9A1D5BB894A0F043F08D120FAEFD8935C3
7F69405CFDC401C01389D6C65BA6C0F353D1EECE54FBC7B5A887C3478EAEE872
0CC128DCA9BD0AAA6824BD46D237D5AA012269135E586D85A70DDC50B085A49A
37D37011B460934CE4FE280586F49FD91AA861C5946864A1C0EB5396DF8DDE99
6F9D3B8A2E27BC7BAAA4097D7893EA486B56F5EF858C28160F972CEB7900C7D2
FF6DEF4366C1C08E0B09855E04EC3BBD8CB6B0A8F07428F5D92F0D318ABB61FC
BEE8E8B0B00C0CD028F8C16BA91937FA1C7D5A6E4647A70CB32D9A9EA2796123
2E02713C1FDB9EDAD6982CF55BC7DC06B034D0EF5C5753488893EA46C5C93979
42013B540DD291372C1B03D27701DD3F7FB21D85A0AE65E064BDA1A40488A92F
D1CEB17A94E27270B41AB70586880A7EEB24A6834CC1E84661F2CF8E1D94B543
5159884E743DECBED602BF78B6961628A8BB64EF2EA43D7C1FA208EF44EB3169
81B1CC90D6ED60D7967278469F8151750EBC9BF2355EF3F59973E931531B8EA8
5AA74FB443296734D6B7F9A7E71D17B624FC08BFD08FA0800DCC0592D8790928
30CE4255CFE17A5EA1F11B8FE226AE94AEDA6C5911D9A0E6336E36521E2C6CB4
EC40857946FD8AF62FBE99C8E9E6F3D328FD55CD46FFAC1019EEBEF540640ADF
732D0F3522AEFCA7BFA8A854FD0C91A958445E95683B0C3A934884BAA24799A7
BC784E9865B00EE8B49B918E886049F1F4939F35E26BD22862FBB603738B2776
D1C11C1CA08BC250CD1269C4063189700AD11B06A9345D1A7482BCECFE99AB16
C27D275B6BC6BC5BFF4FA22014B3741BA64842BA7FA219DC0FE5F0495F54931E
74E8794276F856200CAA4512B04DAD86E4A3D0F951A9357BEC5619407EEF7003
9761853B86412505B6FCA5AB5BC8937AD9FF4898D970689B65424577ABA7335B
D2FACD8E7E4D33D71E8F20CE07EE454B8F0156C0BEDED15F61B43914C6D17D10
383359A4AF7B2C1B97F807E5AB84C0E6378D4022A99E04D6532F3022C6E7EC57
CC51E6331FBA563C58BD5415A8E78B4BE9051C6F35820FDCD315337BEE01107C
02C8ED058A88C55F098EE928C73D0E6F2B209BA791971918903CEC0E8E0CF86E
8A78841C25F3AA946FCDB5C0B35D25F8D8DCF379C2F3F3CC8C5E5189F8C986AB
3EE576DA9DF549937D4C471B6800267C03E9D494AE9808EE75928C6DB2BE2405
03DA330CBB62DFE941EB057B3F2A04B2BF00961C906BB305E2111EC5326DCD01
80A8F14FBC5B5194C721BC06497B40B6CE001EB5EE7A9F636F046CC24897ADE3
72CB06520983CC6741DE803E5B6EB1E7F5517A860047A4ADF9D24B2EB524C6AA
BD7EFB03CF1B8F6668C8B05DD1051181315AEF884EABB76C5B134E7E0185E7D5
98420F4F538D53F1A8ED1232C45DE53F6CD25B5C822A20926E63761FB6A5F103
8371D1125CA1B71653699D768A4D2390EBDF90624BB22393DDB90DF1D8545651
EA776863818ED38ADAE77DEBAB8084EC9A7564AAE4250DD63E204D95E69A4F23
12EC701C2A55C23A71E12403A443576D60393224793BD5B382C23B1122731C45
591EDF98D64C95C580449BCAFD90BCABA4EF9BEA75B2334B6D01167FC7190CE9
0C9891FA22B9DA61393CB3323FE1C8C0DBF149903447D39845856FEAC2F1A3D0
030AAE2FE329B337E929C5526F99362C7693B01E7ECF132C62BDF74FF9B7E0C9
B6190F3DA6ACCD6DC66492D76B2AFB5EE9C9F02EF624F58C085F63C61AF13F6D
F107FAF3D331C2F869ABD0DE63E1CDB4CDE6CEADA87D16F3BB71F5DDB909BEE1
8262AE673E6D288CD2A3095CF4B93D2773F4C10B32F37645812C8E9EE7A622F6
6300B69C5B27CC34FCE077B468836D6598FD8B539BDCA02A0A1C3058ABF11067
9B1F9E554057B9862A120162EE8B3F4E8DA71604E69332A7897A30CB9800A890
813A2F36AA7254E72150CE745A7F5053B1727EAE5E646178566A4853DD5017B2
ABA6EAFF475830D0F304FD7A9EB6B8AEE7919322D2FDF6C7D2AB2D8CB5E80FBF
BA2FFF1155EDDEFA2EF538083B9CB541102322EED3BF20028C0019ECC8CAA5E0
745858310462281BF194D09129E2021AB9B4DE3C8C0567E70FB8EB7206C75B70
CC4E75B3E0863C6C72C97BF84A06C0941D91993F8B72B95440914969A1F2D001
A5D7C9A8DD9089ADC6E08495C350138EECD08C67F3631AB786187031F8CAC0E4
2EAF7947EAAAB55B45B7A5C2477D79AF990E513B7D2EA0F236C7462C608A5F16
9BBC1FDDB8DCDDCE92168FA3ED3F80BAD4BEEB39C3C16C6C9C2CE8EC07EF399E
980DA5E294616DF435DF8515DA06F529E3B69B8928CDCBA82CBC29FEDEE39359
C351BA8960636ADF062E92EC13CE166F39C68C8F259699950CF68B05604EFD0D
BD5405231708623163ED2DB636BA33208269330C24A4E66FF7D28C1D8B0F466E
3BE65CF18EE527FC661B1ED5A1AAAA26EA62E36D03175564995F2A07393255D7
C34506AF6371CA6F51CABAAF6F0F96059F16748F7B1B043BC2F943791886B522
75052894C39DAD40632EC98DABB7DCF8C49C8D91D6D1EFD43C45FFDB982FA055
0F39629349197819C7288E99872B907D5AB583B082EEED8AB079C3923460D57E
81C232AC4877088B9B84432383997DA60FD67D31D66FAFB55B92D9F7F7887E49
FCCF051A2EF3F4FFEAED9F4F6608EFBBBECF32F886C8D85857949472A906707A
0D9295A2108EEA1D138B90B1C8957CF80035672F1AF4FEE70866721B078B8F75
5965895E0FD41B45FF2BA8D6F62578515EC78E18B045F400D54B000D43063303
EF635ED9019232C234505B395851637503A6265C8AC5F4968CA1CD728569A52E
F8B6EACAA0199AE671FF00B8CB83BC31CDFC0DFB5D8C14F78D70E6B9048F3940
0B4F00A75E44FD7F6BA76157167A214F11C228BB1F13267E69C406E4D95578B4
C5A9BA10884C31535448C20ADD2C40A3891B01066BA36B19BFBB47A27984EA98
6747BEB836A513697AC661337A35059E033BF9F86DB88FC6C288DAC0CC25B86E
6B4C0907C5366EC729729FA64B31BD99229DE905753D58A74E6059199C4E3EFC
3101D7CDE85C3CE440AD490C5F12862DF943B06B1FEDAF188610CDDD3103670C
E24780821FA1756569ECFB83ACDC25907C86437183CBE6414249A00134B04D95
57145C824496B0DAC80422A4362A89E46F7DC91B557A4C8683B529559A12E4A7
709AC97CCD001D327840DF12896F122727523B8A46948CA2E878BEA4BC99CED5
B296F1916C4EFAAC63A49519F31AB198A63A8378E87CB57435D91CBCF393CEEE
A94D94EF709930ECA646B2F07D8358D48D0A768B6E6E1C598F5E312DB3A0237D
88483418CF7B8F43A769546A1235D81B3610784B4815B8CF7331184791CBFB5F
5818871C3A1053C9A032767CA766CC888BB33D409B06D87D0BF8D7E491950CC7
076CEEE71E5A9BA77C4347E358A3CB7293E98DCC4745AC6826FD1CC653E3EE6D
197AA9059D0479654DAEF4707A8E9378D24FC8949895D672D61454EF54A2AA6D
ACF72875A14B47F6C762A76900B8B777D0750A6E07486D39DD38FEC1C6FA2682
FB89B797E65ABE2B3B7349934E69E48EB70222D8B9D52981FA04715EF1E799A3
2B23859A4CDFB52C22ADB4DB30D313BD8482C0FA356BA823EACA5798470B9FE2
E3D5E8082CD99E83264F6763C471FCE09BE830EFAA1848D82076C95BF064A846
71A6A97BD8C6807C21360D0C3F7742F47CBC2AEF01B2B0A8CDA0B452409C8C76
5E4F4CC0F2544D7E7113B9BA8ADA66958A20A94176FBCFC9EDD1195D91EE47C1
87218BBA826D0881E6FB959DCBA34B5F5BEA5D45695B09EEBC53684706E5AA02
982C49EA0FE82B5C3D0E0CE7498E431B65E01EFA9E51AD12185C82FA0BBD27CC
982CDB4D5FB00FABD415EB4EDA15C15D794AB11EE10C5E948A1EC3203062681D
FB3A2BEBF5913DDD852CE7E520BAF241E6D6D1EE9CE21AF6B0637AB23DD743CA
1740708B2AB07047B80849C0A77BEDA560ECAE3FCD7FF41BA0AFC09BDBECCA3D
62CF8656281C776890FA71FB5A983B10CB011408B69C1EBC55A5AAF402D6CECA
4A60E4285ED8D0D826073E37CF15E878212BA4B4823E482FC5A3ED5B34167108
CAA90BD20054D93090385F7C313B4F646D153B044448355F808ADBE045E6CE6D
9398755417A2C05CED17783D44B6CC9BC9A52DE43A2AA173260B8DB916B24429
FA3F773B665ADFF0135A65ACB5311765991CFBC5B566C25A47C770E62C69C131
FF3870C42B68B10C48B081F868EDD3BF6DDE186C3374415F03766156316B87B6
510D103B7F02C07B858697BB50311E352962F28E1788F10FF86D3D7B07DD66C7
17D9F02BA4C1F8B3B06D26691784307257BA246EDC7D49FC9547EA6A83D9A5AB
67AEE5C82C9F43A749101509FEB31E38C10077F1BAFD0927A042BE0A650D81D9
F7079793D6FDBFDDDC1EA9AE904723DA923F93BEBF07575429B6988C81065A68
69DD7CF06FDE4ADA28877B6B867613D53FD6CF230F4B05040F4F5C26FA00A1ED
4CF20363A4562F836EC514D418E4AD8FCDFA9E6A3552760C1998BB54FE1DE1EC
B51495B5694756FA482F221D218FE10A5CD04F1526CCE72033B37FA3FCA5870A
D906BE1592DF2A0F0637A4C3B5654BF89A433ABA6D60BA983E4E48A00B80E319
2A6F6CA3F2BA6C83B7AD057D6625DEE711DCCE91220073F04C8C9580E80EB669
D15D102C6F1E91852B21C7314C82DF1C485E88ABE925626D5E3B817A7F95585F
B0C7689035DEAF2D7990EE03BB39B33084765B5705D626969F93766DFA5903F4
6F9DCA917103D1E7AF7BE940A2AB03AAB7EA0EBDA87F4F8C294251EC8C062D97
913B72A2160AC962FD0EAFA1D1A5A4399F04D981CCCB1CF52084A223E4D90C50
28FEA9E38BD7C7E5685138A0638A0E6168591BD979D642FD47D7677CAD5B82B4
548BCFED0352C9833A144F697E1407791DE270911E25370499A6960806512FE7
91EB65AE23598A51E2CDF7714D94E9AEB84C15CCEA5FE4C0CF761E921D7D2992
EB24625547D3E4F5ED79EEDD6FD3B6613D855D5E17D6020D27DC30DE4AE17BE3
301FB1AB1AE471287800936B812CBED8EC48553DEA2C2777329340EC29A5F405
76CC6C8C42D4FEC6238DFFFCCF9A00A98CFA3D639BE773DE73456A96D773C171
033A07E9A06D683510CEA1CD89A67BCA5F06C892F562133F4EDB0BC61B5534D7
D828A053B63A3FD4CB6FA71C399378863E3AC6FD31927C8FBE090DFFAEFF6087
784EB69D9B51EBA4C0622D2B0E865D981FD7B89F58D91FF6AC8C55C505313C29
39F1ADE1387A2356B3F01F8E512AD2109A15738DC44CF8AF22B8527FE2018375
0A4AF8B7010F02A29F869036F6A60DCAF84CE48369EEB6C579972F75B629363C
3E43ACE7B9120671E3A69B79FF2B6B897767698D760BB7ED2B048B606BDAD389
4191F3CA87AF46FC7289A397D8F200257929FC53E8DC8FC0B0958C70B635CDE8
2FA14BBA24C29DA3061AD5EDE7C910F7D001F82EBFBE58CFD966284EA156D467
EE3C32114DA6F3F143C053205C11168AC7211F81404A39FDB273B64ED685BB2F
05E6532BB8473590D509B25853AB0F25FCA6BB860E709684EA67590DBE8C7F28
0053479A3A8234D93B303EDBBE9C97735C2FE3F3DF3E31CFD72807F188592F8A
5EF5466B2BA9F127A42165F6181C51E6D4A7866CE6D6859D76915E1A2D9CBF8A
D6AFA2FB11B65A74801338C3667F16965C64DBBB14CFE9AE1E7156A6C442E22A
4E201378365E975E3E94ED3102D6E7F2C71EA89A043634B0EA017FC2185C9570
C06B0B03BF6E3C9CBDAD9C3423FC3B86D76BB75DCB34FEC581E589FDC75EBCE0
423D639067B9B54D52DF90B5E1620D38BBFDDD39ACBDC6697B163D4C31E49E0A
41CAFCB817E730DF94499B1101995D05130B5927A83C75F5963936A8125AC144
3D8FF1D91F830CC3ECB6EF7736742F09CF88CF2EC59D7CC6C8C793995377493D
077D7D1B091410DB6F9DEF0310F0E070748914B9EB62FAD8E07F4FD83CF163DD
6412B70A65C8A18456CE3CD1E1D48A557EDAE801E345E7CBA12017897EACD1FB
64C1F829392A430C1D698FB919EFEB0B16C2B2424F664480018DAA9E22D952B0
56E8A92F9531A9E80120579A2560FDD25F5477D402EF61D30AF8E103F301AD9F
F8FFCF4B8DD9CE727EBD18017AEAB0914C672E6EA73115DB196FE6B74E4738DA
2A23B25D4A58A31C67713F66C5E2B9D9B675D72610DFB87969A037CA8D51926D
21195CF23FB200B0664D5AEA8D89EF130B494EC4512911BFA31036FA4646618B
9D447E78B6652FE4E0A52FA73C3C45F0B5AC67ADD570EF1C645DD0095A7B7B0F
FFEB502F0869C5DACD2F4A601ACBBB4A858A11E0DAF5B83F2A10074378289F7C
5BEBC3946CB12A21794C4343BE3A12E486B6E17842A27F1495974C0FF0D79CC6
8F318914A016AE3095C2589A148F7A4C75A09A72E2731335EED5ED4D7FC38503
2CD433C44B23711DC1B5F09D76BE507EFF9B976804BE6356EAD942E26E9DE145
27DC93D613BC9E9ABD8472711B292144BE5C82591B42C0134240440340F1876A
DB1B3DA0BA829A39037E9D572287D6F1F0AE8519BD8E30350BCF497E2713430B
69F314F4E761FC7F1C3CB5518597BC7E5D940928D79AE4B4848D37DF5F92B862
E81613F7A5C538B526E62CE042622941676494DB3E6E527CC9059550BE93FE9B
DA9913A92996BE18B84BDE075CE812632F1677B2C5C2818594C46127A20968B7
5DF3527BF24E351D9624F535E6986BFD7268FF1F401C2D06DDC140A38D3C6457
0B71C4B6FFD604558D9FA12EFCCC4E253EB6C6C082E17ACFC29D2B95E98D32C9
76F944813F4C9E22446A184E4055105E5F5412574F9C51ABD8808F5E8666A2CE
8BF08E5BC37A6C14DCE265FB34AF4C97E7250635439764C95C9A28841FCFCF27
9EDC74DFC887E0AA88D84D3A6457369A57F0B9ECE37C79DEF7342F870581D959
05FB83958C19FE475DCA7075938672E207A6FB63DF0E62765CB57ECA2162BD29
F0E926A1042B12A8CFE2155952FFB9465A27C53F34A85E61101CDDB04BC0A174
255620B5446CA6F624AE65D9131400070A2F4E5C2B499B77511E87CCCC406FAD
D446A65D51B72CAE23508BAF9A5D8FA33D6E038E6B973C8EC5D7B86966B90036
6ADEDE3817E5D0B8A998CD76C1FC0D313EA02E4D03794C4510726B79A94137E9
A5C3084E9B85C39B259316C8CCDA57E075C9CB6B927F3F77333AFCC838FA3269
233B7E735477BD3A2A4CD3AF4410331B1DE8B356EC609961DC9A0978B33CC284
27A451103E26FEEA22CD6D7EAC386165819C19C75470FB635CB7271D8DB97B93
0E0A221BEE8B2CD455AF9B5F2A6343E45D28AC61FE520F60BC12355C3872CD09
2F77FE06EDC4E1678AB1B0D7102CFA11FECE107BBD8ADE967101D476F631946F
56525C582972D906C53B7C1E8B3396356937FB45AB1424C836B9AB13BE787649
205D82C393702AD94A357AEEBFF1872B316A3EA2DB074B640204318F17BD4FB1
3C4BFD81EEE419B13AC426703287FF88E9BF02623C80D05B61C2C2B9F21321D1
C12663A37AADDE64DCC93180187805BB6334A5A1D18ACFFC9EAFA00CF59884F1
4DEE8CE669C5D30DC3F1DF0BD66D8B3387C1F7A1B3A3B2733F4EDA3C0F5F068A
CBEBDCA9A7B5A9347502B41360FC4CB9654B4588D07663239EFF3564C6AF0AB9
AA87644636115B18AA7978A12214B7177B2F230922C8C2BE4693BE484069C92E
942696B50AC00FCBE634517D4C7214E2BEDFE7B9965171FF22F317ED67CC3BFE
10B6C23F1C7ACA39A6117CE4DB91E197AE348133ECC523548E1BED287E8F47E7
FE27ACC12DD93E91E3F828F93C86FA9BF1093DE1422A1AF70F0235D303D1DDF5
FAAE5666BE3BDB48DE31C5AB6BCFA7D35816E582D15D814D3A2290D8D8FA2CE5
E0A680665E56C44C850F299E21B21683C3440216DB59BEFFAA2D175DB0E21CD3
5701FACFF8062231BA17096A0BA9241E0F592D2B01205BD03FE62CBF31A75BF3
A7D388FDDF319A50831E6581387B6248EEAE9251D149F5D5886FEE04F2218018
AD4AF9F1738127F0467EA0DAC7E4DC2CEB9C4DC8B6FE484CE582EB7FB04C84F1
87E9DB879617A22F788B1D3F388BA915195589A69FC77F321FB7E7AEAA45B2F5
6D92D0956BF321AD81447CDD31F8460AF16C5AB0833A6927E30E55809DF99785
FB079EFD71479386F81AAB16E0A05360A0E1EF26694FC2D99E7A2841CF125BB1
E885764A896F14D89B949E1FEE97948A75F47F2B6D7C2119FBB5A160893E46AB
44B55898A1DE85F8AE13A213F3197309DAD0349A965E428194137AD227787AF4
BE2550D66F76F6E5E4D192A32329BA77A3F888F990BAD4D1810A9046288D9C33
E401668E905DE32F9848F9A42DF41AC56CFDED584726806D73996575A8D085F1
4DE63891EEB88FBC9E57392327D69776C96B0EC02B042F79E7688002FD01D97B
F158A6769EF7D58D4F8CBC00199B1E265B3DC015029A4189E4F84B2C05A17DCD
8BED5A8ADC08494E5BA8B57CE52275886FB5A3223C13A2AD866D6929DD1AE7FD
56602E3A66D0F5E593DE0214F494601676C7FDC8A9D9A6295C6A0D3246A04C0D
5B82E7120C5D5FB12324B305FA3F70FCF369BAFAA2B0258CCBEF74FA1B66BFE2
94E058F3B1FB5B85FBECA5F5F22A250609FD5AB0DE238B001B405B496D08297E
1A5E6D1FF41C00075B1FED387D98CF7EB11374C97F29D73285F5E959095F3F1E
B987A1E12B29BDA835810D80629B684CC6AFB1849A2EDDE01937115DAE5CF989
860E2D71C85A99A49F983C4DE0EE0E8B2B10DC9C062E803F32416CB2AAB7EDDF
40D06FDD1E86BC855FB26CF97DD161A2AA4A30518F8C81E0D820450152A60F77
4CE8726E3AA9995AA37425B57B89C69D11CA9B316ED8E2F4931AEF536E26910E
B20E4679DB25E9F6724A45A03C677977F0D43D7E84524A6144F46B916F11C683
C722C6CA7038F7D23233D4EA69F64F194000D277E8F8383AD1BDD801527E43A6
7437F81A60EEE33E1150A0FF454A41AD2F24D7331FB56520C15403904AD426E8
849C3EF4EED55190F15B7722380DE52F7B9A1B6EB323B1CB6A9E1995259923B9
96D528A128B0598F6598EBCCC8663DA565DA26F8D27A46C3059A2B09811BA35F
EA5AF6530935929024A822946BF8F810235FFA7904418684810F1BCA850851E0
7C23ADAFCCEBB1385530B27180661A59429AB9CDE3633FD159C855C4CC46FA71
B56A2DA46A21D10F5C12C7EC7C5D2BFCE80CD032352797AECEDD7A89FD4C12E0
7039E7C3EBE3F4B4A505585651BF8D58919125099BDEA6E99ED3723A4250FDA6
B1E8D9FC82C1230820B6FD5B4ACCF45BBCC7635F252EE30A4E882012357D70DD
8B1B98610D1C8A6A0D0C990B72B65B1E03276B4CC10D5E103B563BFF48BE11CB
2C57CD4740BD31A9BDA29B8D036473E7C5FF6EB74EE42A3597A434CDF2A2ACCA
E877C3B56CB5A29F919EDF282690D281AF0BC516AE5D6CC4E176544A47869A64
E63E5B5DD35415BF8CDC08CAAB216004EF466C70EA68992B9B09F5A26B783AFA
95962E9438FC3B10239FC8BE780D379FDC563AD2B33F99BDF99BA0ECFBDAE376
C63F1722EA859FC5862ABBC985191135F0156722F0BF1DFACDE374137BAB3973
5095A31BBF3C1D0D021B9AFFDB32CBB07EB57E256379A863677DCE24A14BFC52
E9210C8A692104B599DE2304679D9680B7C482A7999611BB127FC8E371D8DE36
946FBFC4D184CB3471F958F98B5D411933157B073681D7BAC7CFBD831106C2C1
95D22E11BFFA2ECB517350481FF3126BAE5309893814BA28263EB863D5E18D63
9C4E661EA30107B2945D98E8E9B81457552073B2660866B4559655442B7A3C1B
CA84112F5D3A5FDFDEA1CF32F06FFD23F59E34B70AC5356A5385360A02C32453
A9656372F5BCC3C7F61E10B7E4C9D479CDECAA0F42E4855558994E4A6F5A3505
8E489C108B343768673F7BCAC44F49D4602BB869D5A85CE51EDC81601C6FCD65
02736CB01234AC83DF6D4E53F99153122815AEF3FF77045B874F326BB19FEE02
D4F50615AC4FF3F906E9D890A827E5C8BCF7322BAE688DFD73F7115169B32AB8
B6C05B23F0349C8020A4D71BE0F7AACCB3BE5EF63B1C4E79B49C936C79100E70
45B930267F0EEA9BE820E13291132AEACAC7E038A136F8256B7DCCA0D7503A07
50027042AE2C734F5B6C40B5B910E41AF4F90FD3ABD529B568E9ADFB4FAEAB73
502F8DBA3FA0FC5BB976307B4CEAF35B0508806DF26CF6367091BD71D7EA1069
F48D987D3E76BC173355586A72FD4AB3216DF6AC300A5A3A1923266C7B5E846A
9323AAE8F1834B3041FC1EDCE77F6DF36356E2EE9DC73A338B32BF706131040C
53EBE92E3F0BA029A50AC6D949E0409B26A9B65B2EEA2F2C8E0BD0ABCD3F02DB
45E13804EF0B1339CFEAED6935F88625620CE2D7C64250A8F2D0FC709C65A722
2BCA351A5EC76576A65D53650228C5A1941E4FB69EC10B0CCD7C0C2478EB2FEE
A0C69754128BF84F64A7462EFA11B131B70FD5509D40C202ACF1153F63FD5F4B
6E1C1E7E7CD26F0A86E6A01B6D315271D10F2CE31F27B753DEDB0BBB7D3F0376
8BAF8691733BF48668329BCDEA1ACC4486C4FEE17290D7535F0BAD8499A55A48
43D934A0CC5F403CB09F7FA95067B190C34754723F155E57DAC191CEB89A2AE4
729FFBD6D2B380BB2188E57208A9DA1A144B6457B085F2B9EC116092166C9076
6D532C726F959C04D04EC6CCC6D5C4515070E4EB6AD122BCF08D138C28E8014A
70AE3D5ED7C5E204E06DCB2A6286614F888EB2B5E2F8CD8F21B4A6E6FCABA356
F58CAA475EF40EC09260152108652CB1D729F35FA2851C69A782632F386BF734
2CD03BC49A6759C877321D70FBC7D5E037D6755257F03DF774EBF4D0C46F9C2D
CC30A54D6985AE62A23805D386A7BB172CCCED52C1433629AE2A3E934BF34CEB
512EAB95AC899D7B774B507859A6D73161FA572C21579BA36AC6ECDC5F4BF936
EC6E3053A312FF5FB68A533C51765E9FD912FEC68596FDC4B7A9919595AEDF38
FA5B9FE56253EB0B71E4888DC2E5A2A507AFA9BA6B29F05004B5D058DAB8192E
E7F657BD8752A46D2BA3872E5776D61D73663F18B1AFD0A10D08E2D02A34ED53
DC8C6B05FC06539D0A5D0701388EFD932299FF3B3CC39D845E7232F0D2832C3F
07A2A21D43EBD151E42CD43B910C9CC062DE49266623AF9AB4BB367E93168098
A66A0CF1DBB35482658BB9D32B03BE83E191E4E2BEF7EA0F868E0B1E18FA0B62
9E8327A68EA20601AC9998E6BA65DBA894F62D4F977DFF168ADAE8A1716BCFBF
45A8A4942074E5E6B2DE3B1299F0A1E6B43480FB5D3F521BEA23FE2041BE9D41
C128CE151FFF0B0DE1AAB7CFFDFF105F576D9C446DD56ECE6A77E978D300123C
A79497C5E15BEA9EE5451A3866C8C9B23CADDCE73E36D598D754491FE44AC93C
1DFC70987A57EC73E5A31614622D3573239A62A2B336E34A024D9BFF67F30FA9
6885B0B51EE072E6B4035A4601B3B5414A1F5322B5CC270B2FDD59F18B615262
DA5BB51608D3FEC214D708427AAD540B306955B576A3251C4C28D717094D5FE9
D2C1A9E5FBEE96D01907421E7154C4781137D97A843A89B07AAF93860BC5D231
3EB7BB2BE00044AD3A3730393DDFF6FDD72ABB2697935EA2E3A60313010889FE
5D39C41DADB5151507CAE41FE79A3C4A77551CEED3B6385EB04FFB52696436B7
118F7E76F7C27BA8B531C91470702D6F8B442492E7A89D2DF0204E657D0E44FC
A5F79E573270FED1ACEA5B74B3C146C6C2BAE17F65580F59F9FC89ED73E8FD18
4FDAEE2BB532FE1B8820E10955064A344F7EEDD748D490B29094B54EC5A06F55
BF3A402D95EC09BEB4A9E555C64C56F06FA90448A889A7A71A2AF8761F86D454
6A7959258048D63837F887A41EA0D1CF255793E8AB02E3841B6EC83AFCFCF697
DCC8808A931CB62997E29B68791D7D400E45E873E7398025B179511840510271
C3A7D59EEC497A91E603F12241E2EB52B5EE286D3582FA02F6B302BFE7FBD7A2
69F9B3891E132674AD22DEA377501CE19E7C899372FC2A3C7D686FD5C1D20B5F
3B314B92117849F76BE7CC8B80947EB5D50763D57C1CAA5CFD9004575AA9F1AB
91191B962D60827CB90CCB8A2C847DBD3E2E9A7EE41620E83C8ED3A42E2E4A1C
980FE488F8D49D3A4BB2B27C838A1EE984064392A176DA59B0240FC0E7C02D0B
F476D768D438A2C68A9BF837A3A2F5C501AF422A313B47DCEC7A019705E55FCC
2C71E553FA3B4CE88FE8F9CB823F098D47ADAB3758345FA2F4C860EF57F9251F
A9B45F45C36304659958B0E6D7ABD94719F604EA68B1108EBB5BEBC3EF465BDA
9D0FB9E81D6D5E001B17A8D845ECC703FF0851D4A534ABC51DADB5151507CAE4
1FE79A3C4A77551CEED3B638589A33BCAFAAC257552502022032CD79B46A5752
527813E0B628606711423149D9F393F5EC7F62C273D4A01D4C77142E2E61CCC0
992B66DA71D8BE22836E6DE06A56CF47B052C16E049D2E6645239263D0B6E641
91746616E9AA170039676C1A750B344A8C76A8180FEB3D95184DEC44CF89D97A
AAF2CB125E23EC32C35C32738193419BC1FFA4DA23B7F26E913A517FCB13AC0D
28DC6169B2C81A8E5D6D6CC751F6907C5BA441D11AE6FE7C142F20B640C3FA02
D077423555A6DDEB24E05E34A03C4B707C641A5712EC788CAAD96571272A3B9C
8590F62933B22EC8CD48D81CC019C9B4E41A80867AFEACF79771B4E47D07EA87
335F94152A9A489FB0D390A3715ABFC0A841256CB0CF6C3BB7835B7879610B1F
5C8F9D5D01A2D4CC7AC292050E48BE6E8E6E1C6B6C5C5A926D3F56E6CF780B37
CE39F605793D904FA4650A8B848EF465FE7C2844BF832E4D54880BAF264A4431
88410848EAD6C66F4FBC0FDEEF00257025305004426EFCAF69D9CB20AE4159CC
FE773D9A5EF6627DBC1F119BA6B0423053547C266FCC8764025ABD321F254180
74615F742439B5271AFCF83EA09EC1FED6A31E8789F3A05B1B2900D158E0301C
9311BBCE073BADBC77B49CE7823D3D20DD9A1645631CA225811B174959C0DCBC
8B95F1B879C5596D803074D86EFA1D7CCD206638F69FFC139BB72D67E3FD7EFC
36B16D14D500520213CC900BEE740B4A1087A9B8899F9B84DC89457496897468
652B863C1EC734645208E04ED65CA0335AEE2E38537138BB6A9C5FFF29E0E871
6C4AE3D51108E3306E02C345F4B464F05F1EAB03FD514AC441B7F6830D6771F1
50299030DC7F996D7AE54F0F4C538F6BD473E34EF116BDA16A8764526105E289
EA0FFD8D4619BE05CF8B91285D727F6A3F7C7EBE4EFA3EB05FF301516E31813A
FCA02E3EBCF5E66E88C89673AAEE3315C5938A38480A193974B9E2A5A10F521B
8D22E62A7B38775DDAFF6F38DA8C0F8DB109278BCECF4B659DBABB4AC20EB75E
7EF41A4E0EE09B0C813CAC93DCFD9043706B83ABFD905E60E741906AD4E4D1FF
377A5AD37C15A6173CCBB15CFD2FD663F2115D22D820DD846E4D23028826312F
07F715DB71434B3BA3A9D81A503AA8244A272C16CAEF6B64CDC70B822AA2EB3D
4641288A4EAFBB2D88DBC81C63A31172C84E457193099D13B81C3904DF76D09C
575A27CD28508B545FAE585BA475D84C286D85B6CDF0F348A9853F0BE3BC2DAA
40664679E4B884C970AEFA2A2075A1AB8C2DD0219E09B078B1921F6DE29913D2
B6F1AE4F6DB85E249AC033AD1BAF3ADE6EF9B4205BC43BA3CDA488E512ED42BE
CDEF9AFEE0ACD9511EAF44E12169115BF4A08173182D0595AC55C518FC964BA4
D7C1B2522A37B14D7743D9719863BC02D2BA97369F2AB531944E132484C3F2C2
638F48B000B92453683899ECE7EC3DDFF5B0B8CCBF3D9CFB036437B07E0D6E59
1ABD90B6D1A3EC389BD83EE4E880C0CD87768D1F9717B0EA1B5C3769FCCA0655
37BC8AB78BB1603145A82BD558AACBE2337E87EEA5DC720C53E8E1D57C7E9F73
E4CCD51A57D7682998D349D4B7BF50355A7E1CDB854398BA98AFAEC951690051
A2662DBE191ECE5DB5D606A31F7EEDF4F0298C9AE254619CFD825A5099EFD605
48FC8B0996B192D9CEEE79A7012A045FF72AC565FDF6AD3C94DEA662B7342E7D
348563FFF29A2F5A50476A7C251489C09552AD1AE303195268BE490C9E134A2E
66800B98949BD58AC4700364A93844E9033252BC14B5F83F74EAFFABC289CDE6
55EC5D586D483DA69EA79ED4DCA975DC5053D8E9AFB6600B7E2D72C3661E5174
CD3FEDDEAA415F87B04DFBED3D19371A766262D2B4C5499E8D9049B9D26877A3
9D29FF6AACDD72D4849AB165A75AC6D3B5746051A0E8E152C99FF20214153556
46FBB81B76FFBE7180B2E3DFE45A76D10B7C0888F4FED8520782EC823434BFCF
E218A4B5FF0264F1EC9818FC85E81ABB8EDF5FEBD36C6E600300261D453EF379
4BEF67FC952E3DA45A24ACE4A7CCE31AAE1ED295693AD4BAFE5F2A333275F645
513FB6547F10E5C09F9E499346B2E5DAB34846294C55F890EC1805347D10189D
DBEFFC14D254390B1EA301EE8BF7F102D69F47EE35F889A7107E9B61B6636640
6AE89584C3B69E74BD5CA1B86671E256B0594DDB0243D7AC9C4F6CD5621A494E
A63AB3321C9FE022DAD137F87752CA18F8147E983175FA450580110EA6ECF823
94DF0196EA4BCB09F019123AB92002863D00F93C2A1BF319283A82E3B86F6FA5
38D46C3153553EBCBD4F0A6853DB8998F9CBE0472F641CF6660A76C929E56E27
CB8E7EF2198C005568E9DB85B2A0D87AA2DC263930567D4882E19392B15602C0
9DB839E1DEFF4DB50714EC8C5E1CC36E692F4624D84D70949442CA8BB93B63EE
B4D2A563363E4B3BBB6F116B9FB10A83A8AFFFCC65011D8AC3D8590697204AE4
DCF7A698728B485BE2CFB3AF82BBD358B4A51C150212AB6E38EF1869883173A8
BA72A2EB19EC63DE800C385269992EBD01C7489EF0A956E57D417B30FC6DECAD
B54BDAD2FD90E92171E48432BBAB90844F20D9F2F84A03D253339BB92D5ED467
F73C6EEE63E9D9844A7ACE5D215CB7624D7F9EE6AE69D17DC64B5313BFD46605
74D12B0EADD3B83B69E56DDA47189AB457D9568950DC3E2369571FD9345A2A38
EABCEF94344ACE8D6A0F557143AEE3EE3CAE1720529901D43D8E2B08A04783C5
E1AB77A3E641BFCD775056724CD2F37B177FD24EC26F0986C5350312E626056F
033E1F7947C49168E23A66FDA1F9EDE6A6FCC1F86A854753EEE73AD08E20791C
DD3CF827BA903093EB249DA0444E8DC80DEB9A7AD2B328153B21B81883962192
F88D17AE5BAE847C7D3D93177DBCAB9C0F48855D713098373613C13DF3E50EED
85DAD3A70626B5C9CB7934B5B56A4388BCE1FD1B1BF12FB534F7899E4912EFE1
B93D0896E8206E4D672D1306407D69F633E5C7B79CE97EFA309FFCB230D7AF6A
BF63C7B805C438ADBE8AE3408EBB6E80703CCAAF77B9BF050E361D4276B87A5C
192775C12C98D7373D11EEA2A32700D13B25BC43FCCBC12AD7B5C7A0044000DE
38DA7BD7171FDE19B2407F893D523EB7855DE7870F21C9E55F66AA6BCF8680F5
ECC44BAEB2FC4355C3C673C48B92BAC90417337835E3C30AE76637C389CC60AA
203E215E10BD1697B62E199B50193DDCA689F32A0C649218FAF36BF07045D62B
DAC3AB80DB4844F2C222166D0742E87C841EA0267D10E5959961893ED52545F8
590AB7076AE4634FE43454088DC901B5BFDE965C77D1C7FD95EE5560BD521390
738A9FCBFE2EEDCFB12B29EC04C27EB562B2CFCC6C8E30F658A9095000B8CFDA
044A58E8311964CE351D3EA13DB52AC6F6A1C3F8D5518B4A76422353ED2E01FF
4C3FF4C098F6FCA427D2A45364E141CA1F6A10254698BE7BE357F70AA574B925
801791464E8BEDA3DF529A995E2CE2872E1D93AE15DCE2969EC8BED1A52548E2
9D4DF19FB9DC0BCF64B60BCC727F93BEA414A7D5A948AB04830EF077A8D788B2
24C1843392759942D0FAF6CDE696534896406A8A5234A8AC19BFD3526A985A4F
973A9A4A0FC3386F7AB0E8775B76CC3B6A17A8282DD75BBCA237533992790653
3FC039FEB875DE7C3E64A237BC0486514F6952862F207136E1E16B417F63ECF7
90C6D0A2E6E82E6840E51B38C4579FB95337449024E4E74EF084E7544D8A7615
BA1AF9A98DFF49EAD18D6206B834F81850B4CFD0A3C624629D39A58AD7DD891A
F4A025B0D90097AB1E6E22EE5A58C7B3B5A46A860FA2AF035F53152AE5C575C8
0EFD0638B2AE4201F8617D411C52FA6885CC06737104A9E1DF811157B2CC00DE
DE4BA2E2353FF96054A20928917BC496D6AA2AA99F2FD91BC4957C7C14E51C40
99C3807A01337FA4063B87047466804D6AADEF6CCDF7F981B9F838C1352A05CE
F380FE489886299F72F46A443A7BCFF3C4EADC91E9061F9EB6F8C21A258233FF
7A3843716F052D31C822DCDF6415E2E933F65C2B61402DBFC69A0ED01AC4044F
17B810E8E46BE9689B94498FB29F9175B8A1192C83A4E6EBC02E476647E85C41
B8ABCF3DEDEE81F75D8B5CEB205425442B328703A8A52B9766693B69183FE722
021FAD70D99E2FCCE6FA21989FFF245EACF240CD5E1806A89D6122B7F23C4C6B
1B4114B7DBA4107593EDBBEFF3B140B7CF51BD51B099045E6CDC0A6D3A73572D
79A8CBE198C9F63FFD1470AEB471B6F7D3E19A4F5D703731C17E595D0E697FEC
6C9A25B9D36DDEE53E5ACB468A187E2AED2D268CBAC815709315F4FFCE99C8E6
10006C5A8AAE834A0587D990024BBE82D18D696BB4EE1D90B03C9F7F760B51B9
8DEB04F310B380C115FE693E0480853038A548FEDEBF29C468F87092CB990D0A
BE379AB6DB9E9BDD1736D940CD1B21B70D70D64DE0BD6AE190912DAC612FCE22
4B6C00F8F4F6193AA083F55F8E9FF435AFF83A7BFEF9BEEC854EC912ABBC9B23
D76CA9F4490F24184C49EFAF6040A03F642F5DE3E5BEA87E004E59B9C81FC990
594B82C652B101F0BCAE19693B0E6836BA55FCDA27DAE5454C13464DF6FF5DD2
462E2F78997F935BD878EBA39E67135FB1D7FB781E8A03CC0C09C86486F508AE
91D36AB08E7214960AC4ED73CC634215356C09B7A353BCDD110424B4ADE9AF16
6C027BDABDB64F9D04CF52CD03FE62369EB7121FA612B45C1BFA1E78386C0FA6
BA73DBD43E42A5C77201D4CD352A8061D053A5C735EDC975CEC40A46F5AF536A
3AD35E6EC3EF6D2F02DC67AF67232A2371E702BCD6EB38C5CEAD5B792619D415
DB959C9342B69E88C4CA90273DF58E4C5280F4384C36369210356F2F45DBAEB9
56D150584668FF886DE617139DB857A21081C562D9F0AA8FA89C04C2D72BA3BA
4FF4C98E32739187FC2A33B8C788C1783824BEE2B44AD01A54E1EDD008F6571E
42C09E29E3E433826A1CA056B151C15F895B4F36A7FE2ACF23CCE06D780685B3
323E2DD2566059EC7D439760160B4CDD80C377EDDF0B5BA516162945532BF191
7D30FA36FAEE984CB3463C13D9EABCEB44E268F6001119114D85AF0220FE7224
356BAC54BF35E860CA6033985BA473BCE6340E547CD809431104F4350E6C314B
8C5823D50EB25F6836686FCA7FA515231DF1D2F9E525CDCF31D367788BBCDBAC
1D91ACDE75BCE8FA0D6E0A74481B0B3B58855ED145815548A7A6CBCAD57BFD4B
1B45120E71FFAED801E1D53B54A745A91337BD7AA9EE90D8D4DC60010FAFAC3D
4883D38487D7CF5798E180A227B25AD832EFEDF6A0E561A55EB4D91816EE4638
2D500E36FDAB4E7C409A50B1B1D3DC973936B95EAD05743F7FFFE271C524BFAB
9CA14E5D3A081C9F2499970591D6CAC5C20B0A7FB22E854CEFAB2D2D69D72721
65A2DBA497832252ABAA215BD82F571C029CCAA55AAECA012CF33CA66C8F36F2
FA45504690456BE632B6CD34C60F76DAD2A9275F19891F3A6D737B8BF4270510
F72F5AEEF441802D31F91BAA4072FE3EBBED915C4D917B10078BD9D051C13979
EA10862F81F2D90CB4C1EDC1D797C4BBA10AE2D0DDA4D02A93E1872F1609B40F
7E429BFB14CCD8AB68783D7D985D668A5CE794B6C22822F21126D1A560950461
466BCFF93A0707FFFDC9FBBBDE6554D9A9DFC04F87136850171E5B41E7DD83D3
D59EA77B3A92299D83EC9ABEDDF01279858047092A797CE85576080136803BEE
E09DC959D9AF53099764D47866D01B79498B726F514C07C11B940BC5B8689C5C
28F08DFA5533567BBEF823BFB38D3155D768EFEF55F443CE0AAE7F18785350D4
3E34C2DE3A105A3385B5E06B0E001DDC15502174A6A957ADDDFC0F5FA01B12C5
AF17A3CD3DA0068AD843CC05C0A85D42C588DA3F4547613AF06436DA56AC0D10
3075A8DAE170B7F76EBA752D2CBAD82694F93D3B2B289DFB2B76E8E835333697
3E996779BC59A4FFDEAE759D14EE113A678555D0844B26C39D492C4802196915
2E970AA81AB1E29E802C3868580F72F7016247A049AF60C860AA9D6EB4623E0C
84C47C3C5EE1CA4C5D430889227B7EB6BB38C9AF59940C0EE95D6DC288F12BD4
604256F121F2E7F1AC10B5242ACA6AFCA61FBBDF87CDC2BAF259D4D3D6D1F0B0
DD671C060D7FFA940D6E0B6A58103990FF8DB64F421492101A4DD8790A1CFD63
59EBFA520446D969037C204C62B702FEAF7AC8D9522A256D2C28A2CC54B4C09D
2682F3C1F411EEBCB81D831A1AE15E76B5C407390C52FAF60F110B32242F0D9C
C02F1BEDF422D2F0FE567DEE7A67B9E53025A46900655BDC88DA002B21AA3E30
E6F76BFFA69B14BBD009A0714BB81E34FCDA32C32FA1AD113BBABFC8030D1494
84F10E260D4857EFCA49D2D91E9BEB3E58397D1BA63CCB47D04840C0D51533FE
CD219A00AB28EF0C07F2DED67318D2C12541A5085C0BAB7675370DEBB933E74C
0BF6A1026F69EE335564C6270F663DBA32F263441C51E317A1C2B5AE75CFE1B8
85F4BF833CAA6D1FE6C72754BB22EAA39BE9FCE44AEA00BD79CCEBC5158726D5
D20002B64F4968AC911336D5ADAFF5A99806194F7A5844AF1521B07889DB58E7
9FC49C76BF2E1D92565B286FBC8AB4A6EE7B7305F744C7F2E345B7D26BCEF2C0
91ECB3E0D21CE8A85FA8E19CA858BDC785778462956BDAAEC17496B9296E7CE2
7729C40EB939BEDDED7AF55A8F4EEA28B543E2CA4E62F2D0A3FD773ECA
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Regular
%!PS-AdobeFont-1.0: LMRoman12-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Regular known{/LMRoman12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Regular)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMRoman12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-422 -280 1394 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ADA0D524C74E7162994153270875
9684A21A92E2A110C8FA542765DC1244DA4ED2FF03AB0E7836F187017A2AB59B
436136202ED2D5F38A061955643F519B56D5081FB38526C4091FB82642EB2AC2
17913FA5191E1482492797A09A2C4859DC92077AB96A24C759D2A12D8CF53A67
D39FAC370CA395D7947698CFE282BDAA265B8C66D319093A4B6A6B23D39B579B
02FDEBB0FAC4746D42B81AC988E14F5E16D364AFD1FE5E5BE79B95F649D0E302
3D515A32D736B13ED5A59461701BEE9BD6454D8EDC9F523F0F9ED8C2283958FF
E83175BCD63A78D5B5AA7A59598325B315F6EF8ED5C2903F0797F25BEE9627EA
B7293E929462468CEB3850E3F0F02C6D8BCB048CA7C08EFBDA6F2A43E03773DA
6CEEB9CA135749256D200AF2DA1AC7CC1F88D1F7E2FB7A3B317BD067B1136AAD
853BB4BDB4FF59678994E9E420712F1C1388E969C0C7AD3251B7DD9309CC2412
01ED1742C7CC55BA82454D4A8211FEEE54F750E858EA905059B59AB8153FDE73
21AE301103FF22B1C3AFEA3486B201D6E142180481F28189F1A55DEDDB2B8C99
284BD47214751BBA6318949FD9BF7FB4659ADE42F716AD523F9E49F08C8B6F5B
A43FECCC19D69391CDF7B54D6BEB90258567A4D3EED257CF64B722FF4A793FAA
07250123A6A86DA694CBF1F040B611B619BB7D3CBE2D58CF1223CBF5A0D79A81
7C10FB27867E46D5BA1B3EB266E09AC5FADBD0F80D95237A5F36541162C707EB
0EFCD7DBA0E962FD6C10C2E1556836669524A473393873D502CA659D99F404CA
7B3C6D001A60B17ED2B2AD4850EDCB990134F321F1FD6696F64BA101037918C9
F3EB2C616987CEAA46F6C052EB3FF6F2FB9A6F974915B82B6608CD85F75F0664
5644A5E3888713099F73E90FBC9681A6432D6944A68175A656D126AB96DEEC97
7DFB9A5ECCECE68B7C706A15EA93F5FA7800171D760667E1336DDDED349310D0
BB68B865F3E43C4275DFD82036752613F3FC722D561C0B5BA22C873A42C13AFF
73B7A9B8096208922179B7EDF55236F13203049ED2D3A304BEF0120285E9FBC3
921898A37465752B57535DF5054235CB5A713FDF779C161E40A8A8AD8074AABD
6A06EA11E40F1F4F4090C99D86095BE64A36FA8733362A8D4A2273879968020D
41EAA7F6C1A9B682B344B7DC94AAEDADFD1BD39385A57F9383AA235717AF84AF
BF5D808D32071618FA11E2F7907B9626CA16609BFEE67DB56CFE2E2B90BED39B
54D866320877A767FE000D8A3386EB1AEB2D99809C71C946EB77ED556CD01675
A5D45FC8BD04EAF80C756386291444CFC1D7F12BB4B1304696B2080A14F56ED1
959BD60C7F7F5BFAF8497205D4BD589967F17FBA10C2EF19C1679C5AACA4F9EE
B15E13977CA81B5026C7E1EF4FDDFF62E82B16CBE3D401AAFA4D973976EF232F
76C9D0C0793684D68FE95129C326682238CE9807B35B2C2C0C32F4122724C159
AA1C41DD94D0808809572A0A32125FA4D78B525B256291CA389F839797A13591
6197A48D453611484DA293AAA6B62F5ECBC9D32FD482C74A5387629E03895C5B
946117AA34217BC77B1E075A4BB99145EA55CFD1D12CB1D2E72636AE538232C1
3966FC6E07843E4FC7A8FB27BFB4FF67CD278CA322575D7590D77B4E03E63F7A
848E639AEA6DDEF55107E8C5B9DFFAA47CB3CB5A614B77D0112527C9AD97FDAE
5BC457971A70DB3421293E16959B64702BA858C1217A8B3B836A947462E0B59B
37C8CBC667F0052E653D33F067997638BDCAED6DF3A8F1793F71E79A58BEF6EC
47F700C376341D757B09A3E31F6ABE9EB9021C1A6E311CBAB6DBBC8AECB140BD
DCACE9B1E80979B7487BA2CB786018E20A5E0355AA33D6FCEF382799F62A9A8F
F8262E8DE16E9245C61CF3FFE09AACEF315932D79117A513F6863D275B80A249
01CC70FA943FF9A9F5E8D5716835F17CE3FCD6FC5EF10AC25471C19ED3B2D164
93293F09EA311F49295310B0C1AF942753C52402014764CE7026803F091EBA60
AD877E9208260AE6AF24100E2B365BF89C5B679378A7F6A67087C57B5519A988
04735147BE66CDFF2481FE35DBEE9CAC7E77D79BA760EF4C53A3C983853DE8C5
FD3F25925955F36A3BFF3454FF7B226C0F001FCBC5484DCFA46DD8D89C69C886
AA0247C5EE233C9D7DCFAAEA1E34B8938673AA6D760A80C38EFAE41268C528B8
5A14387C3E29D017EC16BE7E6918E11E7AAE31ACB6E85DE4B2B15B93B7BACB79
AC25F37A4E4D1B370E59C78DC9EB4AE83D1CB6E4DF546FBC914A6FF52591CCD3
C464AA14A393F61610D617E196C9252A013C9532C303C68553C91CE83431F239
BE883C519B643E9EAE5142F698F4B47ACE43BFE59E3AA4C8B47CA18016F95C6A
212208CDE1635F4E5271224CC19B6D47261CEBA3DB1E042443B665E915991D93
2209B3F4C86C9763861923B2F335DE040A8C24E73A0DC3FFAD5A6A9249A29AE0
C70F71EA41B0A4A505263D6A6C70BA63EB2814D31DDE792AAD7AEB4FA346EC85
0781604DBDF2EB65869969F265341938B2C7D6B979342D93A9F5A23A3CE8A015
130A0FB817DE38359C63DB215965E218E892C350FCADB5F66EB82D0813EF551E
F65992B2E24B4FC8353951C0A335B53F68A8F8286A94521BEE28D7319ABCDFA4
A21B5DE536B34845B32A34ED5CA1F3D3EE2B04DC4CBE12FC99DA94FB2648B842
54D4FB6729B1CB7E86DB55FF4216E2F57A08E04B44BB36F27129E5E93EDC061D
348F162C03BEDCDF0521B9F31D29543DE2AD436B75778C0489533F3FD5742FC8
AAAA8A72683C54B45F81F355D9D19496D0F80470D6B289B760B6851EA1A9D31C
01577A0026C7929C87160EE0D8EBC305A07052BD82AF003A0EEBF1D6FF38B526
E2EA0A91866201E08792F03323228B622E30142E47BC752EB0EFF7BE8B688A36
22826EC83CC42DCE8356DB43399E6A6918A887A64B2EEE98060E47C0F4276DEC
FDCA976E967EED2CE2C439693E2FD2F2C26823FBE781CE97DF06830FC498BDB0
73AD2CA5EC36B4892379B00A5C8564FC9A915C85B66EEE33EA460AF6141D60E3
76B4E430431F049992647E2B744E48AFD33CF5041056A43F90D0E6A47C2521C1
058E8C66894928964B332A89C5DA71AFBF455E5A68FDD4DF74A8F1572F8168DD
E778337122FBBD1485F73B4EEC2651C3465557A320A0932B65C1FF77F68B89E2
BE7D6D975EEC017C4CC66C88F5BF25B0D84AF0E70ED77B0B380397149845CE59
EEEF6DDDC9E7C6127A68489B4B19F3D15F6C72AB8DD43CA69CE0AE0177D2B999
3DB6EDD24B6A4FBFAF7245D800115B62C9BD6E97A52671CF3F69A78D19654F75
3822663BE5461EE982F36B0027977D6B3738BA7EBE8FFE3928E471DD9502DF1F
41F853B486CBF6A62EC2D4975CE0BAE9D76A833969FB573201280B149CA91AD5
F57D3A240F66B12B30C0B8C3C25DE1E16BDBF5FFF3CD111CA5FCCCDC96631D0A
2B46A37E422D648CF65D7C1392E322DAD8CD3CB42B3FA767FC185F653F299CF0
85F2C3AD7BDE7C44FD3DA32993CCB41A92B29BEB26E60B05B105EBEB7A7476D8
31D2C0383F39344255823DB7D1D12E2435634CF69890D14A1FF76CD20F731C4D
09ED15BFCB1DC5530257DEDE728A19496AAF9D8BBCFB2DDF39DA7261CD6B1DE1
94DB09EA1744A0B6E3A9A1704083D27D5690B18843ECD420763B9E7F42912756
39C6DE6964F3607C90166D11C291D467B35592E73C61A2DC1F13CD09369054DC
5695355C6FE73DCD523582A4973275B64B3D8058783639676B4F8B47476E4098
ED693455F82F098F49FF487626BD1A4D4B3B7961171D67F8F6B26EBA8AB37B5C
35D075C41218D0E9CAFBC8078A26AB4F29F821A015135CD43127434DAB18D387
013C388D3840182F35ECB411DD16BEE85BA2BB40F538F55C11D50F882B739138
48C40C08476F761BDD8D791CF23DE48A9C407138837783A7A619EA936D0B6239
F72579B0E99370DA9C9AE14A6753DCA4A6667BB22C841A91A8AC118812C9BB04
9DCB608F8DC52CDD6C52BAD1A1502779B638DF933793E463238A36732C3ADACB
0EA238AB8B29F707E61583744893F2F2A1B0D13FDD0B2EEA663F57D3965694C0
DB35FBFC94B3118EE3B234AFF7BB6C64E01CBCDD5E4B65AA5ACFA2E8A0AD7187
9EFC5A05D11A6180606E79F42F69D722C98B8190EF4D2B88C75F5693C65BBBD1
02DC7A78F5FAD0B17EB23B52A549C48F7E37FD84714170CEFB37B0EED373D454
E11746C2F21BE512DE383DA77E7ABE6666DC5A8FDBF1AE8B44DEDD7C60F97CC9
CDE83E814C7DF4DFE150DB10E7E96BBA0C4F03A44E9C517EEA5EC90E50AF70AA
B831F5C39EBC50A961EE6CA0528232C3E4D77FE791437DE3FF6CE5BEB5DC4D75
4838B2415435E628A295E895B8019BAB90D7F314B4595C18B7A2BDCD5C7DA29A
5F37EF019F78CDF2F2C87A0430AEF9BF9DFCB9279A3AD2D7AA13FDD13235C6D1
08916318648507B20F4824440FC332666E5F5A99C9ACC79B6952D59C46B15862
07C5A1CF559D2ED72E787FC95B7327208EC71CFA493D49EC8A2A03707848E83F
D4D72FE9017FBACA70F73B3E3C1798A1A62A0A6F8E820ECB5FE4ACA6A493180E
0EE6F235FEA295910569FE6DD5995512562359CC821E85A52B0BE3DF46B4494D
36D844F53727F4B65D85450354F8EBCA79F4D0CFB5F9C44E2C537CC0AF4C48C1
99E9782A18BE396E177C09467EFAF26F3773067464CB460F7BC55596D411EE8F
7EB0EEC8BEC6A5578DE82101FCEE3FF27B48D9A2DF5D9A44532C11B9FD3383BF
9817F355C5BCCFF10D75DD3E43432CB3F9B7DF742C4CB44D5E0CD219175CB1D7
CEF09901038B7CF659434AA8FF66FC082DBE07AA13188633278729806A4273DE
38F3B2271C188A4F05BE2E674E3975B05D777D6B1B4021598DF9F767186C96E9
82428FE49289726FC97AB7CCA4EDCB4632D79E7008ED1E8A49229FD44F45CC0F
6CC85C210F761A23F1D55EDE81CD9A7D0EEDE17D01F0413547027923D8281A36
51C7D7C71639084E0D77352B7963829017D69513E47E2507EDD79BF25B181AD3
08D29C23074546BFD8EBF98D81D8D42F0A83A78BFEAD7F2B6BD949559B4159BE
4DABB07F7BB64332BA41E584EEA50F61F4C7048DA11D46D47B9C7A7991D1BAA8
A61764AC5EC0B4DC2BA432D7C8840351C3BD6136F0361F26BD3145C75C8379D8
55D11BAE4ED90966EEB16AC381F4F07039B6F9D7E2DE60C32D638BBDACC51CF2
2379D24C2A0780333AB3C830AD7671FED1E50936B0CE6E364B62411E6DF77D4A
4FB0A419828EB6E978C0D0DD1901FB57909918D07EA767FD3786B6EF38C81511
BA8FF4887F3EE4357A421575277CBB5D04B9536B65A0444036463015845D29DB
176899A157A76210B922C90F076D9ABF878A6EFD56BB4EE37CC61B32DC0FA9B0
00C5E6346C5D732DF9726C255825CD99C982B6A384D3544080599C565CAEA483
90E975E217AB457A7E88D94943A49C2FFA892D362C124A728BAAF587E6BBC957
E31B764127ECC5CD4D1718F1294B64643C9C5F76C2F9071A4BF4FFF2AFD7A0B0
6B3F26FB1370F107CB781E2093B59BD4F441A42C82FFC652D3C8175A258CB7D2
5BD0B8DB1CFBB22C420D71382C7E5041F3A4767522A75109FA64EEB0E9D4C99B
47FECCA8ADCC69EC71B9C6B07B09618AAC57F5BF63BD012080A4BD18DE1AB635
3B8AD44469296DD3034F3F0B29ABD81E289B58C0B3D0FE267EE0682D28DF70D3
9ABBC2B58D97BFFDD887380109216561C53A766AE5AEC33589A13F6DBEAFAF69
B753BC0DA94017AD3D196B6B5EC2D7F378B62DB43CA43C7C3935E61ACAE8325A
E85AE6F6FAE383D880E1C02E0D0450852399414A03D5792F68FBB9A796AD2042
FF89AC01843A0B408603C9832774032BB57DF31DAABB7DE1EBAE20A38DC804C2
324096CDBE4141F92DB575C1BB3E34E3C41615A138B1F2CD22830EEF021FA259
BEEDB8E53DF62FC14593FB1046F9D871047A8CAA9039893530D2DF976CFC21F0
29256B877E259B56DFFC008CCA4106A9AF77D72A0D2ED22E36A7A61269E381E2
82B42D22BEE539B252F78D43A89267D65820A5428CD87225C7FF28FDCD4FB898
A052A0B1A652BBD01337232B4F684D275FEF10E1C8DD91E5EEC0D1344D8C7579
4C620B2330FD5BB8F5BC59A60F63CB7979E480865BB73BDA7CF3C2FF259A91F1
0FE3D43BC2A56EF3A8EA79F1B0E73FD3C2544D30C23437CF9C3FF4D5AE878185
65EC5A3E0ACD13B07D4110C5EF052E53560BB180A86E2E35DC3C5A2C5527F1BF
2C13027301D54E815AD2E73DAEC24B4B105EAD1D89EE81F7216AAAB067235BE3
E0209BE7062DCA91768C2C9CB6EE2741F28F26C0F7C8D2A7C3478692CB7AC113
6868F4A544F0D25DEF0CF6A311A43A6A68E4D42CDD2484CF47C0FB3A68121F42
47262F0964034C5D6F1B058909F25BC43E76DA0DD6A25048044DE7028830360F
668CC7D1078DE9D6B13F6DECC9776D2B79AA362E40524F69A53E53B860719FF1
04040A8A9520A88021B70DB89EC4B9C642582DB27E6C1A558A25A5AEDDBEBDA6
B8EF328EA7E5E6F658D88D55F4B2AAE309BE3F1DF31CD64AD21688B2FA3BDF5E
36CFC58591E221A37996DF61AE7EAB1C061FE75A0149C4A665FBE0987834B08D
EA1708E447E0C557FAD8D550A1F61EDF75963AB9B4CE1751A5903126FD80BD49
3627782C24ED101F43DD8BCA175C6B403D486712D6978C27F2801FB8B5C631C9
A7FC4713C309364EC95DE29F6D6E1FE8C348E25D27050061080970262BA05655
0070633FDCE59227298931E2C7FC6ACCFCA617E5ADE3D0B721C751699D83EB17
EA42C0DB0FF95359E700BE2DC30F248D1BEFA38DFED27C1FA3BCF65F7C1BDAFF
8F1CB40CDD078B2B3129F158F45FE2634DAF1DF9B9024FC4784AB48D99878E0F
E8A60910519CDB5DF1C3843683898DE0071DEFE1678544FB0479468E29838365
121EAD77DB71CBA6FAE1532A43E79719F0A24AC76F9D709E512323E167B60813
64D2B04DAD50C73578F9434A856C060E479AA7E0A5C8B360F095DCF4545EBC55
591235C56A4CA40CB555A4BA1A2E7800E8EEF68112638EA01C20D5B131A84F69
448FAC91DBA6703107BE917307766C4D228197DF7A88AF558FE7EC3521DFF2A8
A577969134A4A117A55B66ADF5E0383E634C2BF5DD9E900D3D5BDE97BCEE1F3F
520881489B6514C107D7B3A613FDCC0FEA8683E7E4461F10B8C0035BB079C538
EE56D4542B303F279B2D44EEDC14642AB382A9CB0BC3FBF1AD71F8A583D9394E
B39CA2C53DE6D7F9BABA3201D6F240516D2A055394192D922641ADBEDE387552
3CDFFF0F3D85BA0F6B6966A3380F67C084786D192891C18FC29F0E6E954200DD
53397B02197B6FA86ABDCF97ACC1B898DC767A7D032690907A7C3E858F279C4F
87B0EF573AFFAAD562138907FAEE4F24AB5E19292866F8B534249B0DCBD13A15
1D0BD24017EFA1DED65711B579E0B60F46E594FF826AF3B50B742ADE8264DF57
FD7902194490A4C13B5746D10012B9E3E69B7C15C9C816B891F0C7786819BEC2
2CB6BECBCD412A7D6A0F93A57C39E2BF0A9AE90D064884A312E8BBC82EED3C03
9908D0061602996C15700D8D6933F03C778A1A810DCD869D660DC33865B7E7C2
5BB42378C426F710560A9BB88DBD9146F1A6FE3EAEDC5D74AD8C90A4B520F128
4E1B7C20D28ADCC3E4136F2A46028BD9FE5B4FE8DC01D8F622ECFE3FA7C32B54
A52789480E9B3F637DECE05A34BCFB971FB63CCEE8039BB288D0F8A31BE16971
49D7BACECF4481DC61CEAB7476A2E3950859502C26EBA06EF157958C9B8F0EB0
A4D3912F18E1EE5A527A6279287F0D8ED67194ABE9DB2D79DFBFDA159A30B8CD
C1E183BBCFC67B96DA98119498DC61FACE93EE82609060DA0654FBD8D9F763A6
A9B4BF512C52712BCA8EF3919FE465EB90910F9E7F0126C06BC86EA3DE3D0AE8
7CB8FEE9C459AEE958BF6F007ACC72EE8178CBB8BAB5A8BDB1E296511A4C23D8
4777A3F85E82C396D9E275519E3A119662496D3463E8E8787C4DCC3DF5328FD3
B6F92DC495B23EAB87B339CD87B09F18BB72913811C6CC58B95979BD72B7D5F0
6053643B0EBEEA272FC935217258C1A66144F836F8EC13A5A32A91CDD341E13F
852380E5F991DD3782849CD9E6D50ECC4420AD219033A8F5690A1170816ED400
EFD373D263AA62AC5F6B51795AA4B77B3AC6CC7EF5541D2082F8FE56F386DFD3
F1E773213C121D0DE5936E270E3B2DB28DB5013126B6F2C95FDFD6009C0F4646
78859A03070758C38629FC34410FA9D45D730A70DEAF9D6A80EA0E6F4883E39F
F433F53314A82FC36F1608E534EA5FFF06387DFD9185BD17E8FB9AE9FF0CEFC0
CF1861AFE3978C19893E4A1B722A021A2D42FCACF5A0B609037E464AB80316A4
4B5D596C6FD3C9E9716E36EA3E0AE6D94408A45E5F6B12921B80696C59AC7693
757530AF7AD352563063A1A6B764F66CE61D17FC1EFB1F1B7224B598AC585AFC
792F2F5F04FDB35F190D607CFDB94695D45D8582AE345AFD978844C404A5C3AB
15876924C0FABD33553FA7EF617725966A24C63CDE613C9A7B19080FA2612BBF
80F4BD0A764B5116B620857EB50E62666F6490FF10FB4F56081CA418774AB493
F39C9940DA4FE679C572B39D5B58CFD193DDE33072DD1BF681826878A3ECEA35
69593BA22BC17E73DEBD06E6A05E6128C28CABBD1ED4682AB15B4A1B7CA05420
72597E308794AD2EF7CF6103E545E449F08C2C5000002DEEC6CFDD778584CB75
68887A50A86ABDCF97ACC1B898DF889594F80315901081B98FF3AC06F5C24B6A
33DC92C67EBC6D67AE9DB3C7A1C3BDDF94CC4DB60700C22ECDF163D116E83C7C
6381716EA9FDA8379DAFA5415D1C2835262A25AFB8643C32ED9984DFAFACFC6F
8646D45002ACC3307377AEB5CB4BDFAE35CD5FDF30735C6B5EC0726878D4E217
CA9274C0CCE8BB6A78BD6506AFF9375FC96F88FDB8F030E4F58C7A87B0CF0D1A
2BEE1E1B87E4EBB5AE3AD87DBE975058D55E9ACAC0CD0FF4CB36653A968FE24D
F8D02B6E791150887F3881C8F1E9A68D3DFFC7312BAEA7C28C3D1D2FCFD09CB5
4D0476CD88D97E2B329ADC154BC93B4DC365CBC412E939E96C77254DD0AC0B0B
566039AC48376535AF88B9973536BB9572D0A1C4A30FA8FFD924DE79AA6C5EBE
B45D3AF27F9D0FF2EBCE5B0FE5ECF23DB0B3E8166FC56DDC9441DA766AE9D34F
34D5D7CB7B915338141E9AB69F495A99B90D08BB5BB166C8B6B34B2130577259
69D808B280BE2A969D2207BDDCAAB5FE55A802B9B3F1F20A28658292009CC125
AC401A0E0CD95B45FFEB9BE81630C673E4900ACD628933083F0AFB0DF405F902
7EC85A5770A26ABFCE9BB6F317D1927FDFCC5B04D404E9A2F1002341AC27750F
A1CF1A994E99B643BCC64FFD7AF7096F8D035234C4E034396ED7711A93C4117D
11408BBB2BC98689D002BEB5A6395AF413C98531ED8F51B5D7BC7DD0F437F1C1
A89AFCBF166B5E882C17D12750F78FA3820035607BDBC19C7399F90508F5CDA4
1A6F2347D9DB0CD7293EADDD2502C915E2823AEAE66A9452129BADF8C69BC5EC
029BCBA01A455AF29279C8A407120E72412526349C5B4D3FE5690BF4E925AB2C
BCCB08CE1DE39663F2876B13FFA5B6BDE7BC6408A9C827015FCAFA473DD79345
95BD999C3A31DA2377FC5BF663B8AA02587591419E8DD0EDE59C74B491A0F784
59504AF6C6B0D553E25AC6EAC013678CBB9CEAAA318B96629FE7707193371852
BDF637C110ECA86E6D7058108DB1991FA27901A44E7A65D278EFE0C676826DBF
C268474EAF244F0612DAA3B723539698E5C66F62352DBB8D67657E20A35FDEB0
7290E00DBC9A21367607761EDD4E519CC813AC9C2C4A766B5FADE47588232C18
47141D567C22A1B320395A5BA3ECEE5920BBAFFF7CBB603DE772DED3D1A86A99
BDFD258BC893B732CDE0BDC342A927FFF8372D4ADA9C28410C34B2DC68CB0F03
583DC0C2243A6156F14EDD4162EADEF7E262E32940DB52D0635323E8E33DDA85
688BA6FDDBAE549A9D225505734F3063FAF5573603F2CF5D8D85FE0396EBD46C
873AE8550882F546655238EF8B7D8E23AAF799C7BA511AFC4F99B3AAE7FDEED5
3AD929137BAAB8C78E9ECFDDDE7F42128EAE3004F4689475892AE0FD99044E1B
7AFA7834A95FE1307D53A8436601E90E1F02A00C87824C930916890A7F87C68F
DC7940E0E4E31C4352941A09AB5A195A605234B9D3F08D50F8EE03CE3BF8D4CF
F06C5B946E21D0F5A799CD011CFFE4CF0E9EF4C1D98BA42AA91660B2AE39F7BA
A5A9077FB4651EC4C067E081B140D7E73D6F6FD77EA8CF1DFDBBD7C3216135C4
02D85ECCE0C0F2EF00724E441EF6555F09A25CB68EBF9209FBB4EC171CCD22DC
B473B89712AE155E781B937D2E51D7841EDD63E43610FC378DD28227C44AE183
D00B3DE2DDCDF9DB098BC76CA1F2518CA7745256DC9C88264BA9CE0CB845C83C
0C234851D84D331E5A77B668EDFE028C9C539A042337B5562C6B2B65C63CCCC7
D4581D1D357E52311AF227B3E316B4294EAFF83339A0A4E5F1AA194B2FC8593D
E970B2C883FE6AE5EBF1D884149AFFDDCE09BFE4A66A2CD184A48F87D020DC37
2033DC4D0C8CF401034AA3CE894D5EC39AD71A9DE6DFCA062CCDA135B14F4F03
D05C46C9E1FD082E650741BC21A839388380A0A68237755C31FB2952DAD2A612
28CA8B31C99A60E233CBD430617614C2E1BA7A25A6887143E78DF650516F54C8
44F45395019E3010F7F36C594CFE3EDD5EB39D1F097CD046F873A55B596FD96E
083DFC32E5B188AC880AD2D33436B4117694575FD284FF8E0AF8A0ABC2E12A9F
E0CCBC968754048C01EC7E5C529AF8688CBB543C071DD5E9C4588AA1B9BECEB1
8D785FF63B4FC19AC486D7A3017AB7E3A91418DEE48399ACBA6A7224324C88FA
7CE61CF0123F7E32B5C5A66149BD897EF5F0DF3BEEA2DCD1474DEB0219B34350
059E316D8EE8C8572A5A86DB9CDA7969C04776392FADABC7A7D6B54FBCD86575
E5DB8EA194DA5864148884783FC1A3496813687BB411677D72291A86335C3A2B
793E55132B9C12CB0E0FC7B0BB2665D2F48BFE234A4920B74A9DC82D26722940
05425E913F25E79B7CE6E98897122200398D64538CB02847BC82CC947D4C7D77
1A71AC1645EEC33E4C8670E7BCCF3EF0088B45FC024C33BD3A870590B28E3223
FEF2289A0D0344E6E5627D613BA2540DA3F064922470D7E80D072F875AAA3FCA
CB05975018A1913FEDA16D1A8EF372801684D2C33543C1914FB0008BD647A448
A8CE29ECAF881590FA30DD9EA9420DFAA537CC1DD8B32132A2E7C1B93BF1A2C1
CFF3870927EC5439715BFD8F854843EA1D080677F64889D5A8F1D53CDA1FAE14
47375F693D07ED4187C7F90629FC8C48A4ED3EE42458BFF881F4ED4F4D5B8152
B9917A259EB971F5E3A02C8C888125B134548E3A8AD5390B54C9575A54AB01AF
9AE53F3EC95992C09FA5BFE86E6EF695B8E72F078752D950E2646B72C53DF5B5
83E2B3C57035D0019DD79D487A67EA1D9A22A508EEA8494F7BD45B8B99929E4C
E06A8B8F46297420FFE3156A9D060D4353F77BE2152CF6A50F4B45AFECD3F835
C80419B6AB69628F945022223CBF84A4FD63188C4075C00167E486248EF7364E
57AE76A3FD7CF9024F39CF0CB960C2C0874B3577A7BCC585BD959FF8D0CB69DC
465F32137D1B4A8F90B094626DC741B6D309D7273C28886CAEC6BAF51D01EB91
10233FBA27CD4F9D6D60195EAC4220B7FDF85DE8F0ED602C30835FD377E00C7D
BDBC3A2B5338B14C93F707D40CE31B9E4DAFECDD6DF4D93778E6972E6C807D7A
BFF3DD56845A44FFB46A93CEE3E8A0263882542F7F103D116B29734267EA7056
06D6F3B9C93208E064E0FD0679EC970C6AA826B223E36E496B79B2C7384BD18B
3817C4BCD5EB51FDD152F3E1D16BB5DEAEE0CD3290E421B6313DADDB0BF7B5FB
00F28D7848438AF0651F9C36506CDE26421A41C395FCDD345D4E041C4AE74B2E
CD28BA9E87A6E5819D82A412650F50E47FB25F865D3DEDE7CB7E62222C0F694B
66190041E8CDFD55B70A87E0F22F9EEC3DED5A34EE12C1D116DE33B3B49CF358
79D018730FD0603E01E0E099F55F083D07AF133BB1BC941AFDD9F34D5E09279D
4F07EA9E09ED3624794C0C045A9458C6C16660096A63EF3CB540265026F4B11B
57E008B91248D7C626A8861732A8DA2DDE3EEB17C167E15736CB60DB4FD58B0B
EE93215C7718C732AFF5B65BDC6D7C3D94FE9A898772B8AA2E62C8A2C7CBB362
ED6571E7BE314685A1B6CAC0DB1951D0A365FAFC66389761F5436DA107749746
B516F1FBDF8E3F4824B954594A1F97194B19FA8DADD2164721D3B47674AA8DE3
B033E16BE48F51A34D8ECD2F28993CD3C9E824474CB8755FDA5E1CD3C4B6EB90
A6AAE7853503E4B9B04395D5A6421A98D119D26D5F911E38E26D520570EA7B61
DABB252EF91EE58963B8AC0BDA1089A4E7E52977239F635F5CE9D418D6F164B5
5C7031555A45FE3CC697DF01C1F094DECCDD9F43AAB88640D0E9347EB9528F0F
DCC7AF4AD93658D416C86E3048847925F298F333F78E4E2174E4CA868698A7B0
FF83E348376C2354CE2989B4B60A5055543FB599415C638471E3F0B4BC379A90
25170795EBAA968FD2BC7F2F2489CB63B6620D6C81209220EFB97306A6B0B1DF
3BF3AF690E1AD2E1C89EBA0CE1D0DD6BE2E1A4D52E20ADB9D647DE600928D054
94123692F8E31D4C0B2BBAC3A56A1F64F2453376BFF10F3477E9261C6E4CABBD
E97CEB9F2CD07EB064FA0A0B3131634A43BE485CE2877000075D2B7ED4FF02B6
58FD8E3BAAC2B681D7A60153CE19AB3CE48BB89C85B9B0B310A56A244932BCD8
7E29AAA354ABBEA21243084ECD3E5E0E56F01DD65E1DECC56BAF8D3062CEF9A2
B89179C8EB2FC3991D7DBD228759702CC5B12BD66CF5E8CCDBACF1ED76853BE1
86DEB0299AD75457E41EABC03561CD9F89E3DB9DDD2FDE4C295151BE1F1C9C1A
407E38BAF13940C766F63AA2D015BF620BA53B1985060B8735BBAF50F536B240
10735A44F6756D5C26BCF0BBCD7D2CD30B6FDA9635256D0D2576675EA38B6FC5
00CE498549421A084AB8D22107B371CE5F66E985820F22180DD6936424E44D37
5A97F3A954AD92DEF352EF68138905DB1BA7858E3D3676B51CCB12AA5CCCE373
69E505C79C9D23A90FB17FF1C9476D3540344E95D73CEAB9383AB433359862DC
B30BA53A413B5E9945009B6E40332CC3499D69F12F4CCE1ABE416B7B9BE2DFFA
089DD72B814A8C332C88E38324BBD2D4042E32532C9A52EAE86EB7E2DC73C347
153B9B9135A79D2898CBF7F469E28C0C9CFEE354F75131FEC6BE350D2289231F
0CA333FFB476B8B54F5F249AD4F43487F61D3712FACEC12E3BB3BB9746927708
56D2C163DF16C10F38588227F33A2A8461351FE0B61DE543845126C26E1C0376
1D9DAC613554E56C56A2CB0297E6C99E604FFF638C9DB5F9E1FC4FF5CB87A377
ADBF202718B9E47B1DB784435B7ED88E1BC747926594AD9E1914F07F65928225
5057A4BD485C24787A7711638D5760569422E603172B7CC7BC55EFD69FD89200
DDB63772D73C36E0280F8ACDDBDE5CD4F20A799A7E118BA9C5900EE7B1E8CE89
A55C0BEFB530C075A459EDE009D49BDFFDAEB9856A46D359FB4E1D5D02E987DD
1260C67D7A9BFC8533FDC27952B08A5ADA04C825C6480BFC02FC45F2B1240C29
4133F7627AEFC03821B0D7693FE5C217E4514A2E5238B760ED6CFB322FABEAC3
C9F5E0A2217FFC8F1476909062CA39FF12A6C27A377BECEB44D3903FFD37E0BF
9115CE2FE02D8A3FA89D5E332E308D575A409EFBAAE5D96D65773EBE8D69A606
A70B3CC73BCCC0F2F81D7ACBBAA1B71056D018CA5CDFEA119F33BA7DF079DE07
E710DDE27D3A1BFE32AA1E53075BD2629A91854CFDBB14C33CFC2E66F409935C
A7CB858CCE8A767EA6FE093E393C8ECEB3EE29DA78461BB8B5E0DC72C96C375C
212393E4428547E4A313909459423EDE74DFA7C624EA885430175F88C95D871E
2F847F4D2E8D66B14549D63F4E170943189C62C9D370C182723B4AAF338DEB6E
B6CEBBCD96A5E41BE2C3BF2F3A12464B787D1B994238F3B603EA8489EF99E770
EED78A968F1DC62698406B7A6D96510D772EB2BED726D5F12B4487AF44990E22
335CA4F819DEF0C6103AAA90690F834C207BCD23EDEDCF91BD788D8F261962B4
3870D5928D160218AE7E9F37C248BD67BEBCE6E1284CD362B55E72BF69173DB2
58D681604A5C1836D42AE44E136202623EFF3B3874690A68525AB3089C91D6A1
34411D948AA2F90ED6A01E9C22CEFDEC66358B3938BE62E79A78D2928FEE6F38
EA7FD3F4571771532737CAC4FE269D52662BDA70D7019E56BDF7A4EABD00CEC7
4325D3F73AF5B70421A92E73D7B92451BF9AE51F8017ACA1F189103FEEE7B9BA
528C4851A90B9985F482C9C7F3EAAB68393918581E5D402BDE4D4A20B9201440
5AD0EF2B7E4FB2E203561018F0CE719837D8F03598EC800EFCD6E451C4B50E83
9B5D76C7398432345EBA5995673CB82C886682E6E3EB568F46CBEE942FAE3B0A
5D4BA4A68C8F9467EAD47506D2F6B52754C58A254B09ED15BFCB1DC55382255E
271D25341EB5D0AD92B102B3BF7DEF41CA3B9DB089C0995E743FAA61D23F133C
7DBC88D99DA041CA7716779D3C541DC2C630A3E60DFBB379D5C2D949F1CF7C81
D9FED79367104EC44D70B98107FAE98814420EF2C082A9152D286CB6B478ED66
248E6D8497C8889F77AA9337C267FB5482E70985D77E2D0A8866EA71B2966167
34020B514C8B677ACF46CD98A884B63EA0CB7C9786C3BE9F3808FC75BBF201A2
959A2E9EC7FEEE5B8D8919E0D1E69B1FE209C5F74C458DBB7C3D23763B76BD8F
81F317A7974C5A29C373261FC480E90CB1CADA541EA9D47C168251145C17626E
E61BD9898E6FADCECED92235FEA97BC469309EDA85DEE4195E32558E5B64EAC7
FEE09C6B193C4E6E66142EF709DD583500A975858A4445ED454DF0B009FEC9F8
CA76F8684FAAD325EA62AC3112B58FAB45A60654591AC4B148425C1EBC5F59DB
DB9785489E1FA9D96C57DC4B7603038D6B8CE2C512CA317372060AACB1AA7D7D
6159E8D91210F31ACA463D664FAF1E15D2819ACC236CE307310AA50B8DF98901
82863FF2526FF4A8F358E419A2E076C7A04387A4036242CD2F7BF079E4557AEA
1F9C18CF250FC519591EBA8D82FC9AAF598C88CEF2A15D6B13B95692C2467BB1
3787952E5A701E0F825B35DBBF865F372CC051A9D3A2BC4A9DEAAB1B74EEB7B9
08245CDDB7A093C1AA307E94B133126AC26EA984A4660F22D390595911A900FE
D1E2CED88E03687F3DACEAD59ABD78FD41E2AF19079CD60E1367C7920FE0D18A
619F3B355B53B61EC328513415AA48EF6B051FBBA7EAE4D5967EC3646F547C1B
B5DC5303705AE8198367C7D54AC750206BDB71AA4324F87F4C7BECE3CC6CE631
EC7E3D00412D24271B9FA4FA4233558EC50B45B7356973C2FBABFDA96B4160DA
342B14BE2C6CC03A371C859E3865644E0FC66933CE0D60F86764C1F1D57022C5
B15C09B013F448ED78EF75B3A436BDE5E19CFE39B66B4DDCE39F3E590823590C
D7C75BBE8B58E8D97FE1741043EB837C589B4CEFAC955BD04F4BCB9D5C66F1D2
5F4667FFDEE2AF8A30E836B33CCA7986436F275F80F4647D674AEEC41A3E496F
DEC2C0A1F90C1F4FF1247EF8BABF1AE471DA2362995EA9F3E0902D375208049D
9F19F123F67EF19870CEC1AA22459EAB183A52F330FC932DDEE91AF18427CA61
F1FD7081F840EF225854008942B4F0D4BDE28886E9CC715784C7BF7F0AF6DB24
3176E0EDC955695970C7A1BAF6614606243C6256300F709E2912048317F4628F
7570D3DBE35B3F60391D13C26FB17D9A7E118BA9C5900EE7B1E8CE89A55C0BEF
B530C7C7D8A60D34799EB0CBF974F84DA510FC82C8DA6CA3CC73C738F9573334
D07FEEE0594095712FAAFDF0A13E3C6BD36895CADF70334FF6D7B446F67BF70A
EBF35A2AE60651A934221765FE0CC6A3A745FEB2C1986547967107551D2BB80A
646A7E8C8F0BEA57F2223762D6D83688400CB6168EFF4AB1EA0051CC413D1078
AD46A5E7B7BA49461D4AB7C1A7BE4066E1E941A608D1ABEE882F8B8E7BAA3769
47F4B53D2B14FD50B4CEF4398D2D2BE7E7A3152137069214BEBFEED880C0B57E
C099D813172E3F5536A243A101C86EAB1DF73EEC1E8AFA68C7E230DAD77D9F08
EE99575EF2ECAAC7649193843D694E6CA59318C0145BF7935D54BC20ED3F9090
5788CEA450619E78AB817D8985F22890699F277A3B4ECCBCE4AB764ABC44BA38
2E8D33C334560610DD15BFC537D546370C27D93395AE36AAD62D8036D8F84AA6
C643DB5351F70F30E7F138E98EF348C893D942C145C2204CFCD6A5C69FEFC25B
60E4173022692DD3E4EE9174F9B05C151F815847AA888BC24A4FEDA7DD8B4780
17C366CC1046CA86E01D2C6F7F028B2A741D1067762BB6178F91EBAFAB3FC44C
BED69056CA60B1CCA3A1465052750C7FC03A6077EC4E8B49B2FD98B18D546E6B
74B4281397FD2B69D766DF4ECB384A04E6FF66A8AE5A79CB05C727573F3746E3
38599C9DD77AA8D5F8128EFFF65E5927B34C9BC6DDD81272DD3E4049B39681F9
03C8369E382F7A73D71F46CA5C80BB694E4C361CC572E3D91FD2E8D1D0CDD0E8
3C93DB62021467C39859C40D934303EDB1F5B0A37817AB41CD15536F59F386CE
BCD1BA877673C46D2ED30023EB3C9C310FEDE003EC1A5E75F0A76E882D111EEA
D049F250DB2800B470F6958DA75DA3770C575CB1327FA31ADB4DDFDD2C978561
D95D2CC4F3557FFE145590C912BEF49C28CE53D3DB4CA09DF0B9575AB7FE3A53
1CA0F144C6C508C1D87CA71553D8D18EC1B4CFD5AF48A8912248A84EFD386C6B
61A5E4E054951D247C5A2E208983DF2BD52684E1125277241FD43B46244F0115
F1CFD27B102E3AB251EB9FD654EF73E25ACF9599DB286236367D3FD620ED9FE0
415BCEF5CEF8053258CF255F704391F4DE89E858E9FA0A0EEF612BDE323D5780
F1FFA688F06E4281A08266FC380BE867F31A317B4E9622D3CA23E4C549DD1D44
B59266737C92CBF1FC9DBBC0078A5CBEAF00C7299CB6DE6614A8E327EE30019F
F7C67F3D6E7B3F015E143CAF40A5C2DD54C8EFE133E080D2DE3AF2FAC55437A4
33DEAA3482339391145D2478AAF5E7524C729305DA50CFCBD53653C549A852E9
5EC599B928908421F887F73490F74CDFB1B27CC959F7D1203D16D1896D5F4C37
F3B57C600B35E6AE98018563E0261C0B7BD65D41684230EC827A379BCA23F404
1DA022F9B7DF0CCF3D320D0407035335BF59665F07CFBFD7F3176E258809BE69
A8CC54F584E6E26A0547E01C39401CAFD03E54421428CEAB34BEFDC74CFC35C5
844D1E8A990C889F3FD0F4165FCD4BB202B8F80104ACD148FA26F66170D5DBA7
4A5E8DBC01BBD3ACDB08201A3F5D9079A2E6F51F4281B574991F548041F8BDA4
312FAD259AFEBF36B10851B0883A211E7D47163232E7A7E0C1AB03742DFBF79E
CDDE8DD5AB6A6510525CA2D6E7FACBC3FAF86E198E0D2DF839B5346297F149A4
3EAC274F31F4CDD9DC6C0F8C7FC00D930E7180E595B13506E2DE26AB631C0D0D
1695EC7FD2589F3DFCAA863EC68DC6DCECC8A16D982D8AACBF00505D8740EFBF
4DAD22F0C9626D24E305EA93880D277E9606ADE2EE91CED55798C6E4CE1A4133
058EFA877AAFBDCA172532D39F1E7C5DC662D926625D4FBEE5D97A7D5A498012
DE2FC36C676A5C1424405DB5BB10488318BE1ACA34260CEA03126080212061DF
5C78C95AB2D5C9AECA64B09A6B156DAB840C806774F325A94413CA311EA41C84
EB8C661706FC3309470A14C647D04840C0D51533B69F3D1B2CA9CCFDE983DE3B
A0A18D52AAD261D95A76841767E8561E465C1F2F55F8C0D455A3D7343094AD01
0CD40F926A208F8AF02273FFF075779638D4A9019AB562534816D1B3A5B45175
634361E36A896A6156E9F90CC965FE5C44306725469D6D9FE0A39422439545B2
FAD08BAD06977F96442134A1C98F84EFE88F1AE53B00A20CE3C6A92A7FCA5D55
5A41FA4A0C8ABEDDE3679D6EE24F3D100457D7DC0C672BC576C09AA79674A74F
6B8013DBED8F39AB7C529F20D79AD3673DEED3923D67EEDE71B99383ED41B367
5FDA8F8D0EA1A8F14C522A68A3561CA15E759B3D9EAAEB06C5610E6B9FC09C48
4068B4B37C1AC912C014D6C7788FD199018609BF2164A1D621030F68A30AF36B
A25280B955C2AB0D43401A51F74210B3F48F563BE3884A862FA2EDA41B4FE514
C33116D05E15AC0CF5B5EAE20F85DC710902871312A84DA1B7F2BDD3E8ECCE14
99F3925DACEC43096D50EB7E4306238F06F910C43CFB7809656D574C1887F5BE
FBB3E4EF615E561F6451044762B2356CB859EA249F45C65412DF91F850EF6DA9
ABC92CAC8462CD21E0656E6424837C2394FC88277C24A4DA2A3F888480855BDD
1FBB66F01E561E229273321B8579B7FD731D3B90221E2486D8A78DAE141CB55E
82779D8E48289757A3D0A2A8BA85BF2008C65A7D4E3BFA45A02C22BA8EF5E7F8
ECFE9753BD181B97B69522F6245AAA97743E733D55B80C796A854868AA1D188C
489D947EA7BF5F10A9A16EEC379A8E58171EAE1348D1F87D37A6BFA52B0CA07D
5E9A31F28B4EE82DD7AE331204EB442192A684080D39080291C2872878E7AD6A
3B017CEF00FCF11488720FBF2271191F46D61810333F1C16B206B4311FE587D1
4B2E27CC03D80D918B48977DE6AF73F79F65E8A1B9B4D4B42BFD1FEED635E12A
928BEC5282EB7930ECA01D98F73342D25195C5F48F2188D7D259A430CE5F7E0B
0B9709A54EA52E2A55B342B3C03794676006241B6D9E79D7249BE6BEB459FD6A
90F4DF94570C0036D413CD46ABAF585AB338E79466007C7BAED25205610D0CE3
EA3705E28C932FD3ED255B170409E36E6AAD8DC95CFD31DA7A90E45337F57BF1
B595C0857F6C4D46771D163009EFF03B27F0B7D839A813B8087AD9D2CC4C4E29
757F4E8924C55A240B0862A9C06EA574D31718F1155FDFBDD1D4FB5E0F3DDA3F
4CB637DFD9161D4B7A2D5EF73634B91581E5A9F5E215EB4853B5F8E8F2BA4882
A18B6602235F026F9D4CE871E5CC7EB3093FD34D5982CB77E9A0E37AF5E9937E
DFE0952134DD6976FB4EFCC7E5D4193954E87405F823B5CD78ACC17157618CDB
D69FFA515DFC7132AD0E7CBE879A1B544CDBF6E0FE9D419CEA2CBEDA7E3993BF
76D166DDAE289F554F9DB3DD00996AC5A948D493313597F778ACE07DE6F09A37
1AFFF3240B55BD8C4135C55E04422C7D841EAEC448D827A4520DF934A50C8464
405DE5BEF20E13642B21135994573B645B08ACD8EF720660AB2091F0BB202E0B
820A95DE4DC419C31F2B0891085C832DD6168B66730146AA187789211A228A6D
8489C746344523714CE9C0DAECB2BA9E7DEEBE982EB76C14792D519636A6CB94
92316EBEE6077B316FD628F6A19228C30171885C509961EA814C37FBB3D39EB5
111A34F77D6374135A0BC826F3F2AB50F21608B4767B4A69A156DFF072F6F593
46F26BD553BA5BD2C4A7C3449A60C21C65F009AC111597FC1005542D3BE9A356
526E772AEE43681F019DFCBC3099ABCB53EF221CEA6F1F25312B41B125B4A46D
A4550DB20C261EFFECCAC8DAF08B5F99CD7C64135AF75C84EC1B33C8D1003430
5104B111C5B308DE4B15BAEA3D5FBBD3F80B0AD66EA640F04C8929E709124E34
B07C4B6CDF3904F9C63186ED812A793D54F237D79DC9209F149BE886D711F35C
FEE9250AD8BD55BEAF5285F2FFB8688A0D53717729BD0388E75520BC17E29FD3
D7F937CD76B6DBB6666C51E44375F2008D64B560735C2D7794ED744D1FC9AE3A
CEFE39897EB2BBA0A8746AE99968A7103D9FE4E4DA535522CD9B1EFF43281F1A
97935FDD7EBFD973A2C1358B6A1E24688AADDFF34B6C422C33F62E58AE55BFF1
2F2C53798FA2588A1A886CE57650D5C883BD15646AB4F8F64CDDE139EBA35831
11004931F5CB8BE1983B5B7F6630CF8C54F74BD426C3F6D0D55658AB74741658
BA6AB0F43F38962B181312C29069BEA6501105C9AB89E142758EF9A5CC46CEDF
664BA6DB13755321233449C37F2DA97E67DDB4DED6B9816143E0AB78003E0E23
FA2C709320CFA25C1FB80B6401B507B92E99DFF7DB2A6AFC77F1D7F6CF6814FC
6108525A437F4391E79987A4CCDAD31438FDA621DFF070273E26F95CCCE957E1
D6A2A9559819B4786D194CFBB6F4D1C37DEC00FD78230381E2F6C619D40D4BEB
617F2C37937E517DC759D458A997BE5D2DF9DD0DDF7C47254A4FDBF99D114699
E806A16984993E86782EB912D37D0533DECD9C6BEBBB9F28DB742FFBA5D8E4EB
904122932DD9033F3FBC7AC0442613799A286105C1EB07C3B721649C1E3AF8C2
CA87BE44091A1651B28216D46C59B43C09A07635458753AB906F39E53B59DF68
9B9181CAC93CFA251636EF99D25010EB98DA8DB7AC6CAD6979188FCE079AD195
DE843EC906584A3506F75B9EA0BD78ACB646B81AEBC4E939670C5AD9686C9B74
4B8B0A8D0D9580228DAA372D509785C5E5CE86DFD61F8A99E3AC3CE3A5FEC099
1F67A0B1BC3B098A1D4AEEFA5457E279C8C9D62B6FD3EA2BA9EE7756AA8380C7
CB66F72F20AF8322D4C8E33DC3ED9D798DEC28F959275A70087BB11229EE82CE
09BFFCF7A925A099D6153736EE2E078BF8A28D91D835A2ECA03E521CE7C6F5F9
17B75A1C13D0A25B34AB47B18C978BD1CBE9AB07AFBAD583266C7ED75EADBB15
AF349B0DB4B35E10595764AD5CB2D6253B10AE61D521F93BDCCEB188F26A0E6C
4D386D949E6E623EAB6BA9A8A674CA2D5F39A6A003E2F0198DA96155E68E8F6C
DE3F99D19B442956F5AC246B82A28E2FC03785050C54C4A55F558761B1B48E09
0ED801140E56C78DC5BE9B70966A99C99B7965A9273AFBC06287E3BC83F4C75B
2F92C832A349788834A1BD8AB153083F4FA19435F19698EB747178C1E41C1DF9
BC70167504E4E47226078669B2371776D58E2268BA1D0808959EA0E276B0EA08
8171FD000F4B5C15A2C90DF812D8CF9F07F4E44054B3CC5310374CC86FF6C560
4FC9C6D0EF3D23B6D303E36935A8D298F9A0D972344EAD320365EA2A9C6E0D39
74CB21D038A7FD3CEFDFAF75C1EB734DD2758D3A4C9A1295C664F8990F1EB125
7E70977342718DF77B0929D99246B2B0B9612F6F6AF2DD97D00057DF42E2959B
E5E014BEC6D080D4D5F22A8870E70524F9F7AE089E3C021CF5419A023B40153C
99E719F0E20887B80A9B66EFDE9CD8C39A335FCDEAE61F2DD99AEF4A089109B5
52865573C64DFF77EB23C902D97BA767A5283691CAC29E0235A36EBDFC55956E
BDA7A73687392C0F71A63DAA5C7EF71BD94086BE1C1D7216CE803A205B482B03
FF6E18CFD0AB36712541A117E690933964924DF452802C362C9D3977C591F7CA
7EE8ECD29E68C9BB7025117D6C4413B63D47BEF705AA48B3552F6A485C6598E9
403E098069BC72A21C56C3DB76584AE52611DD9D2FD70796D1AE353AC0E6DEC8
22A5FAEA2588AF81E4B2E3C7BC913DBC1C0D31756164B01C3061C549A475AF4E
7F55B4881305F74E474FB917184A403006ADAC1E98CF910707A1A347B174992D
B8D542BEC631C8069D0DF3B6F3A4FEC6A85D7F90D278D7151D59D40D28184F00
034AF1BD97F1161B1A5B16550613A12A087202F56202C497B48640559A13A291
CD0835561E451BCCEAD155EB74095A083A68E01953A2F081825EFDC1276479EB
B178F91E90BD882FBD0A82527916A77DF313A201737796E3DE98E5B00106FA6D
6A5132F9A9A599DD5A19D95D33D9E67919588BA47E0E57E6B83438CDFFEB3614
1DC350FDA0376B4E8A2BB4B96B4667951A60E73E67169DC414D6D493848923E6
0F7C67FA6AA8062594F122A48C50511B789CCEA510AB3E173171554DE156E442
8BA4CA65DBD4469BB95E305320B7D6A69CE1B5FAE803D24BDD85943FBDB08D4D
0E5BAB0FEBB77B49018BA5A75FD122239B3720CC5A093F031D724ACFB3612298
B5E3E0AA5D4C06D6C3059D5C81FC3674A745B0280FADD0261B279EF8ABD7B35B
D2336F5B4433570A8AF661331D64E337F6D6B447A128CE6DBF7D686AFED132CC
C9CC332B6C7A928DF0CD388ED13B79D944B28CCE75B08EC85DF704ED1096FAA0
3E32EB76210FC72BE097018749375D92AA335837AE286EC25517979D251302BC
DA11FC4491EA792C554CDB77B0F15E91C04F7608770996D5E85EA99AA92270C7
1D750C9DD3F4120CE497D0F2879F046237BF9BD3B9F4FAA3869634C8E4192D38
629A0DAA1CDFB094EAB99561A0A2275B9DC30D1331C0BAD98BD0273D5177542F
DF684430504B6C1B82192D79B782D199910C686449B83181775348AA6EAF4D86
4C52584F79A50A021CF322EA5989BFF5AC49A25DC11755A2A3EABAADE36B0EE7
0802C43F59B880285E8F92D941A81A592501CB1347383628A79606431C203A9D
4230E7022C9DAE2E5C99E592F992BD831ED5BD6EEB90E208FDCE1FB5DB6156CE
A1E78511D2CA78B2A1DAEA5D6CE3DB4D510A9B3410017E2FB14F85CF116E6BD8
39BBA13247AC6293AA843CA179CF0201261826133541B7E924AA4B4F386488AD
E71C6EAC82D9A687B8393FD3DA2A47FC87C5E3CF18CE4227ED29B9A8CF29DD25
D1B19A955B388CF75B423EDF3CA85220BB1E5F54F80D3E90643F7001ACEC19FE
D5B63C1ED389AA74CD6196846F19F3E950C460746E33F258C38CD56F605C1198
DD40503B161B90C4FF5912435F2FF76FEF2DBC4636807A038CDA8AD59A7C2F7E
922C5B67924DA9682559E4C206881B58EA640A934223A46C181686C02EF9384A
F0562C85694CFBDDBFDBCB94A0D0218CA9297ABD711D0C1D8775833703E8F2C0
9345F4221B5502851778641A703AE8D3722A36A47FAA0556373952ABA829E9D3
F2A3A10DC07CFBFF27109D81EFE6D6E711B58F5AE895EA7619652A549DA802C4
EDE06B8008F641EE405A02A0DA160CF03E37DD2CF0B50BDCF89FA9956BC804E6
C0432A3149B7BA168CA488A7CA6E6C068EA4A2F4EAB6C4248C541C5DCEE10C45
F01236F0171CBE57A799DC6042F339AB93A7432453B6534ABDE02F80A1638126
0345756E793A98651F4D4F53A13D812571D8CE2A4644F244474219D884E51FED
D4E76DEDE3E115A0AAB210D24F979E3A1F3B6F27A7BB693396F30C06E35DF963
256C38FE8C532F75EB9F10BBA62343C23A85B1EC90FF67F73BC1B4BA5328595F
0FED9C879E76B74493C7D5EF38E01CC031CB4CE13C22E2EB67127944EB80DC56
FA968672331BE4268D2ABD652A3BD9D5639E3D24E6C41BE139B761890E3FF013
C7077734B918095254D2E380A2957AB5D4893F24A55A4630BFAF692993A8DF9E
92D185123E9B384DD81D9C16A97A5771B0BD2B023043EDB330E76A667D1891AE
7CE3FCB6303D46A9105C27FA9D0D8981407E1FCF30F4A02CB0680F5179A639F9
B8AC5E1C368CFD3ADE40C9AD2F40784356690DDB982F55FEEFFCF946C6DADBC2
55361B8901E76B80E3B89A01CFB003D77233A407AEB6F2BCD68E0520E9FC0BE0
D2AE2773447D08063281861E98EFA4C2C7E3F1538C8476110D7949AC14E89E77
B4C277C6480803414679A145541628F6DEA543171844C4B5B283560B188B0AB3
E7A64A4114153FEA7444C689CB2B8B61A38018C3EA50B80094939264706DAF56
3EECF508DFD774A2C0534ADA03C1A567273837660D4D48A2AB416E9697873329
C992E1852FEEE8D8D9FDD362FBCF1352D0CAFE219567E0BD99CE9487D4D9B191
82E11B22DD8E44D77C6E4F2A4B43A2BFEC536592EA62762410807B3EA1842AA5
F69F4AB0EFBE4ACB28088E01CCB245FE81E866F586A821558B57277626AB984E
4D574F6F38BCECC8ED918C1CBDF51A584A9E8B6722DA37AF968690A2B50E7398
54F243C21E84B1C1EFA0C90B254C1F2903E365FB8120D2C4DDF5862F2CAE2F8B
6A8DB26A1287AB3DD941A92AC57B3A0BEDF3087C5D5B06BEDA99902792B83937
09B6F752B0AD0996EB24619E0F98D7AABEB64B1EB23E24E2564B92E6E0A745B9
A9BB9E25237BCEBC40040726CC9312B86C63EB4A4DBED3D8965FBD7C645385CD
C161C66FE36320A5E7B945EE3720261CAB35E144658678C9FEEE3FAF4B4ABC91
988432BF3E266C7E77FDA956BD12E38A9FE90DFC2E0E7E928AAD853268D73CCC
8F0217FF657475174496299457BECACD36404D9778755A525D30EA3BE90FD366
CCA97C010810B486625FE079E92D26E5936D39B0165B7F8B38EB8878F7F56326
D9464F09956822826304A4F175F4911B07AF6EDD43355CD222EADE40E7595551
D6447878853929A63DEA8030DF11027C085CB99911A1E98036C81FB964E824A7
C9994B56C119FA5C3274FEAAE563529A94C5E410F1CD89DDDB2D5CA8BE744B66
F29143DACEBA75207C66D0B692FE7C9CEED9A54EE6607CA150378F720FA9BD9C
BC1F322A39EFCAF585107BD5A5C18969FD5E882A0052DE76A475D72276E2C6A8
C48223624FAA5082DCE3042DC9767C407C0DB4D0FD1A4881A34FA24FFF81C400
FAEA98F62F02633E0F85A780A61DF255257A31B247CD9CBB403670A11457E550
B1E5EB5E4E0687B9E14662EB936F101A72D8A82F7CA312D20534E91CEF672AE4
B47F43E002153686E967BC0DC4D0ACF30EAE676180FF6D2076C5AADBFD0D8B64
79F5662D1CA71BD688E89820186EE876BB554952C7131830F616B695D45D867C
DB932C39946C60E88E4CECAD4BAB398BFE6778AF86FD13BC20EC85CB78C3DF9F
8D82D9EE78A3552AE345DE6D4FB84B28C6B71825F190AE74B9E5C96946ECC527
89C75F7900EBE4A8801BBF34D10B1625A59702FDFB55C550FD3B67A009491395
8D22575E85FE814CE61987035623AB8DDEC101D55543FB93BA5928A9F881FB9B
33DB98E520A332422433D2DAEBE5ADF45857F33508193772BEE2854B571F9A98
5507EF4ABC1A7FF761825E81E7565448E89FBAF4981ECE74E2406D3AA082FE10
C2AB81DCEB396BA47EA5E363C4FF366CBFCD5814AA791759451BB50ED4D6D273
9949AB896A3DC9F5BE5C930B372091873899CD4B7E7FED0769CCB5BAEEF8952B
B41CA069EA36581C23A3D68FCC6176840221A615E672843955C031ACBDCFD2BA
07E6C4796E55823A59ABA5E66862FAF91505153345B678E3F2ABFBA17B3F0E6D
549E7C6D13BFC785759F33FB87CE66C909B7040538B5E7DE80B6DE055DC28C1B
3894AA880E5F0AFAB2498FE1D79954BD53619CA37601FB91BA50D29B17FC27A5
506496FC1CC6E6C651681C8A2563DE65C84D914A718710D358014F05D7703139
CB3912C1BA751EC56EB5C80EE2A7AAF2CA12D1EB4548266CEFAE911006C5867A
B741F3C6E2B4CA27897A2319C4E416A3BCEFB6DB8014C76A3D823A42D28BCBFE
7F9DC3B1EE69D7AF1F2CE99F1F001FFBD0BCCA89A26D11133BA84D3C7F09BEBB
5AA042CC8FC0A835BC83403BFB3BEB7F64B8953464A95F9224BD0A40C0B5660E
921865CD653F26C96FE55CBD6D9CB7F406218E1D955B89D998EDC3BAB0A287C6
7A09997A52E44D27731B8B08DB03085BFC50638BB1994E249649FC597894BD72
2B4747A668824294DF01174A81AF53D014F5F5EB1E3CBCAD06E8CB0A59587578
9BCEEEFC5671166B08BD455E6CBBD10D2AD0F14DB9454C1E50FAD8AE6DAEDE22
4C483040DC7B21B64CDDFF1313CB7D4B31224DBE0C53EB524D256CDB7D5F0133
712788FA969FCC5B755115AEA57B785862258872E2CB4713F117B380D4662221
ACFDBFC5546CA33F59DAE750BA6B57B855673E35C15AB5014F4E0AD8552098B2
8F3FC1AE4CFA2F226B4F583F56C127E3666DF8476D5A8A6CC0A5B14209913933
9AACDA625269DD309D8F39681525D61BF8854B3ED14CF6C3881E474E1BF9C399
85A2563A923BB0B8026A34D27091B775EFF64AFEA0159044E22D41CFC6BCDFD9
A438C10DBE71A978118AC0AA3361059181C4A4577018E8150706160ABC1BE9E1
BF3011EE34B526EA480EE2879F3C8452D4F100C048D72BA63E738ECA6783FFC0
F5F5B103509F75D2E6F72E7514C2BD900F0873244170EABDB952C8FA6ACDF6D9
33E1EDDDFE1902B09C6677C47A271812787C060928900A2CA5B13AEB41DBF838
C73BD6689A0657DF20275685F1500FE9A95034D47818B8235920A92F4F28B6F7
A831ECA28E1110862C783931111D2A9DAC0C40A97DCD05055A705CC4D7916320
9A2105EAC6577EA6EB42BBFB63F4C53E435F8619E256E1F3191DCA7DDED14C03
F72078923A2038D91F478CAB438DBE234CFAA37A084BED6B900FED1EA7F377E4
DDD4369C5C6BA431315C1AFF971B8519F449CF1BE3D5E995BAC8C17F9AB449E4
AC45A160B71CB1BBDD5D9CE786D1E24A8B87C5B5CDE995E273148590FBB65F18
CAB4A1A3A66A050049D0235EEF876FDB36916216B3A404AA2B7B5C052AEA06E5
85AF6915A2DF244DD56A20E9858890C7992E51350BF9C03A8642C108D34C4CED
6F7DBE80F25D75116BBDA3F0E1C0ABCF34C340EA150D8DD7A4233D51BD214B17
880D95F9288B318E8D3296CFD6AE32E51AEFB4E69ECA92BFA0C0D1A36A573708
C2EC010028C55D9D6688C530AE3313D39204AC35CA6C6957C87931BC96DE8BEA
1505CD14C691C4E9A497534338C05DD286A6CB3FECD9149469FE2D992910D57E
3C2B42F2B5A9C5BEB420D48717AFA4DD0B99793B0BBBE87CE557634F8BCE55D8
473221D22817286BFC891E898F901F4827C1EC9DA50E598DB486A0AA54C5C70B
67BB5867F442DA539A61002EA3132EB8461984D3224DBEB1ECAEE519EC68C2CC
AD6653D30FAA959DAE1507E1AF7F119067A3A4CF98EB80AA711AECA4F845BC21
96C0C1C9347CA3C79B80431B5241A419FEF255C2DB95240A2E2F15795015607F
2CB746E081E9D49336567AD43AA2E2214FC4BB017B438E62BD94D194914B4430
71E9647DEA7D8E3BFA55C6AB9E1895E0CA573149E10B6736E79A0EF8CD80B424
15EFD5A9B43C59364F6F4D2FE74FCA5D5AA971F5DFE644D00A365CC7D1C05C0E
8D1BE7DE4CF20FB55A8850B482D9C52439DE7BB6E9993DBAAE9DE070E73A1761
3406C711B92AEF8134F99A6E1D565CEAAF43956360D95D5DDABCB5CF1AB93FDE
D772E5E639178B98E4E612E324909CF2F3A703C5A697C8CA0C1EAAEA38C76FA5
9B72B72963AC58098B99992BEB0DE61E4F805D80EF8F2FCBEE4B29E5DA8177D4
6D70EF23CB9AD2C26CFB2671B72D15270CD8CB1D59CA22EF60F4EA110AB03B0C
896B05D2E06F3512C764B686FFAE59ECF5E6920A890F6AB64F638C212424D908
0F11DFD2E27EF28CEDB78AD81991BBC8FA9EC4CECB092150AACAB537C2792922
EB339D9F6C8EAB264610C4F912A882F5FD87AB42D0BC5FE6ECE778CE2C3AF5FE
9F45D8173012B6F47A070DF5D7D352548644CFDB297DA1754B2F026ED4AC1BA0
A1136636FF8AEF64B00CF1C3C711D931B0C1DA852B80F0FA31972B0ACB9FAC46
08D7D3BC2795CA29E3143077A9AE42D8C2D8E0955D009995333DBC8305E2D7B6
9C5D0E0E74CA44D80BD99657E6B1112329A103DA1F83766357D229A96A86F4EC
168A524C6596E846AB71AEEE9356D9F0AB453C89AABED32DC0FF309B8DB10164
DE53CF60EFD37DD52A22284E6F951FC4064D8B6645B46D609034D0F06699DA05
CFAB36437DAEB834F69D081DD4892EDEBC8DC98DFC5752F38A684CE8FB6B1940
31F032BD11E064B5AA9861D16EA72291C88EC838D41D58EEED5E1E27B49A0561
A1302E8F79920ACF6403DB623C98F3F59FF88444CCE1EB5FC3CB8014086E1CF9
CBB419080DF0C3D1F37F9F2C3C0F122D95DED7CFAE220ADBF448CB845809C15C
7795A1B09B25B7996592FB0395E02BAE358D068EA5038FAC8EDC241DC3360844
AD12B1FDBCA8CAD11EC9F5DD453B1D3838A5F6F80D166342B8E36C1B0DB74E06
3B91024D93E85AA8C016CE3457DCE18DF92477B34DD59D258D4707CE222CCBCA
95D033B6AA4DB98BA8450019ADB799ACF711607ADA252DE7CDF57750DE1349DE
D0FD73174F07790D00E851167F0440BAD8771642FF4CBA54629AA70CEC4B9A45
1A119943E2ECB4304977DAC5E5ADBF9F892926DFE4B20D41DCF37C16376241EC
67298AF4CA0741BBE9B037B6EA815C3D70DAC34AC084B1A42BD8162271C602DF
F008BD5079F9A2C8AD396EC5328FEDFA8FFAC2148B7744D97E6B94F54575E469
2EF081B9499A6097F34EC9C9EF026D4F3EE9248B231809A994D171A2B9D0E294
8B24D2A7E6AB7E25F03D2F8C83DBB5E47AC0EA107BE95E74A7D240F6F5F30012
2609B75FCD66CD23D869AC7186D059CB4AB52A734E3E49CD09122C7DB95A52AF
8DB90125C92213C6D930C037D6B41BD233860818325631533625ED6E1C31222D
9A53F0E3789B23C32D4B2FE4E7B7DB21E963318BECF5C7F574AF99DF6CF36322
417A736F0635F4D60C3D5A5DA9B0C7554AAE54759B0B0ADB5957490908E517E1
79F8F3B423640DDD32B134CB2E43E226F408A8901C82E63E53BB2CECBF779BBE
FEEAC7DBEA3C046C2694DBBAF882F87811A96EDDE55E91EB1686202029B22F88
5988C306058ED73421F9D738DBD7BE12188FFC1AF9F693D459C15D453BA5F04F
F39623C138951BBB8F29C458C7EFB790F6D35CD9D7131FE684CC21E97D5AF2AE
0A11F2FF3F834554347F8F87DF5BBC296C1B64E2FA1DE3618681CAA89AD1F2F7
7A4B62DDE3812AA8D9484FF9E9796E1954FD59D1E417D3656D92EC8AC51A2100
13D1B44E9877AD65596CB2A19C712B8547CE90E3F2EF3A162D83E12814AD9103
6672A632BF498E982B2158B7FF166C507B49AAF6FA4A71C74683F2BFBABC26B3
67EEBC9D9886DBE502BCB6893976FEBAB3EB52F0D5F9F701AC65ACFA038944FD
850110B2FDE4E3DEFA9AC3D5980780EA3CF483FFBF44E68BE0E5B46E92B59FBD
94B1C5CCD4204A19770A190BDAA0E7BED36EB2C52BA18EF531DE09B52B7093D7
85F43AE85445FFEB9BE81630C673E4900ACD628933083F0AFF47C3B199E4E4DA
535522CD9B9EBDE34A75C83AF124955D295BD3C820B5D6983D095A0D6CF68EA4
3084CCE188F7F6E510CE602D4654DEB38E8E672E0AB23A2B70BF022BDB216E7A
A9E58B993C64BBA731843D3F6B7252AB8C701DA6842D23EBA4BDDCF0200D6EFE
9342C76AA6E9FE7ED7F00CCD7A5D495C3B1BA1CC3F5AC3796BFACA3FC5BF861D
53B5A1B5EE7B23BC866D20991A376596836120DC2A23B9D29EF83763F99AA081
87A681CE75A5DBCA388B710BB0232A2DD583FD795AD2FD055E7B3A1C57F0A516
BF0488C70CB99E96FDF0798A4397FC9B42572DC1F55729C38841462ED5FD0899
87A091F85F88C4AD6A531635980759573D1C7820FC06BEAB5782F56BE682A4E6
B46DF617EF495328457E8C003F22957AC237C37B81CAA343350085E0428AAAC1
3A58A02EA6806E99F9B2E5CBF3F7A7E00FD1E3A4DA6385949CEEAC29C5021B3A
CB2481F380B89C2A9DA7AEE1F42E34134624CF9F0BD77C9459D61FC212A9A03F
9BC4CEF9E04AAEC7776E54A682039510EA5F62BDA21D0F909C5A817E46F7D1F6
BA8943A6C10B1412E19F6E8A2B7DFBC64C47A7A0B582B3445B02E27AC2A2834B
111B3BB1BC05FD3F066F83BDE93A2C0679E024F5E457C470E4EDC910C31B956B
FE1FB0D7A74BEC9FB5AEFF0A584F6BCC0A7F0C7914C795B0C7A30B9E18D86E1E
99ECBD5080F51DC6C4250C9AA23560EBB0AD7427992FF2802E3A2F18B8EEAA76
75C2A17F9507808BF601B37DA16253F41785BC6B5B3893787027C722B626C678
B1CF0226C3C6F0294D77B5D968F0729A5A1D1EB41ABB67B9BA1735E4E0555B0F
C0C67C2D25384D8E7B9EB31D79E2C4607421389822F8A4972416121CF4F0EAA6
DBE938CD88A43C54F3095866E313EA8230F0AF49C0A222FFE340112C6C063B2F
9BBE34A9BB78993FA94BB7CAC40F7628FB106D44FEBCC03104099393336984A0
495B5AFDFA147835FE0BCFC55B33537C468B750A7C0B3985DE4F4E8AE631059F
57AAC908DC0453682BB3519205D57BAC8E8D1035C703855412B296D64428E560
F529B5A022AC3629F8260F481F20BB00CDB7D91C7EBBF98AC811FE956917C8BB
905AD47CDED11C9B69560BE93125FE4070775A7C57DD0E70BC21AFE19AC928A7
0C32797E9DE1A34E6EACBF441786BC2F48160E257BEE60576DF6C006B65A81BD
05ED0928C19BBDACAB70E1FF207560FABBC42680DA4697BB4E6D9F69AD042187
58F11DAAB9D763A34A791B1322CF0A2950A86415391A609A7ECF4FF731353DCB
DBE249582DB30CCFC704128747515D013FC749F75BA912618D5733E72EC522C9
E512A9B2024A56FBD75C0B0CF0C4EC14A174D8AB8A761F5C75A9BE6F6F630541
9477809EDDBFFE3A1589C46B852AD417BF0900E0E011E8ADF91F6AC65DF1BA94
57012E53E34F950F44B57B5EB04D31C32249554811BB195452F6D1A1E71F23CA
71B57C4BA14C12B2027B2A3130628D26E5AB54518EC52192C9B5B9CDE2643879
E4DF6F45C5FDB1814448ACFB10D38314763EB1AD965E8A5A3ECEEBF44790D57F
FB857764AC37DD32EB0138177F7BAA9F7B6D47FD3DC952FE149189BBEA4A5E7E
0A4C9634B1B3977B7B8F2D4BD2E412098F5127ACEBD06FA9C48822F17C100361
5D9519418B10FDF5326109B0B578BE92363742A8BE134C511DECE7C457CC3315
5B05942119B53989291D964E14685ACD8259E7FCE47E02005BB170E5B4713285
98463EAB51CC1F50758C6AA35F407ACC639D3038C01E4E4D869A72DA41DA44EB
3C71709F71C056F15FA37E776AEC14C0039C0EF935042D3049867723AA9551FF
D58E4931C5AD868D87871AA4DC5D3640AF3949DFDE4BFF9AA2FA2C070683178B
40FE0E15AD22D7B28E1D98EF1762ACA5952E290C7C04452877678C87C87CF18E
DC5D74192A67C075B25E22A5D87609B40FACF815D57DCFDF5E291593BC020FC0
0BB0905324D0F3CA92F19B3F4BC8E000092A0D970B031F6A5007226F987A0A2B
337577A1842E783CE7E8DF9D5D32FECE69672484A07648B24544D4D0D28E790C
66EA50D17DA5BCACC3DA7EA9B8B721C28049161DF7F9DEC8F169B90B14848BA3
0CDA70C373498CD72D0CAB26F682C3E7DA4DC02F8945783A3A7FC5B83E2DEE76
42AA85B1615F9CBA1C3C3197223C9CF58A9D5356746074519505DBC4F8AC4803
62656BF727612D9F27BDBB6E6BBAB0E40A2714E27F1EA5A60DEDB2AD1BEF931E
BBFD8FEEC4E60F4D0691654349BB1B586CC53B7C9A9860B096DA037801ECB521
4290DCC5A7E09F4E53FDF800209F321D7FA34172C792729237A2520A860F4BA2
E701D36F8BC387D8CE10D01961F7D86BB274BEBAFA06F7350995853D5E4411F7
88FE23E05C921096AF938A3DDBBD5ACB8BF11769DABF0BBE9BA2B17807CF2112
581A617D1EF37823F36464FA718E6A951C451F20229033039C214E88DCF08F28
38AAA3E852D4658121B6317FB8E40E84B1D3D3ABFEF7EE15DFD36091AF3EFFF4
3FD7D89B4A36428DBC0CC48EAD81C85FA3CF7A56C179201CACD083F8A63723F7
E575DAC55118F66626479BACB021952D602D99487736458193A3B039A82A93AB
2E31BDD4FB99530449FAB1495E0AFA6C646E47FFAD34A12895B658CE60A46E21
047E10A448351769465279E90106620954C154442304639C23B665A38D5E0D69
8D57457A71C6557AA20ABC9AFACE5BA95779D124604AA59F9177852C1E200FC1
7976DEB8C98E52C56344DDE6FA2577738EE735F6CD335E5146D16C5AA68FDDDD
EF0125E3465D4649BE13FF9A22A528922308C00CCDEBCE60D893C887BFD0466D
7FC485531DEE0D4D16233F9FE0AFE56EB0324C1022CC7533EFB892191B63BB10
87A81F73D0BE06E4C108EF769B1E1BDD616AAA66BF5B6754EE7CE90EE8C3B35D
08BA781E75C506DFE0FA630FE721725D8F5B0A803C5A832BF5C7E353FB1785CF
9CB6EA012929DF2475050503336D475549B6C92809A49715CECB5F74ACE608EC
663C1A23801158B4E785893B5EFD6019A33401AA6A1B7C9AF629B6230BFD81E2
AC57A8E54B8673A1A055596FD630BF9FA4967FAD0D848DE7F7DC36D8B3F56782
A51D243612B70B601D2DE189B29EE33528A118C316DF199365941F774F8CB1F0
7D5498B68A580366A8C0DDE082162D13926D3FBE136A04BC4FCA63B1271C7884
5BD324D3CDF776EAF4F2E07CC84C4B6A6EC0C35151F05763C613BA7BBF902A19
12A066ABAEAAA44F81687C261ABFFB8C9E87F107EA5399180A30609C8E5A6C94
CCA9F235FB984CCF7B3479FA6653A07F5CBEC72D82A7C1602D6137A24AF084E7
544D8A76154942ACCED03A7785D88AE3525E958B699A14BC349FF6B535D1F2F2
8A9FDBF61D904922474C84C7C3696AD83CA15099ECDF3A273E8CE956CFE99116
A45C23F6D07CD446997DA6CE5DD44B303772945526E239A049C6A9808D2465DE
2525B6DFCEB1CDE1C36DF0A81A5D74D9231BFB1F1B7224B598AC585AFC792F2F
5F04FDB35F1C993E39C5ED535A8E130B46D3C97F4DE0BF14EF07EEC62F6CCE1A
2ED96EFAD0CCE878AF9550D6F769068B96F1F79C28F62341C980265570A421E0
4B977EA37095115A42EC0C968532544D7689FEBCB22AABC061D79F0DF17F1F22
D2EF282DB77CD65C9473CD1525498212267B1B8436828581523B2BF02A3F2457
D29F60C81A0EC37E4E13AE9E67FE5A0C285FDA50E924B2B713B1F5D4887F9CEF
156BEC782E4464483D4BD9A0170CC19568A0E08CE6352CB79629CB55B5916FDA
5683D7B5695918C2B3C3AAE308E7750D8A435526E1483D943BDDD48FB454DB18
E3762A109DA8B55B59D66B682FC8663358A8B205832879EEEBA63035395B7118
82A239685716F6A646D2CFFCAAB29CCA2414C2B1A4CFBC835A7B36589B1EB891
7C8718C79D4A7A57109B072B256753ECE1346D9B7024B16905787306805DEE62
2F4D0B4AD4AC692DE4508481B52D49C5508F0ADAFFA72527A156F7C472F9C416
B942A4849D90C1F11B41DCF411F24040250662BFFECC9C5FA90E139303924B24
267C1357E414584DFAEC37FF325DB3F5F52C4500CDDF5BACCB90673A73051FEB
ABDEEB26ED3AA9BAF76DBFB5783DB3C0F6D60E34BE594B65D76F69B97CBD0AD5
633645F38705A9B01BC869FDBC4831EF0C4D13F35F0508D0717C6BF111019F85
69BC340140B1EAA2A01683443D3BD01B2CFE3765B28DD1210D26014CDA35ABE5
0F73FD23CAE96C94B20AE2F1D147AAB602E9889CA3D19FF4CA74B31EF41D3CE5
47C09DFD50B9BEA18D947C7C5B8CC83A3D0946E1CA8433C899EFF83A2BA99A7A
B77F5732465393A7DEB7DA08B3012A99FB2FC7F6FF7AE574FCF1BD15F19CBCE5
F93259A6C4A8CAD50B9186BF1467D89E7783C7AAB8029B889562D1C9B79325BD
873AED42BDF8E0C8B7CC60EDD2F27E9517F6DBF60DD648A764BF8A97218CBA86
DC8B9DFDD6E40CC6D9AEDD701FF0D0FD867B45211AFFC99BC0615FADB1F0876B
750657977FAB1B2EAF490A8ED6384B821717860BBB643DD10E8CEC75C373E010
6DB6CF97066AF9A730E2CB0E054CD9313F951788E90D5ED9EC12A48A3B435F51
F5FA7F361A73429F8CE61A0B5CE4C0F54C84EAF17034BC949604D635C05B8F13
1A6D08A31D0797C7D0DF1D6D88ADC4FF697C5CC5E3C0AFF25CDAD43BEC7AAED1
F6BAD964197FDC6B98368416B3A0886EC6B9E88EEF2F9405E6DA8139686D99F9
DBEDCDD8F6C7C11A67ABEBED27BAC915531365E910E3F2AF249FFC0D17C74291
4ABDAB4067827128BDBFFA31C0CDEBE3557E030E80566D7EBB1AB78761E98C5F
989E6A366A45877CF940CF7F2831B6BE9D16367A5FAB1D14D281D3E8D09DC525
FAB244552034256EEFE521828F2729A2542C2F3E67AB887A11A6C08FE92F1F58
911BB81CF4FFBFD327C91A22220206E1DC5AEB1BC7925907B6F56AC72BF7055B
D880293ECA9472064BAFB367CE721AA7E007308E26B18D9D762B25E4A5045B46
492709A16604EFC734CB56A0800FAE7F4A952FFB9CA59D0C63DCCFD3D9B0BD93
71C203B20436B7C1FA8BB22A41B8FFC32C2E51F16327DCA1903A7216A3CE3B85
04B8F773438CDF8944DD5A06657E9F6F53AE8D121AE0137A1E8C4EFBBD17B443
D261AD6D0BD332EFBED44A2D79E0C24CA1D7B59B7607279862E419B5ED5627C1
6FC00FB367EAAE845C1C417FA85B362EADF479F5C27BAC92012DD11D42387EB4
A72707B9A2573E1AADF374AD12C745D41C4804AF31AB83EAEDA618C70F735DF7
46994341A3782A1FE044675B4A4C1292728C3946B7BC590B9C68F20BF5985F45
FEF4FE164145DB590234C925F46434F4A4B062EB578D6BBB964126A0AD71CB6D
47D00934680A5C213BB85B790650C4BAC3490528087EC5D2BC8AC8A81C388F8F
FFD6F25940A99C5F69A66B896BB4085EAD5A9939640EF9C73792C70CB60FEC3D
1E720D0310689896458492E900EA7CB05020832A84C6582F7E93E957F940B3E5
20919C9284F51F927B4DEF6CE2FDD0986C7633CF5D3EE91CF5FDA380B78E6CBD
342E796FF285F008E8815DC181F7BCB30C2771CA3A7876B755536EE103CAEC81
5A720C780794868BC810611A53BFB72993B36E3217336A50E7120DD85CD392BE
9867F3B6901294A6FA251F64B7353A6EBFF04C43B57EBCCAB15E072F4D80E6FA
1492BDE59F46CA026F44D242E8514CD779900A4156930785F1BD24B442988AE5
DF7F1260A6F118E90B180B45D06B34D1A0C76B930E62B8E5D4B615BFF6772188
3BB28036B423DDD83402E6073E1A93234CABD947AB86DA17E070DC8FCED3EFBF
938293FEF7E667094888C4727B20698DA61FCA95096D0F9C1791942E5C788F6B
E145A78E25B291463F6C816EDF34C32385E6E5F2187A7D59F417FF75B197069E
2037B767C320ECB039BE37F91A5B33BE3FC5F4EC2E50653ACB1404BF8C06C015
8FA83F954A0BED1DB3E986D7C33A66F7CACDC223B51CD8F6B4444CD39D18A81F
7389174FA7AE91130A2D853851765C6282B203C55279B6772C50BDCD60535A71
9B9B930FEAFD3F50C191A39BA398B920B5D47DFD658FB1973A8ED50261C3F715
DBFBF74F8D9FB26081616877A717E0332371EC80036A221820B70DBFE0883EFB
121BD9D49943F0A89C4DF01C4362BAD6263A1C57F21D3FD5B3ECD2378122B12C
4369CA7A65DCD0B5D513206C6ABE2806625983BF9A50166DE101F3706775C980
079A0DD5F6B4D02249ECD629B79902AF65C81B10FE7E5D122BA60A249D1C5A41
FAE81432D665B5B8849DE0FEA828FA67DB3EB41625631EFD5331DA305533A704
AB666AAD73125C996DBC93E567A5F60AA9787258DD6A2900B4FADFD9404521E7
1582420863FD8149768B1F5361652EF9C258E227111315BD9302D385CCE22225
8081F9A178E391F32585469293F06BE7DF76703FB9AD27CE94923992A30262BF
266D739481A52BD241B0B56000F6AADAED36504819060C15FB4C50121FD25F52
B908195E66A07602D43D8E2B08A047836943862ECDB7739F5930CC35B771B73E
08F61C68B7E0C119180F77A69EFFD33636EB8F8E88B258034538DF9F6503A01F
0F0E2BB3DD76493F28D1583CBCDCF3322C771FF1D559BBD41DD32565819BD0AC
535E1E9C0C6F6D07C23167C9D62E35F4315D432DAEC057851C1872B4349B1CBF
E585BE89C02B3E8BF033BC52BEC486AD9986BB21A4A2FC74E645DCE876E505CC
49E26A369F322D548B2F808196DFD6BCFACAB91CE492B753BB8CDE8CB21FF113
9DF53A0289F09B1945A7BBA58BC3B2045AE1A7549B3315C01FEBCF273DAE91E9
9437739054191373AFB7C1B047F608DBA22D398D21C8A49DC3D47666FA8A5A79
C98FC8DB07CFC2677DE18C43FAC309D8BB21F7E4ADFB179EA650B07509746FE1
B52480693D2A31EA67C18B2436CC31FD2FF1F6962B936DB6F0101A1B13DB5810
2BBACD7132392A26D507EB2C8C9F7A9C30E089FC67A61B588E609A8C87187446
6B6D188A85259E78839E3C2111A05D54224D20EFF6B580C0C92B8B574E6E1518
71C81C6032530C5ABE04CC1518498E78E4611EBC853FC5687089213C852CED06
4805BA604360ACCD622F9B0C79E46390FA50CA0574F9011B12FE84366D1B0035
1B2461B9639BA5FF140BAC5B0E1E8CADD44FB77D4863A208EA68DBEBE1BB1EE4
8276BA0EEF0EEB548CC76F7F10F773E5C185A9B240A3F38489DE88A85D9CCA3A
0BAF0FD57B1F1EA12E4DDAB8BB28CA09F34F1491EA63F7F8E3899B3EC7A3FE1A
CE3251A3A5088AE90F18D9E74D27D31446C40630AA3468BF59654EF4B9D64883
A1885904B8EE3CF5A18655059E481B63BC12FA0B07863344F9E8CA05171181FE
33C5BF16E7850F3ED9C1CA775903072E91870E475D8C958BF3DC19F3A767DEB2
811C6E3FDE8C338D7478F50B78BE3D338C5D1915037B1940775B3186A168229F
A0A2886F22EF9F502E29D70849EC66B5803EAF74920BAFB83ADD184E20D82656
0DE1C21C71D06480300243676E295D632B5AD57D93C1F83DD63C7FBCC8DCBC80
97D2CB3FB4B0B40F07527361E042230372C58E985DBD0BA8AD6FF6BB7AFBC358
8DDC68082FFE9C853E324C32DF766C2C01AD1AB2CAC16654D891C813D8D147FF
77EE7FF50258C22B3B446EC58BF68F98FE5FDF0F2E182F35F9A5B2F6BEF9ACEF
222AA8F6488C0E67B4D3F1E0C1CCB5B692B64C3AC6D5C14695E3D1C7685EA633
BED41F7D3AA0050916123B6077E176C7B0334EDB2207807AE2894D4651A4144B
800C30F81D42D726776985E3C1AEE26403DAE626F59FE39673AAA00B56BC1E3D
FBBAB7DEC3C80D38EDB17C3FF2C1B9B9B53E7C8BBB1D4EB378C269880A45A990
2AE7DAA5B68637694572436CB294E9511AA1C5143ACF4B406CCC0E89E90EF9EE
2FD01189123154027096FBAEDA8E5FD90AF4E07C64F540C267B5129FE286C344
A06830ED7DFD9E83ADA56B9267D74808F2141119CCCEB011E44FE2830853CF6C
14476ECCD904738132F439F3A47C63E4670B9126191501D213F4818548B1FA39
77B678720072C9478B62AD1B25827BAD315ADCB83D2E687C2857BD7A78B8659D
DC04138D0B7AD02B0C5BE960B0260135795733E26D854A3449E16CEA63255591
690BCFC066B7C9E9249BCDB1AF189101F0249884351D7DE22E59629D3C27E102
CD274183DF2514A334B0195F64242395E6C8CD7E86E2EC42B88CF418BD6E69BF
ACBAA995F3190708E9E7588DF0FF94DD8FBEA123B06B98D994E8652BE13754AD
F9504A521AACDA15AD1B0C7534D8F5E132C4455CB0F6BEFB14F43B6C8DD7C696
16952258C041A5F545103B18EDED6D49526008334261A606EB7C2DF1C9691325
F92A22E601DB60E82A60F78AFE513D316BB53E61DEE1F603DBB8A2482F2E48AA
56435AD64CE927905A2114088942AA19E01E3698B212B248DC02CE796384A40D
80A3EA084F877C300B71F8EB6031C106D8F7707FF7981CF48B2E43E871652622
0C539F31EC8F750C70A660274E7F18534B1FB71CEF375711AAAC0605132BCF77
1BB339AEB2867E58F5F620B5C81F9E588B1241EF7A195D47476EE30AEDC76FDE
A5D0DA3FF05779B454738DEAFCB76329798FD26CD774574D56FB9441BA3366C2
943FF2E6D9EE79419B09C474EA0A3B6C501A79BAD116F9EF85420218A678AEB0
A83E6D0A56CE8C9BB1216EDA7BC3B60A3F1CF9A969DC83D04D3090C1DF8152EC
5DD89072F6A6702A3F8052FCCB2996F5EAB4E7DB69B9C0FF78FC63EEF9CDFE92
AF96F46412F078D28CDA1B4566AE512BDF034F19AE1990A56FEC69DB4972380B
5FA591A3CCBBE97BF27DF0A0FF30B352408840F04B38B80BE0E2D23740505013
84E311B03130ACA988DDB89C79F6C79E74122913B1D686BCDDD9A8B42E7EE4BC
55CB4AED49FB660F1C994EE6B64CD190A4AF3020CADA01E0369D2D7AD4C0FF70
0A4000F55726805ADAEF2A3A3F1ACF1658A4F492C82E2E000835A8390A89534B
0F213D1B3D46E21AD4096442ED747D44127AFA2D6F51B6C4B5A95CD2D0A4D9C1
35F283C50EAD944D14687230B6C63D14EE297FDCF91289926AAEF8D9B559945A
C9356E8B02BEB1C03D42260C66F81A0567560FF860E93186364DA79B91D8CC2D
796BA6CA1B93446502534C04352071925E5961C6DC35CE74202619CB1DA9169E
B8426EDEFF197A472CA203093F1F5865E4D164580E66347ECAB4DC4F6314E626
380030A1FFB0825F8F01B296A0D55F84091EC208C957467139DB4F96FC1D7A02
43F2B12B7F0A7792005DB0188337029363D843DEA19B2369C36BCC862F2C9362
414E03C62506857AD2972F629275BB5CF093CACF5D2DAA5BA737DD56022420DC
7340301A2EC85DDBAF4AEE00D3ACADB9B4D564DF72E77140021453F05EE4C8F4
E598604D5656FA072A48DFB9BCDAF4332F40BB58082D8709E1A6BEB0D6F6D683
5200C3DF0A9C4D40B4A83CBA96458ACF3181D09FF51FE03F4E0F69DCB2CD10A6
E3532F63C155323E31B1C4C366992D71A4CECDA566581A80C509C13DDBBF015B
785E0181B2739105A6A1A8DC37C40B2D402166A88A96F394A6F8914D1CBE85BA
B8BE37567C82F9E4382C53BC91788B59B150A4E363EAE84F7DECC0ED311152B6
CAC49E7B468AB8CFC6B1282A2347582771699B4E575768270D8E0423AEFD1C41
C02C33635ADD8E05CEE4C1BBFC1EB2852173E51E7F6731AE05BD768DE2F0D51A
AA0EDF0A7BB68C422EED68E3FE8DF2D56D65B794DAF6065D9CDCA0DFB52BBA5F
6B97CD698C8BB8B3066A1BC7012A77062A688F15CC9103489028199351AA806E
C48E988169BAF03640405CDA2E4BD29F41FEFD11DD5B3C05558CC6AE1AA69C76
044BE840111DA7EC468B50FB7B8B7EBDBF018D1FAC744BD311D4D8AB6821661D
E6B83FDE58CC791A3B7F65F8A0F7F2F22DD3C44C6BAD6D33038E15BE5CDB5A65
E53613FAA8BA742F318C59CE58E26FD73C8593863B32E1675E0ED2F85BBB1CCF
A12F37371F6D17216756AC75CB0AA17B9FCA0E7AC07299DB8123162ED86ADBAC
5FAC3A5A47785EFBCD40FBEC70D872E4731A2C9ADFA4E38CD9561475F75F161C
AA700C54F6F72A580BD83FBAD812737265BA6623D781375EB5AA3E4F9C33946F
36BB7EB23003304996C1D58909ED7D743BAF8461CF8972F61E7F6222B45303E2
49533C4D000C8C1749794FE0E051D195044B5AEBAC10DD319909C050FEBEEE46
8D69C4F0B3B45C1A5FD20A778682785D31C0F841215B0491263395E38309CE77
BB2F87D9A1B24BB21E0265D00BCB756AF52F2C21C7591B1C8713C15F4C109EF6
8077E0118B0B970212BFDF410AE900D27409C774A0B8572E31D553069D3F4E5B
4CAC67F13A5E08E085CE257F3F4BC51421B788A882ADBDEA3F4081C1D6AAD4A8
494E0E4790A6CB6C92A76CC53E0FA37CA5FDF7912054FAFBE254FA9788FCE841
CC6B969441CD0E8F935EC8BBFBB71AE71A47B92BAAFBB3110DF0B008F86911D2
1B82D80455FA377DFA6880F571F001E0232E6BCDC6E5810685139BA34D45FDA9
9F2C5C6FA0AF805E36FB783A63D4FB03BD7A95A17B215BD753DD92DC4DB9C86E
20FD07CFA7384438A454AB5D18C53458EBFD486B272F5AE9C8DCB83E5C5BD96D
BDF701249D88206EC6CFD9A27568678A92097E036530AEC1F6281A69A6999DF9
69FC09CF117063B514A149AE0478BAED092D90F598DF499365AA8F7E2913AD6E
53C105A39F037847817B56BF7DB93B5121E6B6FA1E8D57C6DD3D8D738DC30844
54167F878BA62911E4CC50A6C881F64251F50FB89382F41CCB19A5BF51AB5FE0
6CA654AA4124D577D7CB46F4669D84C572A31709BECC1BF4EE9E83354B5AD14C
A33D1704063ABB2A88D7E593BC8D4C911E347E0BA499D011AE794C1693DA25D9
B6A2A5795E0E00E996E77EBDACA83860A9DE3174752E58C0F0EDAC7231BAA719
B927313D9A157834F81E358C3A00F729531539F66199EB76513A247BC759EB8F
0282F50FD1EB256873B87BF4F4C0F54982728447415EA849C868AA2FDB9A09A7
3F6B2DDED14A5D4CB35977391085142B757F28E2A9B800166E14E40BC55A1683
B55369C649E41396557E69D539FC9EA8D1EEFA7D520B9D6231CC32EB1F591787
99E5485AF6AE9F37A4585C53A1DB398BB48B650057A964DCB4791D5345A9CFE8
0CCD8AA79D1AE8AAD71E908F4E89E6AE2B2E1505F616B772B39C0726355FC6C2
8ED655DBFC243A95E1FA9D9206571044170C49CBFB2D6338C9A10FAEE6A3B5D8
D3B14647F69BBBCF10132A214B85D77EA7DDFA9D0009A60B34BE011CF6439CE1
899D6ACF13E84F5E68212A69A2B88C0D835A6687F79A2B9A33075C796B8E4542
29682C7DF6DD248F11680D4F332500A3C88DDBD2EAB071468F34098F08DF2AA6
972D975C4062BCE582EC7D99457042ADD3B5629BD1A63098438B55438915A494
90DC21916D4B09AF0BD0F773BFAF04EDDA69FE4606851EDB26C8DE52B16493E9
849967F12EFD3464A8A351C558B09E203E80CA06441AD000620B24E1823B5C71
288B0163AFEDD1670CCDB8B3BF1057473E5090E9836CF0D816B46E67DE848590
BCA5AB349F2728A185E5512687713E2263895DCA80082748B0246F8FEF294D20
431AC16A60ED5BD483F09D3CFB7E312BC705702DBD26C251EFD8F71ED92080FB
A5C7FFA422F37122E8DD18D8C29CA8B7B45950BBC9B914500933415BF6024176
D587B0E0AFC4DC6D1368AE0B393BFD7165B87F47612C3A5E3E5D0033A02F8FF8
843D4F5B5EF1F8F845D6FF245D28E838B25199A38EC5A9D375E1521E79B6B4D7
02B22AF2A316937AA16052C40C65F3C8E2EABC5D9C212506A7EB6B1EC40CFC26
78F6C692589CD0E742D50E4CD5E6064CB6C08D38911A7698F2E5221256982813
23C7EB5A6AB631BFDFF1FA13C0F3183D9BD3AB292B44E25ED88B3348C8EE4E0B
1A60291840DE9F3FB913A89E63BFFADE5458B6B57BAF002E5D298A7B03D37162
CFEF07F93366082BE41247E1CF0544DE68A461A7A7E724340F70242660978B3E
A77434030942FD4BF1A1A43105912A55FF38BF4D0C7713F4E0BCDBA7900FE6A0
79258E79E11282116319E08005FEADA11CAE0764D6935D7D087B732F9B9A78A6
2E91CF16DF9BB8AB01BE36A32DEC56214A86A5A8DD71E2D6D3A194ECD06CA3E4
D0D6CC2B361C24CDA49188EB79814BBB42C804030FA7F81EA9592C871F85C40B
748CD22DCBDE6472AD5BE5544D58EFE36E85865BAB3EE606E76394E7345BBA21
3B3DF67CE3D2B40CEA98086306A7C405F573818BF0A17F8BB9B757B1700380CE
C4AEA9AEAAEEE151DA9F664698240BEB2B017C9C4F396F3316D958869D22368D
A1DC8A1C98D3F4AC43A71727D1461C6FCB64E02908CFB74BE3F316DB36B9E40B
BBCA4E10C1F02879C7067C17CF4AAB88392AA0D275802369D1C9BFB609A4A940
02BD3E2FF6EDD18691D443DA48BDD87DC466D24A8334D7D587687F09BBF49AE5
0AA9B0E9C87095358C4784344E0D5527BF0DFB737D20E60B05B105EBEB7AD425
DB9581817001D68A74D3D9022A255357AC4416F5BC349FE74A9DCB4B58EC5EC3
963A69A0DFA8D1709A5BA1CAD6624694FA37985FCAA7DDCB468FA02040FD8002
15086C7AAF8CC22D71972AA11637A1555922E8C95A65F8FABF39FD53A5411A67
724D44FCF409A54B1966357EC71F
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman17-Regular
%!PS-AdobeFont-1.0: LMRoman17-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 805 195 0
%%EndComments
FontDirectory/LMRoman17-Regular known{/LMRoman17-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman17-Regular)readonly def
/FamilyName(LMRoman17)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -252 def
/UnderlineThickness 60 def
end readonly def
/FontName /LMRoman17-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-400 -286 1338 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105D56139855A7DFCE26D44F42E43DCD4B09BCB2
C0B13FCCF45D66724D4F9BD1AE3C5DACA322D5F106264D18B14EA595343FCFF2
E1123332F6D493151CBB41DFD055E2CD496D222EF41B4531A6CF94D6BB6825C2
1FAB496F22FD3B47B1E926B9B05CBAE6422EBBCEC149FC0C70F6F86A0F810CDA
0AFDCB50F75368AC58AE244325EB6CA36EE300BA83D807CAED125E3B16569E7D
1AA186346F4F62D8BF78541FD9DE8C6F961A6753785923F4F221656FE25458D5
0A9808613A1EC6942E9B97B18F0E235388746DDFB04A5234ADAA9F2B59A2B48C
0C094FA865AEF464EFE617DB7A93BB5C2F57C77326A329B432A6BB3AE294D926
7D1EF387E9DD04FFC10FDE445DC4ADFE15D2BC0BFD34906D473A59603FB41480
D35869D2D71EB1F97B5CC81BCDC2ABB45437BCB13EFE608A1DBF25BF03B63C27
CF678B3ABF5C53DBFB7F3E4AF705F3518F7B3682A0C50B4F026D3AD818ECEB10
ECEA905FD14A5D0D09B7B38A3238990CD98B0256D11DC6907857007F39B09C8B
9EEE545A072FE5A265C9EDF7CED499645D848821594918F4F56B9D154A316567
BD9A2462398F07C1CD521F9F3DC87C721A67F56D69470FD29CF72CF5DBC7AFE7
C602AD7D27CCD4689F232657467C14A5FF7F7D1BAEEE4E303119C510A0B277CF
F068B7F4B6EC64A5D969993146E720A1EA0524D58468F113D6E65D18FC32F4C3
90363D9FE4273E24589ADB87E3094725B46F7273BF66A03998BD0D14E16A1B78
96474EFFA7572D9D2E0EB393022F3E8341FD99DC0382C7972E10609B64468C85
4DED836B378EC22C47D64389EC39A4F9559CEBE3FAF93BB8E469C01434A269BD
92AACB6C24C5C93C36059974A75F1CDC349CFC145EBC13857CE69AD4F14FBF35
AE0E25E3A1B65947D70FFEB85C9253075B5D04025AE0344EF76894B658A64DB1
299509A1E7F6F61659F406C52B44259FB9B1C3B24665009041CFE641946FC93F
1206E30F2B6DC521CBD682353A3CCC0584935A33180B0AED5971251EEBE74E7A
1D47BAFD381CFF055DDC227A42A80C74C503851F015D1F6C4F5A6FCF0C7E4C04
1B33E88B6A61F9066CC86DCE69FBFC2E22DC8C38AB822AB24B303768DBDC2306
F0F4CD8882D55FDE1F82292CA07F3948B726E9D3DC6F3AA19E84C1152F2319B3
D635AACF51D523D11106BDC615F56B32D2B9FB28B1B953E256891ABBAB7980B1
B1B4711FB26D09C83B0870C5C0F3F1C293BBF681F43E8C4790E17923AC043C62
27E1D03B98C42383BF31B68F6A6309C9BC0128D3AAE7AB25DF8A37E992D8580F
F57E5ED0D3627BDB1261AFD0FE88F2DC4358905CADECFF5045C4FDDF40FE6D22
505EC7C1DEB88CA5BE13F85373A8733F9645BDF78DA021349902332707106BBB
5D307960EC877CD90434D2C6361B3B701689825428B9A87CE293212EB34AFB74
F13954B882D400597DA6B584E6F943FA81D96085CF2D85B1CE6F12840B521DA3
2596763BDCB4C75CCFCD3782A699B8F4E78BC30354529BEA522BBC4C2B563E0C
72CDD85AD2871FF6E171ABF32B81FE5A36FE45E57BD5CE0C7A57713AF055C0A0
F972EDA846AF0FEA6F7664923CF9E8C2DAB8CFB4A81105CF903ADD50592B708E
B41E3E01F5978AA3DD52017F42DD2416870588344D7AF34CE6BC647478C7F346
027BCDF84370CB2812E8DF9C6EF0F015C8184493FC6CD5402DB809496CF89ABD
F642D9E191449727385DBF150971CAD60E3554F65A2BDBE86729B498D74CE84D
0C38AF1B39B5E51F4E99EE0680E1FC189374FFDED237E623426B8ACF22ACE55E
EEC49C84617536A690E3CABE20D702EDAD43518F2EE72DC455BFC6F0C337A74C
B75F7B420657E6012DA8F7EEA4D9DBB0066B051DD9E902E81F262602C9D87938
B75EF25CA5711D0C1D877583370318746A27283D70A4C54A03AFD78BF4868035
D3D6878F70D749016797FB13F82CA5B543B9F395508FF98E3410ADA67D0353AF
45A7908C912521569844012BABB5ADF93891FC191896A756EBC3A3C0A2010896
63D101BAC1D91114CC7163FC4B6CBBBCA4367803AEC14367C0AE98F43E185C1A
854C0F84A25F7DA6404DCE156C876E12918275E17D92E35971B27D34B280B335
AD80453B44C4C1C9FBEDD37190D83A01C80C7E195EEDF6CA42F8B32E1766E716
E46F966E27AEB8BD7964F3C11A2EFD5F17BFFC6694B05AAD23C399FC3DEC552C
5AB80BF40359767B2BB6B15B87259D35AA0847B7E9A4E1D5C3FED9F2798B38A9
67F5370037C7CA528CB3B9A5AC0245FB4B4704B41697716DBA03B23D85CC8B70
1EAA654C5EE74F40D47701BD9A578AA45A71F49C3A2EF3D7FC39994B39353749
801BF7518806C6D295955BB71395C43390497BB399DA6C5AE56D1DFF2174A3FA
5068AE889B84F158C745AA649B9388B791AAC5166338114EFE0E855081307EB3
5E06463312D48584EA1598B47E90268D1737B9129973FE3E492016FA5C52E992
0B3939DD7709712F227AB3A481B5B76ACD2D176FE7587CC217F9F56D9AC7D989
9CD1C8BBB6BE999AC3384E76924D0A6D9D67A72BBDC61A3889CBC27A6CC70C03
D0F641ADAB81415E7C1D5CBB3A4F47906A09156C93994992C526DCA77E8C2CDE
C5653D9C26CE526905718DDD07C6D4A6345D6AFED8EB3CDE280D8103C72CB4F3
111D1B8697A03C2377D779DA1F0DE6FC09910A13B23860D75CE7490F871BF400
F4C41EF7E166A381E75A9E731920A41B3D6A9BEC2D99F63085D96828F42155F6
C8C1C851620A4D308ECECEE20AD96793284647ABF2CB166513EBB224A3CB3F59
C1311A1A7B1350FE59D7CB6F5FAAC6FFB6AD97711CF73D6D62F638CD7508D0EA
D76F750D5623EB7D6A90860842964426D9E506537B3F8B42B77DC0DF9E4ADEA8
5D9F8C77DFB4AC7ED4A60011BB79C029FB2DA7C9803DD7A0DD88F0C6F1CD390F
5DBCCBE024C3AF660DAAC64156BCB30481EB8D0920E6FE055108F038CFAC465E
3F5A680FF04FBBE50C195D05105CCE495AE3EC6EE9C4FADAA72FC2C4A95C05ED
BCF4206663C717536ACC410871C952C783144C5420435EF5914825ABDB71FAAD
B45F85B90C026CCE185EAB042C318363FF20B5A0762A4A9A546A212DB60D5242
F1AF51FF07C966B61B01180333ECCD5B3FE94019AE5F5006B526AD5D4999C58A
8A322A1480BDC6E00A033F1DAB34185C68A03BAB8BE3D59EB3A023876736CD1F
5405629408224D070207499DF2F43E7D52E442ECFD5724EA4468506521BD15E0
2CB2F4E5B602F55216B8C7D6BF5C653FFC1EFEF8C0967AD886D051CE75BD5033
442D89735D609CB0F6C0971EC9C5875A3B85B4B544323CC083D9D5F0CC23C749
3D971C8AD739BCED38F67E16AC8F8976E9DD1178ED7A8ED2A9A049F8D3453658
8A4234FC70CC583D630C563D9C33FCE5BF73D9C2B05BE64CE29BC8EAD802C6D3
1D9AA6D82DC64E4CC8B4F73C93175D5B7E994B723070FEDE72B8140D574EEFEE
804E31EC370C0D2C2B558C491BC0A19EE5C0A1742A6A9837B3E5A830E9148B0D
998702E6ABCBA4838258D452E73137400A142A7644F56B21B1EFDAA5BD4F7059
552906D8AE6D719EE45655F1358FF0229FD08DFC5122B438A5A890C479F86CD5
3E8CC9DE6B2DDB148E81B1F6B9E2BCCCB223F173BD86C842D1C9ED10B006C949
8D723A652E5102B01F5FB9CA6867E652C67ECEFA041D118A8AF9FA790C503696
5090789D4F09309A682485948E7DAD0AA6E838D5A0C2E786EE6B4293F66525C3
5B175B14EB0D5D70532852C4733623491D66248801FA6BF5A380F7E284024B48
0E431BFC32AD6FFF7054156B23DCF787582709775477B23AB62F13004BC7009F
6F9153C982B9EB2736D453D66E3EAD617C93F431708EC73B069110D2452AACF6
3BFC4A5D0243083FF2EAE5FD07096CBAE3DA56F5B6CE1FBD5C2A43529A894801
E7A40A0152093E834FC1F528AE69C8454E5D0DA0864C03E230290370856A89FA
8D56529F252E7CC538FD5C16C1E1417E02C197B010E49F7B468D51C05113E4D3
01BF146F398B9FE829119A4ACEED02EBA65E3D0C38F20F49283090CA40AC9B21
0DDEFF02379B2BECB9C6441AFF488EBB29B293905951355C4D4A4F65BF1A7296
156D0735CAD73632F8EE970DC0EBA43D2C700A1D5DF964133F9C47E58A0E5014
E9C2670788FA0F0A5CB370D3C759CE994AD4BD0065D122E44FFE52EEFF539E3E
F0C9D002B6D812D8E1177725E4F0DDEE18080D23859E7381178FFB0C8BB5E7D0
A50B33234AF28E55765856F9C5D2F75B457F222918FACD5EFEF326E367B7ECF5
DFE24CC25C68433C0C11E5B9A2CB4F876881AAD188D821D2C11F22B55A2857D3
0D257A6FC4EEA42D8E323BFA60B94D20CB0CB8C0D4B64A6799C8449E97E13CA0
AAAB196E899B128F490EC502908EC4853FCE7AC34FAA127A4CC963053FABF1E9
B1553BC56666646FB94D3EAD77C5E883525A472B33FCC33D67A75F80431D059B
F7D7804181BAA23DEE632E97CA65D1D2BE3644E84A35070D8E8B67E27C184AD2
94847E27B311C9F0CB6AC63BBCC0E1BC5DE74D411127B61F029D08D9A281520C
4A3B4127C06741F0F15244F5647C4B7D10A12937EA59229885DE2FF1F9AAE22E
5BE224C2C68C1A85D18199E0C313BF1E3064C18D2BB16CD746AB60D080D6169F
4E074CE9936241784D731C0055D930E9021BEA3D463E8FA8B45EA921B9FED123
0C0CC26F336551A6836C0430A946C0D864190CE11362E7C6306AEB0DCF37DFE3
C79EDBE00878008538C79938E1DE968F90A32C4175B6BFB279024EAE1B04D721
A6C5468613AB5978361D83B9D6C514372866A572B31491F9BBAF24B83BF61981
7A00CFE9FC5B0A0FDF982B147D2293FE66B9D23E40724FA9C3DCE3C2B9DED6CD
9D11622AF857F5EE3FBB56EA0B1727F613AB4DC69658C53EFDA87DAD91FDBD70
F729D915BC8C6A5199EE7BF0DBCE700723B3A016FD14F0C92F0870054818B7AB
421E6C1383C1F00E1916AECAC39144DC9332AB0C22D462865A8315C984A98272
D9586113BBDECEDB4192AE9991497A922907E5375D7856FA2C8C10F6B6CF8089
8FAB4BADFEE9ED03070642E0BC3624493ED50AB68A0B22A779D7D816629D1D07
75C5C1747D467FB498E88120CCCAF6A701DAC4FE7E2AC7CD93D622144EB55301
F2903EA442CE7C35FCE0A00A95FC45EF437AC7DCBB01FB056C2B3A50DBAA4E7C
F1DB27202E6C382CF8541FF7E243AA7F16F534CB8E4EEFFE6A51962459E5DEFA
0B5F0BD018CE255720FD7AE5A184F69020F0544340C3B4C147A3CA6B939B4B19
E81AB2267EF5DA256CB6706525A3FD5B096B2E77E6A66024E938C98A01B89454
D9CFA08690CDF7574095F57BB3750B358CA2598CC7670A7727DBE62414E31BB8
13F06C4EA7D30D985F89A459C6EB24A9BD700BECF6B88D1F1B7778AAC2A52F76
4BCF5800CAAF2AD0A2765EE6EDD840B30EC2026ADAED535A8E130B46D3C97F4D
E0BF14EF07EEC073BB1AE37BD4586C793B4E7904D23627E2FA765DA5E79824AB
F6A4CF72D34197A027D5E17294BC39F53DD1E74E3689125BC27FB4A991C45634
B477D3BB3732E514A38F170698545847359558542A92D1957A9655B657066AD3
09B3C4E44D55AAB8FA8635C06B486739CE5265CE4655E2E06CE9466B313B6255
925F7C908937E3BF94DB3249C482580E6E4EA1764D3860EB4F1C99EEB8731408
AD8AC843239F322B3428E32E833FD988D566417E5C380DFC9D83598FBA5FE616
E33EA2F454625BE4B1D174ACB33A783F7B3A279F3291925B9A3579ED72125D63
88D072B9836278E938D44472C1F01883D05533EFBDACB6C76281873180E6B558
4FA1EE0C760AC0168ADAE8A1716BC8DD5B951D247C5A2E208983DF2BD52684E1
125277241AD1AB978BA11CE54869E036D6FD235FB2A7463F97E3663C5106F30E
E2F085B06BFE3AE025A0542F0D7F681BF747C5E8B2EC957EA523BD60F37EE285
7AFEC47E25004A1BF667F875B4722D0D4A5D123AA93B983AA070D345E643358D
D50B45FC867C26294EE34062E3B392D2CD3151B4FBDBCEB0C201C64F56CF4AAE
64E1F2AA294C0071881EE3C4991C4113C42430FA02F1E90315965D9823C359AF
D5003547D36E0DA51E215709FF69322D42C893A3086D6B8BE52B95ECCF029A6B
18A512D30CEB0B6ADF80FDB38668EA8D7E1ADA023B8D0506D824D250AC3F036B
F57FF45CBEC411EEBD07899B755DAC1126CE5CF71C5BCB87E73204CD30889F57
5471AA6CF5F9D27AAEAD9CEFB95A4F5DE8171F1DBAA1D9E95DDA35726C129799
1B5D00B5087BC06D801AA613EF09BCB258EAEB5620FCF9193D5FE50212866BA7
ED46F2B0994068C2F9F083F990F21EB8F45FE997780F5BE7AEDBB1E59C200B6C
19D8F511D5B35FA1BDFD83F4E6FB7C769819702617D08C10F4DC9C7CDDEE5BDA
3F3F384215CE8E236E7B83CA8B33865EE37411860F6F26C51D0AD9C7ED1DD3C5
52753211F538CCA42045617BFC36D07E89110A0E44CFA2460615EB10B76E6CB3
66569FE04F95E458E1D4DD1D38766B6AFBCF3CF98BBFC9439A37411A466AF67E
5372FE007CDC6DD09BAB7ED72F0059E35DFEF5A8F444C41D300E540D53723B01
BB2ECB46344523714CE9C02A06D93CA8594725A42E6F8FB879E1A1C18C8CF9E9
5991FD555A215C21DC2E82F22AF08D9D387798ADEEAA19C84EA3105EEE9257AC
0769E61479CD3A02BE03C555B0808D40B953D2EC5687657583A89AED1519C678
F6A234933BD95DFE8C18DF4A3CC05906F008EC7289246D873BD543684D927C59
7918FB08475E7C1D5CBB3A4F47906A09156C93994992C526D8658B537F6AAA59
C5CF7954D408A67824D6DE27B03FF85794996477A763C3178F38BB3685144A0D
49172E098A71F5BC511CAB6DABDC2EC9F4D778E7384A27AE6A8DDB998290592C
909431AACCECB4A68860482B626C62849BBC0FEED34039982ED5E5664949215B
7B7C699903F93AB5406CD529CF49A29030D28090CA803D774C5E1D01DC2632B6
B55069644487B786A6AA482D8919918AFF871539A99C72207BC789EEC011E3B2
9A07F16CFCD9CF65ABB4471D8B7790DFD1FC31D5878E3D6536EA9B9EA11DD392
7D262F0FC065D56EB983207F1478ABCD112D3ACD5B443DCB4C01188769448044
8013E594FDC7C0D4075CF053906E10A3F76B65763C33A249C23C8616B866CC56
DBD91956887D508BCF6743C363A295839A2006DECA4E41CDE5CE3F7250608058
EF90ACC54A90659DD7AF69B2FEC7382D88609728B4DAB8CAC5EBDC7F940047AD
1108ACE82F71C6B0B117AA039E23F4CFC91B0A48553A7A28D73B8B0AAD1BBEED
508E7E03D41B3D060A92B19584078745D87E05182EAB8A2552D56AA3C47CCD8C
1D6E639E747EDCDE31676E57E765AC6CB4C052198E87F09476ECDDF3DAE361EC
EA4E7DDD253666AA024FFA986DDF098E443AE6B8905961E7C6928B4A4802EE34
0B1BE67048A14BB368A2DFE5DE21E630125AE03ABBA75B3C5272D5BBD6122275
9A2B9606E8E074B6742A1847C136340CD545E40C1A28AD30F9BDE4FC610FCA4F
49C23F47B451FAB68F1EFDEAE0707C84B81117A339F4D40486DB6C6A534EACCE
768714D7438B6DF16809B6B6F4378FA178457216D5970A9D31E24C6025FC3BCD
69EE2BF54696702561220EFBB6F0D7F17F9CB1AECA4A690320680FE9588ADA79
1282032FBD32128E00ABB95BFD07F9BCA9D7C4EE7EACBAE53EF06B3E0EC4585E
AE181A1D04DE5CF5F14377D75506A96CE8CAA906707D4050015C93B8A7F9FDBA
B914EE33DB14A06C4AA3DD235D36BBD540E737EAE242036E4AA12201F1E40E6E
ED9D20E96364B1D0C5DB3674314AF80AE4C160EDD64BED64FFDDC683B50F16A3
AACED2042AFB7CBB198E933CFCDDCC723A92C5D81B3B8D5E7BD3C814E17BE89F
6BB305E2111EC5326DCD0180A8F14FBC5B5194C679D6D490CBF46A09BAE5AF23
34D5F766F52626B6321B47340CD27160927CFF10954D7ABDFD2A4E3D180A2E96
02DB0BF0F83B4EB5D4796E42FB7053D4CD9FEEB842D90AFBB64649D0F9F9C71B
704E84B1CA62896E1FA498AB5D10CCA936D0011C53E7B33D5B50ED7BF3F41289
F48E38A86C774D7FFBB977A8CDB82BDDAED09691A6FCD3FA6F52BD9A0594D1CD
925DDCC2EC217BECF37587795A42C7CA6283AF59375E5857479642EF670263A7
6E5B77BD00E35D9A4E479C21D6A7DA9D6B0B4FF494C2668BB227421B0F0ABC7C
44086BC9088D84F77D0BA3F6A345EEB4F9996D8EC97E89ED5CD37A5D14188AA6
79C8D06FE44D94748BF2A360A33A473E6D63D300577B2C99A5F45D08CA186EC8
3AFCFCF697DCC8808A931CB62997E29B687D542170488C33BA78DF24F73468F2
6A22DC8A72A7D7641E6267148F48ABF20439F99A193C9C5DBF6619FADFF828D9
BA688F6A47030FB1A945F7660FD332EFEB44D3903FFD37E0BF9115CE2FE02D8A
3FA89D5FE94322F40C2ED5F9D247F0E3DE8233436A38D5E1CDB7938BB0160A35
2490B6CCE0AE7D124F5547EE4C5B2F9B67A3E37543607554F1F1B427784EFB36
6CBFF1CD7CD5FE30C976EB10C38C8C46EA13A422242C6813C8DA8719978649D9
A1335995707E49C90F72B9C5942F03F06D97312E5E034FEB45E9425DBEF58388
7879AD93C362A3795DC3B3B1285D1EDA04B7D11568CC271208DE70870D9405DE
37871241EF7A195D4747C9FFDD581537610B95B6F15CDFA0566AF29195C653FA
085F712258B8A1B9AABFC2729E3D9C3668A71EA6E3A508B70E113C92688F8ECD
1936FFB72E03A05ED59A723EA87D7B7EC6CAEB5D464B4959B75C1A20FC3A54B3
0B97E23CD3030B8255F7C59CBAD75F0A910BAD5709B63FAB599B648BD3538B5E
D209E9A3DBDC17A5FFAF17078CC55DE418D9573497D3911E909B3E961D9D7417
03E35DF0172349D6FE770FD2E54062399179E939E8E50F7BE4118ECC2CC40F69
1AE9748ED1E27E4DF116E24E0B2C3DACF2BB4D4F11C5FE4243E79F2F830F708F
56A8327BB7FA5CC1E56949F31D5077D68D216DBCBB8F3C63EC967AB33A8BA1A9
7F7FBF66B794348EF19B47E871B05E8ADA834E775AD6948BE41E7CE0E0B26208
9EFBECCA2B2664527B384EB259A7B19DC09BC1A092DC3E43432CB3F9B7DF88E2
8C60B0640FE67FE79867A5AC5B5FCF3A211021A15A328C151D5598D5C198E019
EA478C1605A709DB9A94BC08D61C1A6E98311D9C323086B238FD671281BA0E03
59BEC6878587031174CF58DE4D538E4FF8BD62AE25DE20A0745D88EDAB8F6002
20C5F488A11DF9E9251C0554FA532AE3CF6B4CC492907A08A39BBE63FA0DF799
46504B5DD7292B4C730C54CB803E57281C8D4157305A78A5E7DF61F9DC5015F8
9B130F1904E1EC8C2EF8E5F422C31A65013C8296EE6A6005DC74C05B74F52324
8B1E8A05F9174F51D45EB4EDF6B28945446B78E89DD66F9EEEF258E53D698E3F
2B7FA8438C5D1BE8EC6C778353C94B5495C92DAEC28588C1823028655EC499EB
5D0F829D89390D703AF1711C21699DEBED4CDBD1AA1493A3CB561652DBCBCF97
785515A78B7A516FB08484D515C0D9BC826EFCDB25CC23092555066FBEA1C28C
C24CE9E9CA5619AA7464211B4E23A6D022E70C71AA8D81C733BA78C0DEB8D1A2
C9BF7CFAF3F6C87DC13F6C3A1DCCF42389A260FB4BDF2F5BBADBD746080EC4DC
1DDEFB3CE2A36D9ED09C845DC23AB5F12FF470C77195F3E95CC117E21AA4E3A4
2C7E69DA6CEBD01779B1CAF241E51F352F5ACF474B8D104A5677B231727E89E2
D901F1E31DC3AD15631556A6C760A49679FEF8377A07C38062796AA4E86A0917
C4EEF9B96EC85F7F61CC55FC045E1326B7A7A5FE7216BCE081EF42F0846374B5
0FFEEE5D8A6B538B4F5CB6DA9FA3FFBB481C9AFF1455A0361F58F04B3BF096B2
74A94FCD5719F163517FB66E333A2EEE1D0A668FF731A43F7E85F640CFA5E7F8
BDC7A645FAFF1C2D98511AC43F3A71CB424C72AF75C1818F6A1EEB0953165349
CA83A68837067805FAB4B56970CD156D1758DF7147B9234FDAEBF07631833BD2
0F64E6705635DA7521A0554EA68CD2276F23985B0041C332096ED812E1D3FB5B
856A8C34BC6B1DFBB5E5E0FD6150E4A8F794825AC8AEF37D9872B22CD19ABFFC
0468B2D448A840F3F6FAB1AE30C228F2115C76EF1ACD02C1501537F65F5D53D3
9E004F55F754A8E2469082BBCCC3E63B027A4C37D3C26F9DE29DFCAC798130C0
CE5C49E1C5FB11EEEDDE90F3BBDFED56FA3AE38C1C5EFDF898216CE35B7CF75A
844E8BE3F89199BF4F71E1F6FBE8788FF95705DAB0FB61C8E728711255AD5797
D4267092C026DC41AFE6EFF1A18B100E7419E54BDC64C410EBA4FD22C67D7C3A
F716ABE3C82D606AB2BCD7AB93A8795AA46773CFDEA40371B88923AC76A1F343
BB3E1061CF4DCFCFD87D706A30858F8E16F95C6A212208CDE1635F4E5271224C
C19B6D40490C4AEBB699ADD32B4688C2AA21BE4F05093DB8CAC2DA0ADDC872F7
5A1B652F87AF1E35CE918A420AB2971088FA80E1D535150A6AB248EC5920D02B
5F0678DC863D2D477A7CA919EB41D7E8BC0BD4D3EA61170F94D3DF367E4A54CD
981E2769F4330825CB3CE8C359C97FF1C861A8A2FC24C9A2C7BDA35775E82F7A
255D99F0E55E52989447DA28411430C42A3D1366F57F0124EE7C8370B7AF18C3
7C93E29D4217A1FA558FEFF0485CAF90627DC9C15A66DEF81BFFC8BF877A4E05
68DA9A798F7F062708C1E7FE63249BFACA0785AA219F85DC4E78C139FF3A8FB3
18B840CC0C6940EE386D68EC1320F9B4B7A60D26292B68345351F930853B1D8F
89835127E6D5BE96DA47CE4982AA835685DEEB3A875061DCE8B6953A8DB701BF
7A8F9FA524989F106D85DEA26E8593730FA3F6156B914FC7800A07FB786ABB0F
9A79907A37B4A5F808BDAA3699013C0C486EACAACC508B9D267C79A916464780
75E259E910B356E8A92F9531A9E80120579A2560FDD25F5477D2A787515D2920
B002CD413F5F4F673D424112ED9EC737F78B840C6AB9269E1FFD3D6432231D47
B3729F7F9F81A9EF0CB2CD741475AE26EEDF1FA520CB01BFB6C1B68B53C7A85D
7F90D278D7151D59D40D28184F00034AF1BB3AA10289398BD3EB1798CB9C7C2E
4CD0585CCC85FE88775D7E605802D36527BB7C3758285B8940F89B5C7F350F94
FADC15213545D7EB212CD29841E176122E3D1E147BCCF5EDC5275EC13567DC75
F71C7B290BFCF9BAAB9BD03BCF07D050F04D4CA153663EFF8A63016F79C7D0E4
6F45AFDB4A9588B2A62F130235C0BAE2D41513B3EB2855E5A9E4027A59D6FA06
07168B4145A22A5CDCA376CD2F8E282A6239609D959B3A288AA3F5E6D1AB7F46
6603A1577132E35C90510B2EF00505D58569F35E0F24A385D6456B403551C0BF
FAFCE6B05E537144CA3F6E7E95841444BBE693904A72A20A1F7C70C68627A535
6470BDEF763A06915E595CFAA3E93280D983A4CA131B6EB15B4272FF91BA1BA0
D16FF764CAD09F99A6F73C71DC1C0D12DBB6CD1CB0F12CC3632AFDA9076C2B4D
0CA7D89ED2FD00D697EC8C302420214AF5A20DF60AA690D5D4A4573C0E0EE96A
D65A9A041BE6C4F8150C91B30C60AE2F9DC6766996D20438400E0E78630FD505
A174BEB44068BDD65E57193016C4CF81249AF3DD504B34BEBB4632F4D7E5BFF9
999DFFED7C736E945F8453ABBCA099EAE8CEA000F9FCEA99A24248C40C96332E
FF00FC6766383E542DF74C109161520C5D9CAED67D9869D7CC5684BE0ADB2847
36D0A22B80CB7737DE2537E7B54F5E1643E30046E876C90F7F579C8A4DD8D901
A5B598D721639E2A82FC866B6D4EF865FCFBE96EC4737CF89BD48165E45DC671
B524AAD46ED69EB52BC90411BD034E11E6B81735AB30E65E5F1D0053B7E9268C
F93B9763BA70C77A82B01C2B1746D4A925421169F7A21B75F34987BA586C6FF3
68ABDC4253942C1A342CC26D444F54CAFFB3C18BA66F9D093C3CFD24E96C095E
ED5449C6319F2DB9F1065F9997AC8864536746EE4A3F0349311B6AB1110FCF61
63A409D01F65FF10571013AB6B2BFB92089431CEE0931D3D2FB8641F9356D027
8D6F09B8DF311CD16B40EB4BE72BA1E3134B152D498892CE6941B16BB0012D51
524E0228494AE59146F3657D20899EE8C2CD56668F756DC5B9CF1C87BB99BD75
D38567245A095F8C91294627FFAFF0399CCEB87FA2F3313B6F0D8AD8488BFA8F
1FBA7A9E0ECB0CB937CC1A5E27D8FE5FE873E98EEF621E059DF969C14E19E1CA
844CB442931D89A2D64E9CEFFBF0E3792A219D478D915E24854460A9934BCAC7
6B5E9D25F7C24968B44D1B4A7AE877FC488E0908556D21F5AA813B81FFF08BD0
37AF37F613B2BB7E47EA7CF33DB12B22A894F8745D10026DBF525C5F190746E5
86B04C7AE2F0FBD79C74C36ADA948A430E0FF5C38EE0EF4E5A8928286996E809
9252953CC1DFADA08CAAC84AB583421E5C08469D8D97C2901498DFBB5B542A8D
06A25135505C220DD1A84EE4A8E900D673A168BF76B742AFC3A23E150839A965
4E8B6B79FB4098EF3DAEB47BF1CC0D4E406E63EC6F93991E948F1E6D7464430D
7FE36AA71D4111CB414AF4C3A1FF1DA06BDBD2C6689D34A4AFF927895017165A
F8F6B730EFCEA259263A917EA3055C85D171C0378299712D1177AA7469F34FED
62353B9A1D56DABD05371F9479BFA4CAEC5CBAAE93746792C972A3E0A898D5A8
6700DB90644A3A2A34D39A9485C33EE973E7CBECACEF5E50D132AAF7E7C32A95
7CBC6E5B01BEE566EFC53A6C0F546A7E2FA8A481581C49DAAFFFC0A69B14BBD0
09A0C0F023D4D6706CCC0542FC3C12E38D2D9487818C3A71F3F0142C0D2BA97A
AB26C3344B0E303F96F1A7DA6410CC5D3F84EC5C9F6156528918D3CF44630A28
5F751DAFEDC3E3D3D51F61AF2B10497D1C76B14667721A220ED3DAAF96F20E29
D2F08BB7DFBF22FD059C4858F97C79D08492ACE3AA3E3C9EF2EA2EFADAA45EAD
0AD822DC04982DCAD312CE4EBE815CD886BAC0E3C6C043C47CEB610EEB1C7C30
4449084A11FF9B4D84422EF7459DC1146671DB157C352CDFA1107C467ECCF768
EECF460CF82F033635EB5B3A4F7DF718E0EDCFE24E4CD8C6953A5C3B4BF27BA8
A317BA18287D2414B3B8BE183091AE4127B420B21393859EEDC1B145E236D83B
76887915A5D26105B85F6BB781408C91BCDB000CE5665A01A7EE18656AAC3D73
B851D54A2FA55862DD7E0E057B9356C1E1ED8B2C0334BE3D572A1C405E1F8660
922665249ADEFE783DC387F6033865E77FCB36CF08F1F8C834881B006328FB91
346098309C660D5004585BA3D7026ECCF26590A7894CA6F91AC2CF4A14206939
3592840B17F41B505FA0B5F906C537EFCDEE4C69AFFEF89A410812AC95DA0AEB
FEAD38B6016D9F92BAC170EF577E94ABFF557EFE61648E12A39638FB42AE591F
E504A2614073EAED1AA2DC43E40AA823E706B59A366BC76F01E5C9AB43904B9B
CD593D8D88008E689AA26AC22DD822E30B1E423AB5921DE8EAC56ADB58FB18C2
7A41CE503CA97900EA4F039C49B39B0B7A38F24A31CF2BBE8A4A77DF816FD63D
5B8B42C34172C5F5B536F44B4F3452249DA320C80A317BB545FCF1D4CC29C833
2F46F00388F75E67DCD058B3A634F3FF7824578BA0079ADAAA937D6625C4C42E
A9DC9B110374E5CAA61221CB271314CCED8FF73FA6CCBF53511D26FE98C66E17
C49C6AC5B8EBC8C27117BC2A39CFEAED6935F88625620CE2D7C64250A8F2D0FD
2802C715CBD1BA0B0C2EF1860C2894497D79F8509C58D81964CB5483D7F51523
208644416D6FA5F5C34F34EDDDEBA19308E83F0FA487B7233DC677AD402B32E7
99CC64C0F48922899CB1E7D70F650E6471E5408C44554E774157C6213212E127
B968C9D09176613CDBBF70DD3492BD2380D82DE4420F29C0EC1F76DA6C55089A
F3D95E3CB0B2DAF3EC66FA0B727FC6AE134C01819BE812383107C2AC37A95839
A181E6E55835DA3E81C8846980EC5C13D8276C895B9329DF559EE4F73496FDD2
B58F8B140D40F2C1BF5D498496818C244467171449C73BABBAB53F4D8054371B
D3F69A70793D051FFF5B94C59304876FAEF4524652233B804496666ADAA0D84B
BC6A705A9C77B527B62791601FA203AE3415AEEA37E86909CDFD42FEB80EE7AD
6148C0798ECEBC9EC234234A21E0DB20718EAA7A28C10DC3D3C5CD3B5E0513A5
40D0C7575D56000265B0438D3B68A5BAFCB4F1BBB90BC96AA1876AC4F908AE01
D2753FAB7DAC397C6B87F9890C273FF8D268877C3A3EAA29F97C90CE6BB80786
4506F89517C383DB4B9D2BB42FE85974E8A3ACAA54356EB2F96D302EF8913C6B
B60EEAAFD9500D776DBF675838C2E27A9A1C75D9786FB52F7E9649A066060746
C0A627E366A2FD240E5FE5C96CCE3911A159D900FF96495BB9B54ED7A963CA76
25C148E028FF5D91D34C4348889EABA9149FB3F8A0EE2B513332889348136367
10D9ED94A70C0FB7BE007E12DBE00E975B4D6D92C536995B673E238559E26F46
8737E17BAD7FDF6312C503A95B3A733E367E50FAA92A5996F8CD290241967099
2AAAF45866D8D63736A1E7496C76AE7950F5F41AAD65E327533BC1A3EEF5BB21
06F16DD0043E90AD6D818BA68094FA7E0D033E338E149518B5493D7E35055F89
C5450E68DDC518F5DEC9963D8500CB57D81CFED36562ED1441166D7781D4D80C
42DF15FA0C223FEB058F6034FCD51D6CF5DC1E2B1CED5D9B69ABB3746877771D
1E5331AF98893672C3DEF7A733E839622CCF93615936A2B66A555A6111439A38
CF68242C0EECAFBA6BDEA59BA99795D080DF8A78969FF3C08562DE4012BAEF33
DC76E364FDF75E42189D550A9F9807D58480946C9E0ED10134C287A115FD9FEF
3D177FAA08B4EE28BE2C5BEF083F69CAB19862BC10FECE4321EAB5005525342C
7441E2612E432ADF6C0B8DC625164B44742676C8A12E7009F4D7559CBBD728D3
FDB15075E1A6F45197571530C9B48983CEEFA244AC1D2C3E28B6F4DAFE97712E
8EA0BF223323C30169E448D8C68F2FF41CF32DEB3845E3F381D2CF500781EB89
75DEDEE759A2BBCA40C811B9D857CF8E5105EB4B1D8B7790DFD1FC31D5878E3D
6536EA9B9EA11DD623A964F877396BA83809446DD699668F9CB76B73BB62E422
1B22ADA57600D753A9E426992ED6BC8BEFEEAD4AD763CBD44517068178925302
C10D5F14CE4CE1D9FB37FBC2C420B24FF1AF1BCB4107958F7BA5DF0E28C3DC39
392E7D1DAF8473EE2767CB54BCC2EDF8E29F24577C83D6EE64B09E9191559979
90277E415BCB9C0DF2342B777AC9F09AC718F307E80B29885BD8B971C8670EB6
567D6B66A0539A035AE3749991DEA439FBF139A16A55342B5B37F5D7E61A400B
DCD15EADBEDE3875523CDFFF0F388173761F45FE977A7D2251773B691B2D79E5
7EEE781251C63C02EBB7C59A47E26416D0C02BCC703B3D6E178D1FDD6EBBBAED
8A49B82FF79AC6EB0B36E2F4794FF8D4884BD261FFA8DD0BED83D99CD39BE14C
09475F81CDC1787F5EA3761048D41BF8E781D1C617F53A74E2D3C6B60A194F6F
4D640FF94A0B0B027E483F9ABD1188942CDAF3E17BB26D54A79EF7185729FB95
162847620F355DF9D2CE729DE1346341E3F251815769B230842A3D61C78C722C
ECCF92599EFAE822D4A177BD5CF4F36C2AB8D494600932CC36A7FFB12F2C8EA3
99F5B8013486E63805C21CB3D29B3D6A0508F7C936125DDF4B6D79703CA2EA9C
5C1F60773049295392D4BCA495F47685FF21F36251BEDC64C80B22E64B313882
26B5C052471F24909E5601B1EE0BAA39D610AD4D7A1CC4D12AEA15B928B2F78D
B6B6101FCEFBB990105C1DED1E18B1755EDCEBE41A6528A4B928D90B304D98D7
5C70732886EFF4E22AAF594FAFA54925D9EAC45AC7D42782421D7028420F0A11
6296B8848F95BD5C16E7C3081360CCA5AA4930D43C04A454C2D971C2B22CDB96
A25ED403ABCA3F1BB14DECFB18E5B966BD5E6513FC15FDF323A7899A1BA694A3
20774FC7703008A401CB9F0590AB44141EAE0E171B748D0E32EFC307AB4D8F76
2EC507A3BA71D96F18FC65FC73BC484C694BD8B52B85222C6861BDBCCBF5B17A
A9F218A80D732FA7B7F8A832F00F18F5E9B669ADC7CE66F042F7A5179B58A4D4
9938F495AC07199FA85267A621E6CEC165897D8B62331E39FE966AC1214E4DA3
0F2D2AC515EEAC8E07552BCAC20F9EF9B7CB7F1D174B2E94953F541C3B84D436
83C455BA5E53124F7FC666801C182AF99D4A8A3DEAE7AB6E256FCBDC8CABB912
0CB6FE9C2A2F5E9385BA8C8D9B4BEEC1DDC7AE6E801DED28998CA418C4D0FAA3
6EB26D32D54070C80AF82DC8CCC76C007B90466167D1AB71004ABBB7D252F285
4291E6187C1796B0B28917D4D32AA5DDEA57F8154C88A985B0E0E306B0F9CF07
D37C22976A38ED8EE2895A696AAEF0EB67902FA53D9E8BCF2B588819229DD993
D11E519F94F7427E6E8B27F236199CB2EDAF69968073AD979877DCDA412F6357
3818F678B246276CCED7EE928D24ADD7FF8D9918C339A8E8B41383615A202712
CDE44538376F3F6DE9B58E8220749D58D4254AFA739A9E747AD286D01FD254E8
3FBDE2731167C1133114789FD4BBE40DF2F03232480D73FE00AF577494DB270D
E102840E68ACF691393E6A3ADF983C19E99524F69FA1DBDA97D6000031341B9D
F942E732F5332C61623B6F562ABB1116532AD67AEFE0758C051241E301C7E13A
885D08CF057ECDBAD28147DAC67EB875748BAE25E195254E82736DC4BE1F33A0
DB7564F06C5C56B8921F9AA94A25527C571FB8C8F0B22A44422DA26B2CD8383F
01F258A9B94A561A27AD01529568B09F87E6E5EF8C4B87001F4DF541A8F1F996
A065CCE5565818DF45A2F5F4C9192898213D61F5CEBD8E6B852A957303D15E04
19210A9100AB9D2A396CBE10EC4678F7BB5A2F7660F486B4AB2ACDDCDDDF5D17
4C37E6C12049EF027DFFC661C95624E7B97CD9EBFBA41D134498BD007085A909
4AF7404F43B51530D2EEB30616FB394E56435D65D7E4872B62BFE9AFC2EA6788
0C44700ECCD60ECA8E70AF36F6C36C892C790377A634F66CE3E88D4ECA89C657
58520C434F65A0EF3B575960E66E9FF4935D54BC20ED3F90905788CEA450619E
78AB817CC1097F6A0635F4D60C3D5A5D5AA54D4566C36A1DE47C68FE248CF8B1
0C93E10CD365F8760F56AE0C7ADB804C1AE47888512022C7472D099067C0370C
2481BA831B897D27CB94D65A70D8C19065AF06AB7366022DF4B2F53E2568DC26
87AC83CD0E7A647DF75DCA7A29DD9B5F708CC45D2E6696823CFD6D6A468B619A
D3AF5B7DC71A5D18161CDCF14D1B6EB5360E58023D3CA9AB5BC5974E5A74A983
660248B114A31DD9EBF91A1F63B7AFEDB574D2687CED6E30AC81F9D33CEBA648
69B9F4ED56C6C5CFA68B814B94B7BE0A5F2700200C0ACBD5FDAD9448B616C1A2
AC048C04EC131FAFFAE026DA4338FB27A18C3E1F59CD60632250018126907755
DFADF923F763A8F3E79EACD5C3AE21E8E0E5DD110CC15CDFE91A4647903661FD
CE35099B7A551426924B52369C509E5FB21AE5D265328127073C86CA4417FD29
EDE46D5C971797C62154E0B91E21B23D56938C29C20088BC9539B713B7A306CF
B0EE6DF4945D18B4BD9D818B4B857846B3C7035707FC8D084E2930D5D19861AF
FEAB00F3A47CD3913262E41410C10BCE2BB88A61F32D29C66E2B74D0EEBB3BD3
8EA919E13F1DDEF3F42DDA6982FA7330F64DB72EEF450A8D72ED24DA692B7FBD
F1C861AA181C464A29DEBAFFCE3ED0882584192D2E39A4F1BDADF9A834A3B0F6
4592C48CA5FD859EAADAA9F0B3363576CD1D4DAB0F4FD5F09069DA6E0ED16D2A
CFC90A1ED23A88CF1DEE3F583DC78DFD9C0CFFC7B4CDCBB6A5CE017AA860B96C
A41C168548C4533BFDCD3B4334B5A2C6FEA57D502900BF0A746626F07510347D
5DB73EDD88CF1F509275F93E6877A38BAD6901F542E3C1AE1072C736778FD2E7
09307FBE1D7A2A7A3C67ECABA12E7468C92E745DF14AD3B9C8482D3D9A0E7D9D
5A64F962A4FBF0641F79AEB279BDFE396B98B1BC0BF5BA78923313A7A320CC8F
2E52BB0A8E8A7216C37FA27D38503DE800EED4DCB43B0B1969A53C181C52D9DC
D913B7E675F99E6BD165B9C6A43EC3CA9EB3F9CC21013C0AFF3FE2D6E482EB87
350926910860A95DE4100D2A9BA91245634ADD1846EB8213E9FA165AD7C08FBF
E6E729430FD6CC4C6DA654AA4124D577D774A217D4897A2610171048C7E2AF82
ABBF59E7E01EB6A7FBA4F7E2CB0727559A415CF40F411EE46E679F57A19EB61F
1CA27ECB4E79155AE13E82878404BE7530ED3C037A517E7F4D92C7AB7BDAF1F6
D6B2EC17F6A56159ED98B450806EC9100A418C8F279FF13B59146290F93ECFEC
B61EF3CCD54EF04CCBF6FB81141EE28F85BA1F7AB065887E9843C88D65C4202B
805E88E285F2C0A8BA491E295A0B4FB2B338D158335D75F06B228F4F9372AE39
C6351DA941CFA4DE01874F78BB69ED2F34326E1DA81158B4B10F408C2144A74B
7BD4BEF90FEA6B4931219560B55FB02BE7AB442AA4B07A8B48F7E4D1145CFB12
B870CD5E15CB2104827B60B86EDFE9A595ED91541B4442D2CB212FF2983C3FFA
0E9045AB023E047EAB4365220A465914BD17456E8AEED7CF4C31FDA73EF6DC37
34B2D7D777131619AD3A45F6089A425F30DEEF5E1A8ABDD5E34F9A6FF3905545
47263F60381EED4B36B3D0F2C4A31B85751B41F348377A602A2D5CEE4A409E83
188D1E6A42BDA29CBE661AD52A63710E4F7D1BD8857EC3B61259D7E882568588
B9A6F0330D35F65509BDD99A537F5C969C472B62CA26EA8970DCA4F35C139CBA
BD4FFCF1E22866AEF2231E35FDA9067DECAA8D338283FA0AD9DA6CAB8EAECF8D
E193CD5E42769D1F86F927B9752A982E8E455B1405BEC3985E55187DF09674F3
543D152FA48646FEE4C0C270B8EDB75006C63E5E050DC74E113823FA24570789
9842A93DB63DDAC655DF507602C2EDDF4D830E11A3CE65CA7FF0392165EC7291
B58E38925ED19C3D6D268F0BAA73CA527A678277BF3A052CA3956ED5D0EDC23C
0D079C3FD91F8E67C55404B3F39EB115D73DB4C5385E0608D805F7432E14B64E
B4B27B64CB3D441080491BB0C567B17E1E0B3EDC325FEDD473DE05BEC1641627
3841D87218C21F110ECD864BED08172CD2FFCE07920717F4269FF064FD5860CB
7395E9E82A72B555195782AF38E2BF641D1830C90DA512ED7FC137FDED291610
9C7F4D320AD50A74931D8B8A74C985CE0BF610D1CAE14C5CB0FF527E74F97642
8692801BB997531A09A5EE3696777612E6C3EBA20AC324DEB56545A36667C09B
F321D3C6E1B19B20AC9A3E1BA1D49D6BF824AE56BA0FDFF1E76B74CEF2C452CA
230A1EB00790C8757649996DB26A6F5886A43625C6A60E77A37D5DF5E34A8D3E
45FA5C4C71AE88CB1F10D0DD754C5FD1B4ED4DAE187BF5CEA6A56152914D7C02
5FC91EB9F482ECA32B7F700FAB750E41B77997BB57C3923321C9D354EDF7160A
4F83D0D961AFC767E7024AE30751F349735B6CF0B83F9223A872333FA09E9272
AC6E10BD85898AE491E532D889286C3BC2D58E281A672CE9703F8A049F057F15
2366C8C4A8E8D927ECD3B5E0320C672715B6FCCE554A4654E252D2AB5429BF76
E1A7D08ABCA4443ABFF10E7248E99873A424C98F8E905C9CF80FC724E5A519BB
D1CB9B4DEE941EBE1E65D96A80F79FDE63FC7D2A4A9E536F5E34C5E0F0327884
D3C7467A1518C785B910C2EF00C3C19554E0C1894D59BE9861C19C847C6570BF
3D596828FD59741103B93FD5A2C2EFF099B23E07B2FDCF939A8A23B94DAEDEF3
4C234321748B36895DDD4920FD19CBBDC732400082CD52DC4F978BE757E7FBD2
E70035946C6E3002646FCD01738AACB9AD52BCD0D7F80C58AFA94041A69E4805
ECCE506F008FE43CD00F524410486634605FB2DC8090F2CD4669680E1BB64E75
84D169559BD4B457703BF4E4998623C743B746D0EA5D767DDA36A2DDEB99B3CA
1433C12DE93D9505C3A8C165EDB7954B1372B3E243283120869ACDBDE44243FF
6DEFAC2D1D406394EA9A858B4C25B3F33573DADB4F4D3D14FCAC2F901852DDBA
339D2011E40DFA6488B25F2C516C6CDC83E5B6A4F40A7C7E8852DC6035789523
BB1BADC966829374E4CA55CC716EECC2792D7F981236E31F14BC8FA2BC3BAAD1
62DEA2677D429024FC0900215EC34D0BDA6BDD5326FE66ECCCCC22EE7F2C0E43
35502C2819D626576715E6B577374C6F891E9C1F63015A8035A9BF1DA3F83211
4E67896323A364BE139249749BEB8FADCFBBBBC2B889DC7CB30AEAFDDFCE7604
A504499BCF9017D11C9AA761F3C6F69BD096ED614F3F87793CA934F06A27C78C
5122CD9EC73E29A912F0E448B1E1B9EC45589B444FC797737012AAB970DBFD0D
E00C09300879A114B70CB4073D6CE990C326331F40C75AA07B50E43F7627C5EB
24D7FB946F1B8863495E16ABB38147C15A41B0F93E1B67D9FB5570173766E96D
696FDD9950F66F2080B8B67CA0A325577D6D28E51FD9C7E554B69AE6DF53C570
1140F5BD542C8C861805F75BE0CA58A6D7FCF9D079AFDE2CD2AD3F16CFE9FAEE
5DAF997842629A155A4C76D86C83882ED85FFB721A5FCBA3AC1C1F72EFCA04F5
426F7148BB8FA709AF1344271173529372A884DF1B8644456D6323286CEB879B
3BDB928141D3E54473B6331CD57E3C2B42F2B5A96FFBB94B086C7847400759F4
1303844285752BD61638AECE7EAEB36A070B07090E2F2AF28647D31AC19E6944
72A215D2F495D9F2B2A99906AEFC5579B8123C43E8AC022D2F38D2C47100AFC5
7FBB4A933F9098F173D8BFFFD3DB50BE815438A3C4684096DF30586958C707F0
205C3F9872476833B252DE2469113B05EEDB36ABF690B6551DE830F76DD45C1F
88BFFFCF7017D28C94EABA89EDA72DB06294512B2045D6C624EA6C98F92E3A81
C8BE23BEE4B7EFC230F62253BC1DC419BCE692F4342C634649B5A2CC15CE5859
6999BAD0DEA22AD76C569A88B18A048887EA4B1B7F9FC72F4C812439CDD1190F
7A75C9A5EE075A92BE631912C896CADD02BD24C7F758D813AB463ED0D6189174
AFD8842E3B21F7EB631D3DDB700FEB4BD8EC5818FA1227321DA96732EC3450BD
9DF36B50937356D2BCA1A8E6EF3C5A772C5BC288840D9217B0BB19653B9CE7A8
6A6666E25BAB5DB46CD7200BA3A9206F8B9161510B36B230EF3E93590FA68666
1BC23D492DB6B31D984F0072AA303D33D5478995B53381864D013B118EC24F8F
4074B96C17C6D3B1E5D72540938F54200F93A7EF9494E107235A45F9EAF54EEF
0B685A1A318FFD5676BC8C48F3EA9A604861BDF0BB7011FBEA53A14A905901A8
85B611744B36A8ABC80E5850F9C7257D07848C0F5AC9308B32343F2A9CC22EA7
D87E512F1249123729020A1FB4687EFA685543E21302A9E2117BCEDEC52A8436
EC3DC87A4D3FB3D3EA12EE51A708C6EA3EE3437FFE567CAFD946F2F4E01311B8
C2BCE3F1063E50BE9B61CF22AC76124A59410EF51880CA64BDC73AD1A8116BCB
7755619669CDD67A962902E689649E52F055CFE1597E7C8DCF990EFA4F3DBBA7
D50CC630F34913E51BF6ECC561320FF2076270A12EB5E218346529ADF1CE4B80
F163316944B90B26DC3A657B6E2F3D5434BEBD49909572B8B4FF0AB52055B2E6
6AB60048D2EFAC8D2CC0E2AD5C1144C7F8E92600D0BAA927ABC183A538251EE3
8E971646D9533BC0CCC8EBCEC593DCDB97D883FC8745C56A9DC307E128A76B25
716388C24A39C5E1B3C64C09BA94F473AA3A62D68785283B628CE960B8D969B2
680FA02E6C59CBBA937F516A1B75327AF1B9480289790692CF290CDAE87B801C
0C536C101AA0D77A3B65651CDF7003F09A4771E5CF76862F5AA7AE03545A732E
80276DC33FE94633BC3D109747E0911C7859CEB157765BAF324907C582598F67
90F69D1C986A64F25CE29C161D1DFED0AC2E7F9CC94D3224E75B5764B9DFAA97
EA454B7FA5E44312257AB2DF361B2AF95849F3AF9E42B66361134911C3F1DF3C
86D3D32879A5F548ECF75B9807C8A60296C5D0EDFDAD510D721956F7200EAE8F
93ED95AE429D7CCFA888E424B40537B7081C1E40433C3511F9C637E680F29327
6A0C03309EBD39951A398883FC919A711E8E891E44DF13083516551E7BDF1BFB
B7DCA007DBB44F3C4C46E3A146721C136745EEDD97DB9551B092C99FEB3435C4
D868CF7AA790BE70607DAED281098D3B9049E054532CED887D6650F69233DC41
378E582BF23B6091C89EC56409BD1594D5C162C6A1BD166B9B7FC308576FF1DF
CC4F8EAC2E2E1009A25160EA7C22DFBE511A32B3DD0BFF88C803B635BF3CBA3C
BEF49453CBDBFEED7D4FA7FBA53D05B1E203A0A2127751E81595BEB601A5205A
F33E1C34B285CDF947005615DD253A25BB9A0546118C9BB6E9CA78AFB3C7D87A
1C043EA1A419C3834B71619EB0636EF92E5D4E51D532F29BCDCF297DBDC351D1
90BFA2C1B80178081AFCD61C03E32FF1BAB880228DBE62EDD18DAC476DE8F8EC
DB944577917AD66EEC807CBE1B898832903CC74E05D7CD9D62CDB0E3B6438800
386490A8A577304663F5FA4B9CF430BC88CAECDC9049C07E649B1492730DB549
9E3027097569D8123C47C5661CCCBA123B2C56BCA4F1724FD3C64E1B66C755E5
512EEA2757F34ABA4E9168E7D3DD8A0047778F230F87EDC3A2249FE4068D529E
201B45DD4739C514452BA8381438DEEB728CC5B35F801620FA2EB8E25C29B363
96D1337C4EA424C5ED9F0ACEA68CA4C5FE0B0DAE30CDFE212AFC7128C270B7D3
8E51CC303F5861CCDA6E28C6BC729822962D39A30A3D5D4331979C914CDACD8E
52AC5C620329D96C037786FDA53FCACCB9944666479515F5C18FE13A98044F77
C9EF13C7B14A754FD0E07C68A90CED1B8FFA8B1F91DB49F181F0A15E0F04FD0D
8236E1A48B59132341CAEF0F022DD19B9B368B0C4FD93AAC08FE6DC9E503F6FD
F3D90D232B567830C7EEFF5F93E3AD16C3D11F468602B32E6EB0F0EC43C93445
93E34805056033BDEF236068B03655C718AB51DEA84219D7710CE3BF072B069B
0D6D365206D43C86F4FA49723381B62D0FCA874DB69953BDC54749A357A31564
AEB8D6502956CCAD812CDDCE62E56BBF35D257EAE99D627535F8E5ACB4A327B0
68492FEC6A122D532233D18D088E387D5D7D631B8EDD3815DCDC675CEC58EEB5
D5AE5274C223DF459A76B04D219321E41EA5FA846C05226796D86CF4415C5B76
22BA1DF296E51991008C03514B0F8F4C05D9FA435C61AC2AD452957EFA5E03C8
ABED884854242913773A08A21C297AE02B2539F6DACD88AD99A2B686FBEC34A6
F9E927931F630D98F44524D7CAA775E8F2529AE564B40249A7391DAAB3EC41E1
C8BBEAB138088F3E3123018D1A9540E2B629E2AF299C26DCD463072AF184A4C3
FF125A043F8AFEC9EFB184F8A92781EA228C2F15AD9AB1DA750462ABA1AC5DC3
11A762B8B785369B724520AC4D6A0088D2BC8CA8085F829B9F9E0B4E360140E2
EF8AE58083EF8A8C8C9B2131051DBED189118B9279A11243BF04609A48CC3972
EA65F147D6F231B46171E3CD218B1984C1E1D03D6A593D9EC54671BB40F92E9D
BE3E4A94A637148236556531BA6EC3FE217BE0B436583B1A0C883ECAADBFCF36
6596F5E3DC4BEC30136B8BBA284E1FB2A5A9D78DAC108CA1FF9400A3DE2CCD2A
72104CFFE8AF62A135EBC938BBD745F701B259F9C797559384A15DC4339208EB
DD9F27C3248B6BA76044B9B6CFABFB2565B4F238728C612172660B703C1E8A6D
D025E4E1192182DCBFA62874880ED7E4A83011132533954586E5840AD7C2888A
1B173D944F4DEE6485FC184E98ED8350CE2CA51ED191C856B6E4CAF82168A835
05F65C7712E2C2823903980506A9F523F673BA8CF49FF6291F37734DB93BAC55
016AE06595134739401B0D8ACDA774F6D16F997882FA2A418D110C85A089269E
DD6833F4E3D9D9020468EA77EE29E32F04AA6678579818D3B7D3B355E0A4CFB8
5AFD46ED46CCAD840106074F69AE7C306DCDAA9E2905B3C3A9161F68FC308ACD
0814D6E10BFBC61A405580C68F07CCB083F2445E82187139FBF00F1BD2F26D67
3538755F135C333B87D339E8C580C44EC9A7A435FE0858970DDBEBA58D71854A
BA6BABB05B04A44632D1E7DF50FBB44FF8C272FC1493F1A99DDB2E1FFE7A66B5
0A5A4A032CA6EE62D04B060453F94317D02D74E2C2592829C891F2FC0CDFB18D
8A4D2260DC93D7AC1107B43C5FCC608E913EE027C4A7E177C396385BFF862ACE
D7B96D7F226107EB7B31F81CF5A08D19B92EF0646D2E0763919D54550933FC4B
7290C8C71C097F48AB5C03B5D73482C49D6187C823F533087883A087234A8A27
F23E769D01210FE250E64C24A95C9342F0DCC0ADAC1448616111B40254B5D5B1
B6C459CD74B754A810AC81E5336F588D86AF3851887FDA4D03F83EDC6F2618FC
C7298239D111340D317A2CE6B61F2E522FBDF3F7D10C8785024E6C68289F38A2
D283BF456D5D8BFEEBCB5B69717F22A053553F6580F53F51C9B08071227756C4
EF1AE31F8C52ADB3858FC81C7A93EC9FC3BB5BDA3619E904570286AF4EC7CCD2
1EE48F9FC2C35D851EE98AD3863A0A6C40428D4BBB5F585AC27FC1CBB2D87BFD
031AFF7612DD60816E2C8902E471759DE406C018F9EE020A5F6C02176DF5BDEE
7EF0F091B2B4794752D7EE5D9B94524DF768ADA1333143DD5903762540856C95
81EE6076F3482F71DC669C165E81FE258589761269DE4E4E4F911E68000E98D0
AD8B7401BE51E7B3C0453409A7BE6F53829103F9CA4A8E80E4EE23AE4194F920
986C6CF3A993077C0B2501E3EB32F152BEA5A8612ECF952341E499800CF85B08
E39D32654E7432E18527EE89B1CD18CE8F6865BBEE2C50DB4510581A47585A47
36B1045640800B0984898282CB81A515C4597C601BDCF84562F77158BFBEAD3A
B69689DD72B498908BF3B1FA3743AB1774489E6AC37064B5113F915A757884C5
430CF379E657FF3FABB6D3F28ED73B010FA1B57B3B48AB7AB10734FA0475D4AA
4CCEA042816BA911D1CFFA37FF627F4756AFF88FF10A172C60310C10F8D7D139
0E6ACE54B7E7A9CF3D32E278603FDD8C754C62421E23F05440BE467933216C0A
17193F829547FBDB773C7059F77E4972EF4477EEB05A4AE105D57F922B7F2EB8
3CD82DBB324C90207B01A07539866A1DB7839361A4054B74319D9D4D6BB70222
413657113BCD97515C002FACD33BF71AB474614D9A42140FAE137A7F48B332D4
2E885B01DA4A94F447A97175E18373A7A108C2925DEC64A69F69C84B6C55AE73
4229625C964C5B35F141AB733C6514CA527546F0599F0977CFDFA594116E4FB1
CEC55985C69010D2DC807B6AA2AA2BBE06110745FF3797354857742938BB5079
02E7235609BDFBAD62ACEC039D3785A4AE06EDDA69B74D0767754DEA6F41B199
56444E02C19BA0C61113AB38B1C20D59F97D4DD6E50186F11C5AE99066788FE8
4E1E85CFE56E137BA47C2A14D106F55491D31DA2034B19EEDE88BB5EB10AE34D
D3AE61F254E93060B0B9CCCA501761022009926B5F55C9CB2855D5D04A870BF6
9B37AA1F2C7843A71A64C773142F47AA2F4DD211AA9D879E84D3ED2E8B205541
195129A01DF4507E086DBA07A0FA8E38ACEB99E18BD1B2662AB55A70BE52BF2C
5E660A8574725AC0CD59BF564010A948A5470915C184A55DA0BE7B50430E3800
9182BA284584520897A559760BAD9F95C4F6ADC601C09CDCC0262C6E8C4C3F2D
110110922BDF2E74519F043C7CD8FA2E6C749D88789C53BDB66CADD1BDED4F25
8F2DAC9F55447F8CC88BD98AFBA78E1887BB13D0DC1902B31D1DC2CF9C9DF2B0
7BBE613267D9CEB29539BDA71BBA7E79A8A11520BE2B47FA5C0CC4EEFE3967E0
AD6A928DC1107327442930180D8F7442B199DEDD64C1D02FD6CAB479A96522F9
4BE6EF7424B415B27680ED6E66CA870FD2E5B73A2B9239C9214A9F33F0CDED21
444EE372BF5BF6A254E117F204FDA7AFCFEEB14DC602F30BD7369462C49DAC63
48F6038DB853E16D9D0BA0F673CC433A2E3573F57CE1711A3DF8BEA491E71F4B
71945D3F0043F27F1E73B67016A5054E4FC14C9EEC7C566F007B48F2292FCD28
A4516DD5636B89D88EC56BBEF2B917A8E8E67A32425B32DB025CC660A9C5E728
711255AD5797D4267092C026DC41AFE6EFF4372A9F570C0B57ED78FE33164934
EAB70ED3852DB085F4274B739AC8595498140CB8C6350C36E0E9313F4B641C24
17395D5C288EDDDE2609D60C074E62FCDF8BE2A3EC9964127BC951DB04055489
DBA72C24342D68B5C88BC3F18F9E167389023CEBD2F0E3EB90F50FD11EAB33AA
A20A4D1A16AA5661B56674CB92335143E4E7CC7C7BA38E83282A6239609D959B
3A288AA3F5E6D1AB7F466607F8C98AA5CA60411CC615B9778A9B58A168969D01
842CDB0A68239972CCF3326488DDB3D5AF6B8285E4B468DD5F3D2F71E398A48E
5761D90AC1AE86E40B3070A8741E7FF2B40FD43949E07AA47353BD44058B8584
56FD04C21E446BF6EAAD2163B2871DDB76497570C90861F3ECFDCA4BD8A696A7
DC3322D57784BFA903DC5A829DB662C15587131861FE5B721D4F7B49FF9BB5AB
5DE2C3E4B7F90C9E77520327CCB89B0EB07AE1EC07FD93D19F9C0A6D80EB6938
28B188B8B8509B9A7C7C948E6E6E104A080E3EDCB3E3EF62F7F7E3780CF0258A
92F433D8A3E7CDB67A8CDDE23DC9E3DEF6471946061D0DB6701D0563A37D6017
27E1E7E81CDEC1DBA0B63403DB209B0E863AED10A772F2795EC4B6E52A7491F8
DE641E4DA4A575AEB7D0B6024C233FDC93CB79DD476026C29FA3779933221D8C
C7A3BD3D4640A35CF347DAD461CD6E48975500CB564A34B2E65F8D8C9D656A8C
E2C42D175C947839B18FB9A952C6C508C1F244549E4F5A3CBE75D90ACF584E6D
62FFA90EC770C2D32DDCF024DA25D4ADFF79DFA2CD93D0F65A6843E2B94717F1
535DABC24E0996BE7032BA42DE3379449B2FDF435F26C7813C464B9B9B156B1E
15A51DA1F814CD4A309335A32F54AF4C9488BCB16E4F1C872745E71727BB69D1
9BB41D3F75700C7014FE5C2D2355596BE0898BC929127D9FEAF904E91229A471
587EE841950DE1DE2507FC9871F39782A6B454893AC1B452B3BBBD7151BFB9AD
F6C85488C20F315AF2A375DD7E85D67CB62F2FC770A832755D6EA920D80C16DB
B1664917FA4C150148B91D8D9D892AA2C5EA2F2E095898FB0B0C649B25262CA5
57911A37A44228B2D8ACE8260804CDD64D311CD07C97D8E7E840839ED1AF3048
8219EF1E444EE2A889FDD61732065AB14A55811FA3BDAE9232882D1A5B12F15C
A11F8A57730FD8921A97684B4C661820BFB6CAE5E7143B0A368982C1D8E1F97E
47359BDB31341CC0E6B503C9704F28518FC3D903FBF3FC98EACFF9C77266204A
F421EB1032BC7BDEE5C4D3A8DC84D208EF05EEF47A90FA51DFBE72A6BCF6F925
6F0CA7FAB64AA53AEAF4DBDBF659005C165E418A4368480A6F5E41B00D21E63C
CD72056EFE8EACB0D2A015890DC0B54A67426993AC7D3386A884B8514769B7BF
958107F67D4B847E680F012A7D20E25222F8E1D5397A302C315663823E1CBB56
D935E9B6EEA30B7400EF841631AA553DDF57FC1829424F4F3473EA036B1EC6B7
B663AE404BA970079995F7DBD88C5BB26743FCFA5E3665E1C9A23BD060EE67F0
825993F3BBA6D5AB2723C9281309D608A8FB9A89276DCF2E30D8020DB157B926
65D2F48BFE234AA71901FC295A7C962810CB73D00736BBC943DFE5F2F81E762C
32002365670E8681C80D4BF00E32E1A9836DD4946BB0F8B90DC2B941959C8A6C
EECCE6196104D6D76E92E61490D2D6D9FD8820954C40D248B2DB8A0634C07449
36F9DB45E9CFF5B339803EABE7481606263ADCE792789D5B332BA02F2C494A77
7F25FCEA468F8E5B97310C3B65F3DA87344EA132FBDB24CECF9D4B4B5DC64E02
EFEE4D8519B3E340E8ADCCA9E4E7CBA4DE2CDBBE7A77342A5CDF3446AEE80D38
72A39C323F59DA6DD7B3AFB42FAF305CC7A1635CDBFCB6D486DDED3D2CCC61FF
9E06804CFAA93CC0F84E4F8C65F079CAD226EC7210D99F16ADC5E27F3A9742F8
C5D2AF2F4CB0421C9F3A172ABA62C303DC24CB4656AD4E5D2C9F7BE73579AADD
7B0DBDAA3AD20493F3861ECB09063D6D781911EBC3BDB996AA0EE61D15427A34
BC974477C01DF5065ABB0AC574CA66D49319437BE6DAE20FFA8229A00144D404
34D2C6361B3B70A4CEF1E414CBA1DC6D073C33115631B33488850B84F48C5AF5
89D7E094DA372A901275FE7EF1C0F25524338B8D978AE0B4635CE981262A6B56
215B780F3660290F660D40FB5D4CC3648CAF9126A920C2DF66060714A2BDE046
593ABA2A11A560A6D6F4454C60F97818BCB529F8A0910CCFCAA829AF4BC5F10A
0D9945C5C13A302681B44115B85C48944B7FEA4FDF7F006C0E0306D34F9F330F
E864277FF4709B82D4808353B1
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158274 55380987 1000 600 600
(Guia de trabajos practicos - Parte 1.dvi)
@start /Fa 100[154 155[{ enclmts1 ReEncodeFont }1 143.462
/LMRoman12-Bold rf /Fb 69[41 49[76 136[{ enclmts1 ReEncodeFont }2
99.6264 /LMRoman12-Regular rf /Fc 100[107 155[{ enclmts1 ReEncodeFont }
1 99.6264 /LMRoman12-Bold rf /Fd 141[46 2[56 4[34 31
3[51 1[50 29[74 11[56 56 56 56 56 56 56 56 56 56 48[{
 enclmec ReEncodeFont }17 99.6264 /LMRoman12-Bold rf
/Fe 139[63 64 66 2[81 90 3[49 45 3[74 1[72 29[106 1[117
9[81 81 81 81 81 81 81 81 81 81 48[{ enclmec ReEncodeFont }21
143.462 /LMRoman12-Bold rf /Ff 5[54 6[49 1[54 3[27 3[43
7[49 102[43 51 51 1[51 54 38 38 38 51 54 49 54 81 27
1[30 27 54 49 30 43 54 43 54 49 10[73 73 70 54 72 1[66
1[73 1[61 1[50 35 73 77 64 66 1[70 69 73 3[76 2[27 49
49 49 49 49 49 49 49 49 49 1[27 33 27 76 49 38 38 2[81
49 7[54 28[{ enclmec ReEncodeFont }69 99.6264 /LMRoman12-Regular
rf /Fg 133[52 62 3[65 2[46 2[59 65 98 3[33 7[59 14[86
3[88 3[60 18[59 4[59 59 59 3[33 44[{ enclmec ReEncodeFont }17
119.552 /LMRoman12-Regular rf /Fh 69[66 186[{ enclmts1 ReEncodeFont }1
172.188 /LMRoman17-Regular rf /Fi 171[115 88 117 1[108
124 119 3[81 56 3[108 1[115 113 119 15[79 7[61 61 40[{
 enclmec ReEncodeFont }15 172.188 /LMRoman17-Regular
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
-128 109 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -128 109 a -128 109 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -128 109 a -128 109
a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -128 109 a -128 109 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -128 109 a 0 TeXcolorgray 0 TeXcolorgray
1027 611 a Fi(TRABAJO)53 b(PRA)l(CTICO)1722 818 y(N)p
Fh(\272)g Fi(1)959 1026 y(\(EJER)l(CICIOS)g(BASICOS\))1538
1322 y Fg(Norman)37 b(R)m(uiz)1444 1555 y(Jan)m(uary)g(17,)h(2020)p
0 TeXcolorgray 1856 5956 a Ff(1)p 0 TeXcolorgray eop
end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray -128
-95 4016 5 v 0 TeXcolorgray -128 208 a Fe(Con)l(ten)l(ts)-128
427 y Fd(1)91 b(Ejercicio)37 b Fc(\233)p Fd(1)3190 b(3)-128
645 y(2)91 b(Ejercicio)37 b Fc(\233)p Fd(2)3190 b(4)-128
863 y(3)91 b(Ejercicio)37 b Fc(\233)p Fd(3)3190 b(5)-128
1081 y(4)91 b(Ejercicio)37 b Fc(\233)p Fd(4)3190 b(6)-128
1299 y(5)91 b(Ejercicio)37 b Fc(\233)p Fd(5)3190 b(7)-128
1517 y(6)91 b(Ejercicio)37 b Fc(\233)p Fd(6)3190 b(8)-128
1735 y(7)91 b(Ejercicio)37 b Fc(\233)p Fd(7)3190 b(9)-128
1953 y(8)91 b(Ejercicio)37 b Fc(\233)p Fd(8)3134 b(10)-128
2171 y(9)91 b(Ejercicio)37 b Fc(\233)p Fd(9)3134 b(11)-128
2389 y(10)35 b(Ejercicio)i Fc(\233)p Fd(10)3078 b(12)-128
2607 y(11)35 b(Ejercicio)i Fc(\233)p Fd(11)3078 b(13)-128
2825 y(12)35 b(Ejercicio)i Fc(\233)p Fd(12)3078 b(14)-128
3043 y(13)35 b(Ejercicio)i Fc(\233)p Fd(13)3078 b(15)-128
3260 y(14)35 b(Ejercicio)i Fc(\233)p Fd(14)3078 b(16)-128
3478 y(15)35 b(Ejercicio)i Fc(\233)p Fd(15)3078 b(17)p
0 TeXcolorgray -128 5836 V -128 5956 a Ff(Jan)m(uary)34
b(17,)e(2020)1255 b(2)1413 b(Norman)32 b(R)m(uiz)p 0
TeXcolorgray eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 TeXcolorgray 2080
-114 a Ff(T)-8 b(raba)s(jo)32 b(Practico)h(N)p Fb(\272)g
Ff(1)f(\(Ejercicios)i(Basicos\))p -128 -74 4016 5 v 0
TeXcolorgray -128 208 a Fe(1)162 b(Ejercicio)52 b Fa(\233)p
Fe(1)109 427 y Ff(Hacer)35 b(un)h(programa)f(que)h(p)s(ermita)g
(ingresar)g(dos)f(n)m(\372meros)i(p)s(or)e(teclado)h(y)f(que)i(luego)e
(calcule)i(y)-128 548 y(emita)k(la)e(suma)i(de)f(am)m(b)s(os)h(y)f(la)g
(resta)g(del)h(segundo)f(menos)h(el)g(primero.)65 b(Se)41
b(deb)s(en)g(mostrar)f(am)m(b)s(os)-128 668 y(resultados)34
b(p)s(or)e(pan)m(talla.)p 0 TeXcolorgray -128 5836 V
-128 5956 a(Jan)m(uary)i(17,)e(2020)1255 b(3)1413 b(Norman)32
b(R)m(uiz)p 0 TeXcolorgray eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray 0 TeXcolorgray -128
-74 4016 5 v 0 TeXcolorgray -128 229 a Fe(2)162 b(Ejercicio)52
b Fa(\233)p Fe(2)109 448 y Ff(Hacer)34 b(un)g(programa)f(que)i(p)s
(ermita)e(ingresar)i(p)s(or)e(teclado)h(la)f(can)m(tidad)i(de)f(horas)g
(traba)s(jadas)f(en)-128 568 y(el)39 b(mes)f(p)s(or)g(un)g(op)s(erario)
f(y)h(luego)g(el)g(v)-5 b(alor)37 b(que)i(se)g(le)f(paga)f(p)s(or)g
(hora)g(traba)s(jada)g(a)g(ese)i(op)s(erario.)59 b(El)-128
689 y(programa)32 b(deb)s(e)i(calcular)f(y)g(emitir)g(p)s(or)f(pan)m
(talla)h(el)g(sueldo)g(que)h(le)f(corresp)s(onda.)p 0
TeXcolorgray -128 5857 V -128 5977 a(Jan)m(uary)h(17,)e(2020)1255
b(4)1413 b(Norman)32 b(R)m(uiz)p 0 TeXcolorgray eop end
%%Page: 5 5
TeXDict begin 5 4 bop 0 TeXcolorgray 0 TeXcolorgray 2080
-114 a Ff(T)-8 b(raba)s(jo)32 b(Practico)h(N)p Fb(\272)g
Ff(1)f(\(Ejercicios)i(Basicos\))p -128 -74 4016 5 v 0
TeXcolorgray -128 229 a Fe(3)162 b(Ejercicio)52 b Fa(\233)p
Fe(3)109 448 y Ff(Una)33 b(concesionaria)g(de)h(autos)f(paga)f(a)h(los)
g(v)m(endedores)i(un)e(sueldo)h(\034jo)f(de)g($)g(5000.-,)e(m\341s)j($)
e(500.-)-128 568 y(de)44 b(premio)g(p)s(or)f(cada)g(auto)g(v)m(endido.)
77 b(Hacer)43 b(un)h(programa)f(que)h(p)s(ermita)f(ingresar)h(p)s(or)f
(teclado)g(la)-128 689 y(can)m(tidad)34 b(de)f(autos)g(v)m(endidos)i(p)
s(or)d(un)i(determinado)g(v)m(endedor)g(y)f(que)h(luego)f(calcule)h(el)
f(sueldo)h(total)e(a)-128 809 y(pagarle)24 b(al)g(mismo)g(\(Sueldo)h
(\034jo)e(+)h(Comisi\363n)g(T)-8 b(otal\))24 b(y)g(emitirlo)g(p)s(or)g
(pan)m(talla.)40 b(A)m(tenci\363n:)h(El)24 b(programa)-128
930 y(solamen)m(te)35 b(deb)s(e)e(solicitar)g(un)g(solo)f(dato:)44
b(la)32 b(can)m(tidad)h(de)g(autos)g(v)m(endidos.)p 0
TeXcolorgray -128 5857 V -128 5977 a(Jan)m(uary)h(17,)e(2020)1255
b(5)1413 b(Norman)32 b(R)m(uiz)p 0 TeXcolorgray eop end
%%Page: 6 6
TeXDict begin 6 5 bop 0 TeXcolorgray 0 TeXcolorgray -128
-74 4016 5 v 0 TeXcolorgray -128 229 a Fe(4)162 b(Ejercicio)52
b Fa(\233)p Fe(4)109 448 y Ff(Una)42 b(farmacia)h(hace)g(el)g(15\045)g
(de)g(descuen)m(to)i(sobre)e(los)h(precios)f(de)h(la)e(lista)h
(o\034cial.)75 b(Hacer)43 b(un)-128 568 y(programa)37
b(que)g(p)s(ermita)h(ingresar)f(p)s(or)f(teclado)i(el)f(precio)g(de)h
(lista)f(de)g(un)g(determinado)h(art\355culo)f(y)g(la)-128
689 y(can)m(tidad)k(de)f(unidades)h(compradas)f(p)s(or)f(un)h
(determinado)h(clien)m(te.)66 b(Luego)39 b(calcular)h(e)g(informar)g(p)
s(or)-128 809 y(pan)m(talla)e(el)f(total)g(a)g(pagar)g(aplicando)g(el)h
(descuen)m(to)h(resp)s(ectiv)m(o.)60 b(P)m(or)37 b(ejemplo:)54
b(Precio)38 b(del)g(art\355culo:)-128 930 y($50.-.)43
b(Can)m(tidad)33 b(de)g(Unidades:)45 b(2.)e(T)-8 b(otal)33
b(a)f(P)m(agar:)44 b($)32 b(85.)p 0 TeXcolorgray -128
5857 V -128 5977 a(Jan)m(uary)i(17,)e(2020)1255 b(6)1413
b(Norman)32 b(R)m(uiz)p 0 TeXcolorgray eop end
%%Page: 7 7
TeXDict begin 7 6 bop 0 TeXcolorgray 0 TeXcolorgray 2080
-114 a Ff(T)-8 b(raba)s(jo)32 b(Practico)h(N)p Fb(\272)g
Ff(1)f(\(Ejercicios)i(Basicos\))p -128 -74 4016 5 v 0
TeXcolorgray -128 229 a Fe(5)162 b(Ejercicio)52 b Fa(\233)p
Fe(5)109 448 y Ff(Existe)47 b(una)f(unidad)g(de)g(medida)h(llamada)e
(pulgada)h(que)h(se)f(usa)g(p)s(or)f(ejemplo)i(para)e(medir)i(el)-128
568 y(tama\361o)33 b(de)g(la)f(pan)m(talla)h(de)g(un)g(monitor.)43
b(Una)33 b(pulgada)f(equiv)-5 b(ale)34 b(apro)m(ximadamen)m(te)h(a)d
(2,5)g(cm.)p 0 TeXcolorgray -8 772 a Fb(\210)p 0 TeXcolorgray
48 w Ff(Hacer)25 b(un)g(programa)f(para)g(ingresar)h(p)s(or)e(teclado)i
(una)g(medida)g(en)g(cms)g(y)g(que)g(calcule)h(y)f(emita)g(p)s(or)116
892 y(pan)m(talla)596 b(el)h(equiv)-5 b(alen)m(te)598
b(en)f(pulgadas.)116 1013 y(A)m(tenci\363n:)75 b(El)48
b(programa)g(solamen)m(te)h(deb)s(e)f(solicitar)g(un)g(solo)g(dato:)74
b(la)47 b(can)m(tidad)h(de)h(cms)f(a)116 1133 y(con)m(v)m(ertir.)p
0 TeXcolorgray -8 1336 a Fb(\210)p 0 TeXcolorgray 48
w Ff(Hacer)41 b(un)f(programa)g(para)f(ingresar)i(p)s(or)e(teclado)i
(una)f(medida)h(en)g(pulgadas)f(y)g(que)h(calcule)h(y)116
1457 y(emita)370 b(p)s(or)e(pan)m(talla)h(el)g(equiv)-5
b(alen)m(te)372 b(en)d(cms.)116 1577 y(A)m(tenci\363n:)47
b(El)34 b(programa)f(solamen)m(te)i(deb)s(e)g(solicitar)f(un)g(solo)f
(dato:)46 b(la)33 b(can)m(tidad)h(de)g(pulgadas)g(a)116
1698 y(con)m(v)m(ertir.)p 0 TeXcolorgray -128 5857 V
-128 5977 a(Jan)m(uary)g(17,)e(2020)1255 b(7)1413 b(Norman)32
b(R)m(uiz)p 0 TeXcolorgray eop end
%%Page: 8 8
TeXDict begin 8 7 bop 0 TeXcolorgray 0 TeXcolorgray -128
-74 4016 5 v 0 TeXcolorgray -128 229 a Fe(6)162 b(Ejercicio)52
b Fa(\233)p Fe(6)109 448 y Ff(Hacer)38 b(un)h(programa)e(para)h
(ingresar)h(p)s(or)f(teclado)g(la)g(can)m(tidad)h(de)g(asien)m(tos)g
(disp)s(onibles)h(en)f(un)-128 568 y(a)m(vi\363n)j(y)g(la)f(can)m
(tidad)h(de)g(pasa)s(jes)g(v)m(endidos)h(\(es)g(decir)f(la)f(can)m
(tidad)h(de)g(asien)m(tos)h(o)s(cupados\))e(y)h(luego)-128
689 y(calcular)e(e)g(informar)f(el)h(p)s(orcen)m(ta)s(je)g(de)g(o)s
(cupaci\363n)g(del)g(mismo.)65 b(P)m(or)39 b(ejemplo)i(si)f(el)g(a)m
(vi\363n)g(tiene)g(200)-128 809 y(asien)m(tos)29 b(disp)s(onibles)h(y)e
(se)g(v)m(endieron)h(80)e(pasa)s(jes,)i(el)f(p)s(orcen)m(ta)s(je)g(de)g
(o)s(cupaci\363n)g(que)g(se)h(informar\341)e(ser\341)-128
930 y(de)34 b(un)e(40\045.)p 0 TeXcolorgray -128 5857
V -128 5977 a(Jan)m(uary)i(17,)e(2020)1255 b(8)1413 b(Norman)32
b(R)m(uiz)p 0 TeXcolorgray eop end
%%Page: 9 9
TeXDict begin 9 8 bop 0 TeXcolorgray 0 TeXcolorgray 2080
-114 a Ff(T)-8 b(raba)s(jo)32 b(Practico)h(N)p Fb(\272)g
Ff(1)f(\(Ejercicios)i(Basicos\))p -128 -74 4016 5 v 0
TeXcolorgray -128 229 a Fe(7)162 b(Ejercicio)52 b Fa(\233)p
Fe(7)109 448 y Ff(Una)23 b(maestra)h(desea)g(un)g(programa)f(para)g
(ingresar)h(p)s(or)f(teclado)g(la)h(can)m(tidad)g(de)g(alumnos)g(hom)m
(bres)-128 568 y(y)30 b(alumnas)f(m)m(ujeres)i(de)e(un)h(curso)f(y)g
(obtener)h(el)f(p)s(orcen)m(ta)s(je)g(resp)s(ectiv)m(o)i(para)e(cada)g
(sexo.)43 b(P)m(or)29 b(ejemplo,)-128 689 y(si)37 b(se)f(ingresa)g(24)g
(alumnos)g(y)g(16)f(alumnas,)j(obtendr\341)e(como)g(respuesta)h(que)g
(en)f(ese)h(curso)f(el)g(60\045)g(son)-128 809 y(alumnos)e(y)f(el)g
(40\045)f(son)h(alumnas.)p 0 TeXcolorgray -128 5857 V
-128 5977 a(Jan)m(uary)h(17,)e(2020)1255 b(9)1413 b(Norman)32
b(R)m(uiz)p 0 TeXcolorgray eop end
%%Page: 10 10
TeXDict begin 10 9 bop 0 TeXcolorgray 0 TeXcolorgray
-128 -74 4016 5 v 0 TeXcolorgray -128 229 a Fe(8)162
b(Ejercicio)52 b Fa(\233)p Fe(8)109 448 y Ff(Un)39 b(comercio)g(v)m
(ende)i(tres)e(marcas)g(de)h(alfa)s(jores)e(distin)m(tas:)57
b(Sabroso,)40 b(Goloso)e(y)h(Ap)s(etitoso.)63 b(El)-128
568 y(due\361o)32 b(le)g(pide)g(a)g(Ud.,)g(futuro)f(programador,)g(un)h
(programa)e(para)h(que)i(se)f(pueda)g(ingresar)g(p)s(or)f(teclado)-128
689 y(la)36 b(can)m(tidad)h(de)f(alfa)s(jores)f(v)m(endidos)j(duran)m
(te)e(el)g(d\355a)g(para)g(cada)f(una)h(de)h(las)f(tres)g(marcas)g(en)h
(el)f(orden)-128 809 y(an)m(teriormen)m(te)47 b(indicado)e(\(es)g
(decir)g(se)h(ingresan)f(3)f(datos)h(distin)m(tos\))g(y)g(luego)g(se)g
(calcule)h(e)f(informe)-128 930 y(el)d(p)s(orcen)m(ta)s(je)g(de)g(v)m
(en)m(tas)h(para)f(cada)f(una)h(de)g(ellas.)71 b(P)m(or)41
b(ejemplo:)63 b(se)42 b(ingresa)g(100,)h(25)e(y)h(75)f(como)-128
1050 y(can)m(tidades)35 b(v)m(endidas)f(en)m(tonces)g(el)f(programa)f
(calcular\341)h(e)g(informar\341)f(Sabroso:)43 b(50\045,)33
b(Goloso)f(12,50\045)-128 1170 y(y)h(Ap)s(etitoso)g(37,50\045.)p
0 TeXcolorgray -128 5857 V -128 5977 a(Jan)m(uary)h(17,)e(2020)1231
b(10)1388 b(Norman)32 b(R)m(uiz)p 0 TeXcolorgray eop
end
%%Page: 11 11
TeXDict begin 11 10 bop 0 TeXcolorgray 0 TeXcolorgray
2080 -114 a Ff(T)-8 b(raba)s(jo)32 b(Practico)h(N)p Fb(\272)g
Ff(1)f(\(Ejercicios)i(Basicos\))p -128 -74 4016 5 v 0
TeXcolorgray -128 229 a Fe(9)162 b(Ejercicio)52 b Fa(\233)p
Fe(9)109 448 y Ff(Hacer)38 b(un)h(programa)e(para)h(que)h(se)f(ingrese)
i(p)s(or)d(teclado)i(el)f(imp)s(orte)g(de)h(una)f(v)m(en)m(ta)h(sin)g
(el)g(IV)-11 b(A)-128 568 y(incluido)33 b(\(se)f(lo)f(llama)g(Imp)s
(orte)g(Neto\),)h(luego)f(calcular)h(y)g(mostrar)f(p)s(or)g(pan)m
(talla)g(el)h(imp)s(orte)f(total)g(con)-128 689 y(el)g(IV)-11
b(A)31 b(del)f(21\045)g(incluido)h(\(se)g(lo)f(llama)g(Imp)s(orte)g
(Bruto\).)43 b(P)m(or)30 b(ejemplo:)43 b(se)31 b(ingresa)g(80)f(como)g
(Imp)s(orte)-128 809 y(Neto,)j(se)h(calcular\341)e(y)h(mostrar\341)g
(en)m(tonces)h(96,80)e(como)h(Imp)s(orte)g(Bruto.)p 0
TeXcolorgray -128 5857 V -128 5977 a(Jan)m(uary)h(17,)e(2020)1231
b(11)1388 b(Norman)32 b(R)m(uiz)p 0 TeXcolorgray eop
end
%%Page: 12 12
TeXDict begin 12 11 bop 0 TeXcolorgray 0 TeXcolorgray
-128 -74 4016 5 v 0 TeXcolorgray -128 229 a Fe(10)161
b(Ejercicio)53 b Fa(\233)p Fe(10)109 448 y Ff(Hacer)37
b(un)f(programa)g(para)g(que)h(se)h(ingrese)f(p)s(or)f(teclado)h(el)g
(imp)s(orte)f(de)h(una)g(v)m(en)m(ta)g(con)g(el)g(IV)-11
b(A)-128 568 y(incluido)42 b(\(se)f(lo)g(llama)f(Imp)s(orte)h(Bruto\),)
i(luego)d(calcular)h(y)g(mostrar)g(p)s(or)f(pan)m(talla)h(el)g(imp)s
(orte)g(total)-128 689 y(sin)c(el)f(IV)-11 b(A)36 b(del)g(21\045)f
(incluido)i(\(se)f(lo)f(llama)h(Imp)s(orte)g(Neto\).)52
b(P)m(or)36 b(ejemplo:)50 b(se)36 b(ingresa)h(169,40)d(como)-128
809 y(Imp)s(orte)f(Bruto,)g(se)g(calcular\341)g(y)g(mostrar\341)g(en)m
(tonces)h(140)e(como)h(Imp)s(orte)f(Neto.)p 0 TeXcolorgray
-128 5857 V -128 5977 a(Jan)m(uary)i(17,)e(2020)1231
b(12)1388 b(Norman)32 b(R)m(uiz)p 0 TeXcolorgray eop
end
%%Page: 13 13
TeXDict begin 13 12 bop 0 TeXcolorgray 0 TeXcolorgray
2080 -114 a Ff(T)-8 b(raba)s(jo)32 b(Practico)h(N)p Fb(\272)g
Ff(1)f(\(Ejercicios)i(Basicos\))p -128 -74 4016 5 v 0
TeXcolorgray -128 229 a Fe(11)161 b(Ejercicio)53 b Fa(\233)p
Fe(11)109 448 y Ff(Hacer)39 b(un)f(programa)g(para)g(que)i(se)f
(ingrese)g(p)s(or)f(teclado)h(el)g(imp)s(orte)f(bruto)h(de)g(una)f(v)m
(en)m(ta)i(y)f(el)-128 568 y(imp)s(orte)j(neto)f(de)h(una)g(v)m(en)m
(ta.)71 b(El)41 b(imp)s(orte)h(bruto)f(es)h(el)g(imp)s(orte)f(original)
g(y)h(el)g(imp)s(orte)f(neto)h(es)g(el)-128 689 y(imp)s(orte)32
b(que)h(el)f(clien)m(te)h(pag\363)e(luego)g(de)h(que)h(el)f(v)m
(endedor)h(le)f(aplicara)f(alg\372n)h(descuen)m(to.)45
b(El)32 b(programa)-128 809 y(deb)s(e)46 b(luego)f(mostrar)f(p)s(or)g
(pan)m(talla)h(que)h(p)s(orcen)m(ta)s(je)f(de)g(descuen)m(to)h(fue)f
(aplicado)g(a)f(la)h(v)m(en)m(ta.)81 b(P)m(or)-128 930
y(ejemplo)33 b(si)f(se)g(ingresa)g(imp)s(orte)f(bruto)h(120)e(e)i(imp)s
(orte)g(neto)f(108,)g(se)i(emitir\341)e(un)h(cartel)g(indicando)g(que)
-128 1050 y(el)40 b(descuen)m(to)h(aplicado)e(fue)g(del)g(10\045.)62
b(T)-8 b(ener)40 b(en)f(cuen)m(ta)h(que)g(el)f(imp)s(orte)g(neto)g(es)h
(siempre)g(menor)f(o)-128 1170 y(igual)33 b(al)f(imp)s(orte)h(bruto,)g
(n)m(unca)g(ma)m(y)m(or.)p 0 TeXcolorgray -128 5857 V
-128 5977 a(Jan)m(uary)h(17,)e(2020)1231 b(13)1388 b(Norman)32
b(R)m(uiz)p 0 TeXcolorgray eop end
%%Page: 14 14
TeXDict begin 14 13 bop 0 TeXcolorgray 0 TeXcolorgray
-128 -74 4016 5 v 0 TeXcolorgray -128 229 a Fe(12)161
b(Ejercicio)53 b Fa(\233)p Fe(12)109 448 y Ff(Un)33 b(nego)s(cio)h(de)g
(v)m(en)m(ta)h(de)f(alfa)s(jores)f(le)h(pide)g(a)f(Ud.,)h(futuro)g
(programador,)f(que)h(le)g(desarrolle)h(un)-128 568 y(programa)27
b(teniendo)h(en)g(cuen)m(ta)g(las)g(siguien)m(tes)h(condiciones:)43
b(La)27 b(ca)s(ja)f(de)i(12)f(alfa)s(jores)f(se)i(v)m(ende)h(a)e($50.-)
-128 689 y(y)35 b(cada)e(alfa)s(jor)g(suelto)h(a)g($)f(5.)47
b(El)34 b(programa)f(deb)s(e)h(solicitar)g(al)g(usuario)g(cuan)m(tos)h
(alfa)s(jores)e(compr\363)h(un)-128 809 y(clien)m(te)43
b(y)f(luego)f(calcular)h(el)f(imp)s(orte)g(a)g(pagar)g(p)s(or)f(el)i
(mismo.)70 b(T)-8 b(ener)42 b(en)g(cuen)m(ta)g(que)g(p)s(or)e(cada)i
(12)-128 930 y(alfa)s(jores)37 b(se)g(deb)s(e)h(calcular)f(una)g(ca)s
(ja,)g(y)g(el)g(exceden)m(te)j(se)e(calcula)f(como)g(suelto.)57
b(P)m(or)37 b(ejemplo:)52 b(Si)37 b(la)-128 1050 y(can)m(tidad)k
(ingresada)f(son)f(15)g(alfa)s(jores,)i(el)f(programa)f(calcular\341:)
57 b(1)39 b(ca)s(ja)g(y)h(3)f(sueltos,)k(es)d(decir)g($50.-)-128
1170 y(+)f($5)f(x)i(3)e(=)h($)f(65.)62 b(Si)39 b(can)m(tidad)h
(ingresada)f(son)g(28)f(alfa)s(jores,)i(el)g(programa)e(calcular\341:)
56 b(2)39 b(ca)s(jas)f(y)h(4)-128 1291 y(sueltos,)d(es)f(decir)g
($100.-)e(+)h($5)g(x)g(4)g(=)g($)g(120.-.)47 b(Si)34
b(can)m(tidad)h(ingresada)g(son)f(8)g(alfa)s(jores,)g(el)h(programa)
-128 1411 y(calcular\341:)44 b(0)33 b(ca)s(jas)f(y)h(8)f(sueltos,)i(es)
g(decir)f($5)f(x)h(8)f(=)h($)f(40.-.)p 0 TeXcolorgray
-128 5857 V -128 5977 a(Jan)m(uary)i(17,)e(2020)1231
b(14)1388 b(Norman)32 b(R)m(uiz)p 0 TeXcolorgray eop
end
%%Page: 15 15
TeXDict begin 15 14 bop 0 TeXcolorgray 0 TeXcolorgray
2080 -114 a Ff(T)-8 b(raba)s(jo)32 b(Practico)h(N)p Fb(\272)g
Ff(1)f(\(Ejercicios)i(Basicos\))p -128 -74 4016 5 v 0
TeXcolorgray -128 229 a Fe(13)161 b(Ejercicio)53 b Fa(\233)p
Fe(13)109 448 y Ff(Hacer)24 b(un)g(programa)g(que)h(solicite)g(p)s(or)e
(teclado)i(que)g(se)g(ingresen)g(dos)f(n)m(\372meros)i(y)e(luego)g
(guardarlos)-128 568 y(en)41 b(dos)f(v)-5 b(ariables)41
b(distin)m(tas.)66 b(A)40 b(con)m(tin)m(uaci\363n)i(se)e(deb)s(en)h(in)
m(tercam)m(biar)g(m)m(utuamen)m(te)h(los)e(v)-5 b(alores)41
b(en)-128 689 y(am)m(bas)26 b(v)-5 b(ariables)26 b(y)g(mostrarlos)f(p)s
(or)g(pan)m(talla.)41 b(P)m(or)26 b(ejemplo:)41 b(Sup)s(oniendo)26
b(que)g(se)g(ingresan)g(3)e(y)i(8)f(como)-128 809 y(v)-5
b(alores)29 b(y)g(que)g(la)f(v)-5 b(ariables)28 b(usadas)h(son)g(A)f(y)
h(B,)f(en)m(tonces)i(A=3)e(y)g(B=8,)h(p)s(ero)f(luego)h(deb)s(e)f
(quedar)h(A=8)-128 930 y(y)39 b(B=3.)61 b(Nota)38 b(1:)54
b(No)39 b(se)g(deb)s(en)g(efectuar)g(op)s(eraciones)g(aritm\351ticas)h
(\(suma,)g(resta,)g(etc.\))62 b(de)39 b(ning\372n)-128
1050 y(tip)s(o.)46 b(Nota)34 b(2:)45 b(Los)33 b(v)-5
b(alores)34 b(3)g(y)f(8)h(y)g(los)g(nom)m(bres)g(A)g(y)g(B)g(son)g
(solamen)m(te)h(para)e(ejempli\034car,)i(no)e(deb)s(e)-128
1170 y(hacer)h(un)e(programa)g(para)h(ingresar)g(solamen)m(te)h(esos)f
(v)-5 b(alores,)33 b(deb)s(e)h(ser)f(gen\351rico.)p 0
TeXcolorgray -128 5857 V -128 5977 a(Jan)m(uary)h(17,)e(2020)1231
b(15)1388 b(Norman)32 b(R)m(uiz)p 0 TeXcolorgray eop
end
%%Page: 16 16
TeXDict begin 16 15 bop 0 TeXcolorgray 0 TeXcolorgray
-128 -74 4016 5 v 0 TeXcolorgray -128 229 a Fe(14)161
b(Ejercicio)53 b Fa(\233)p Fe(14)109 448 y Ff(Hacer)23
b(un)g(programa)f(para)h(que)h(el)f(usuario)g(ingrese)h(la)f(hora,)h
(min)m(utos)g(y)g(segundos)g(de)f(un)g(momen)m(to)-128
568 y(del)h(d\355a)f(y)g(se)h(emita)f(p)s(or)g(pan)m(talla)g(la)f(can)m
(tidad)i(de)f(segundos)i(transcurridos)f(desde)g(la)f(mediano)s(c)m
(he.)42 b(\(hora)-128 689 y(00:00:00\).)p 0 TeXcolorgray
-128 5857 V -128 5977 a(Jan)m(uary)34 b(17,)e(2020)1231
b(16)1388 b(Norman)32 b(R)m(uiz)p 0 TeXcolorgray eop
end
%%Page: 17 17
TeXDict begin 17 16 bop 0 TeXcolorgray 0 TeXcolorgray
2080 -114 a Ff(T)-8 b(raba)s(jo)32 b(Practico)h(N)p Fb(\272)g
Ff(1)f(\(Ejercicios)i(Basicos\))p -128 -74 4016 5 v 0
TeXcolorgray -128 229 a Fe(15)161 b(Ejercicio)53 b Fa(\233)p
Fe(15)109 448 y Ff(Hacer)37 b(un)g(programa)f(para)g(con)m(v)m(ertir)i
(grados)f(Celsius)i(a)d(grados)g(F)-8 b(ahrenheit.)57
b(P)m(ara)36 b(efectuar)i(el)-128 568 y(c\341lculo)27
b(tener)g(en)g(cuen)m(ta)g(que)g(0)f(grados)g(Celsius)i(equiv)-5
b(alen)28 b(a)e(32)g(grados)g(F)-8 b(ahrenheit,)28 b(y)e(que)i(cada)e
(grado)-128 689 y(Celsius)36 b(equiv)-5 b(ale)36 b(a)d(1,8)g(grados)h
(F)-8 b(ahrenheit.)48 b(P)m(or)34 b(ejemplo)h(10)e(grados)g(Celsius,)k
(equiv)-5 b(alen)35 b(a)f(32)f(+)h(1,8)-128 809 y(*)k(10)g(=)g(50)f
(grados)h(F)-8 b(ahrenheit.)61 b(Arme)39 b(usted)g(mismo)g(la)f
(f\363rm)m(ula)g(a)g(partir)g(del)h(c\341lculo)g(del)f(ejemplo)-128
930 y(an)m(terior.)p 0 TeXcolorgray -128 5857 V -128
5977 a(Jan)m(uary)c(17,)e(2020)1231 b(17)1388 b(Norman)32
b(R)m(uiz)p 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
